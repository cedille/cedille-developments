import mono .

module scott/encoding (F: ★ ➔ ★) {mono: Mono ·F} .

import view .
import cast .
import recType .
import utils .

CaseAlg ◂ ★ ➔ ★ ➔ ★ = λ D: ★. λ X: ★. F ·(Wrap ·D) ➔ X.
DF ◂ ★ ➔ ★ = λ D: ★. ∀ X: ★. CaseAlg ·D ·X ➔ X.

inDF ◂ ∀ D: ★. CaseAlg ·D ·(DF ·D)
= Λ D. λ xs. Λ X. λ a. a xs .

monoDF ◂ Mono ·DF
= Λ X. Λ Y. λ c.
  intrCast
    -(λ d. Λ Z. λ a. d (λ df. a (elimCast -(mono (monoWrap c)) df)))
    -(λ _. β) .

Pred ◂ ★ ➔ ★ = λ D: ★. ι x: D. DF ·D .

monoPred ◂ Mono ·Pred
= Λ X. Λ Y. λ c.
  intrCast
    -(λ x. [ elimCast -c x.1 , elimCast -(monoDF c) x.2 ])
    -(λ x. β) .

WkIh ◂ Π D: ★. (DF ·D ➔ ★) ➔ ★
= λ D: ★. λ P: DF ·D ➔ ★. WkSigma ·(Pred ·D) ·(λ x: Pred ·D. P x.2) .

castWkIh ◂ ∀ D: ★. ∀ P: DF ·D ➔ ★. Cast ·(WkIh ·D ·P) ·(Wrap ·D)
= Λ D. Λ P.
  intrCast -(λ x. wrap (wkproj1 x).1) -(λ x. wkproj1Eta -x) .

inDFWkIh ◂ ∀ D: ★. ∀ P: DF ·D ➔ ★. F ·(WkIh ·D ·P) ➔ DF ·D
= Λ D. Λ P. λ xs. inDF ·D (elimCast -(mono (castWkIh ·D ·P)) xs) .

_ ◂ { inDF ≃ inDFWkIh } = β .

monoWkIh
◂ ∀ X: ★. ∀ Y: ★. Π c: Cast ·X ·Y. ∀ P: DF ·Y ➔ ★.
  Cast ·(WkIh ·X ·(λ x: DF ·X. P (elimCast -(monoDF c) x))) ·(WkIh ·Y ·P)
= Λ X. Λ Y. λ c. Λ P.
  cast1stWkSigma ·(Pred ·X) ·(Pred ·Y) ·(λ x: Pred ·Y. P x.2) (monoPred c) .

WkPrfAlg ◂ Π D: ★. (DF ·D ➔ ★) ➔ ★
= λ D: ★. λ P: DF ·D ➔ ★. Π xs: F ·(WkIh ·D ·P). P (inDFWkIh xs) .

WkIndDF ◂ Π D: ★. DF ·D ➔ ★
= λ D: ★. λ x: DF ·D.
  ∀ P: DF ·D ➔ ★. WkPrfAlg ·D ·P ➔ P x .

instWkIh
◂ ∀ D: ★. ∀ P: DF ·D ➔ ★. WkPrfAlg ·D ·P ➔ Cast ·(WkIh ·D ·(WkIndDF ·D)) ·(WkIh ·D ·P)
= Λ D. Λ P. λ a.
  cast2ndWkSigma ·(Pred ·D) ·(λ x: Pred ·D. WkIndDF ·D x.2) ·(λ x: Pred ·D. P x.2)
    λ x. λ ih. ih a .

inWkIndDF ◂ ∀ D: ★. Π xs: F ·(WkIh ·D ·(WkIndDF ·D)). WkIndDF ·D (inDFWkIh xs)
= Λ D. λ xs. Λ P. λ a. a (elimCast -(mono (instWkIh a)) xs) .

_ ◂ { inDF ≃ inWkIndDF } = β .

monoWkIndDF
◂ ∀ X: ★. ∀ Y: ★. Π c: Cast ·X ·Y.
  ∀ x: DF ·X. Cast ·(WkIndDF ·X x) ·(WkIndDF ·Y (elimCast -(monoDF c) x))
= Λ X. Λ Y. λ c. Λ x.
  intrCast
    -(λ d. Λ P. λ a.
      d ·(λ x: DF ·X. P (elimCast -(monoDF c) x))
        λ xs.
          [xs' ◂ F ·(WkIh ·Y ·P) = elimCast -(mono (monoWkIh c ·P)) xs]
          - a xs')
    -λ _. β .

DFI ◂ ★ ➔ ★
= λ D: ★. ι x: DF ·D. WkIndDF ·D x .

monoDFI ◂ Mono ·DFI
= Λ X. Λ Y. λ c.
  intrCast
    -(λ x. [ elimCast -(monoDF c) x.1 , elimCast -(monoWkIndDF c -x.1) x.2 ])
    -λ _. β .

D ◂ ★ = Rec ·DFI .
rollD   ◂ DFI ·D ➔ D = roll -monoDFI .
unrollD ◂ D ➔ DFI ·D = unroll -monoDFI .

castPredD ◂ Cast ·D ·(Pred ·D)
= intrCast
    -(λ x. [ x , (unrollD x).1 ])
    -(λ x. β) .

castWkIhD ◂ Cast ·(Wrap ·D) ·(WkIh ·D ·(WkIndDF ·D))
= intrCast
    -(λ x. intrWkSigma (elimCast -castPredD (unwrap x))
             -(unrollD (unwrap x)).2)
    -(λ x. unwrapEta -x) .

inD ◂ CaseAlg ·D ·D
= λ xs. rollD [ inDF xs , inWkIndDF ·D (elimCast -(mono castWkIhD) xs) ] .

LiftD ◂ (D ➔ ★) ➔ DF ·D ➔ ★
= λ P: D ➔ ★. λ x: DF ·D.
  ∀ v: View ·D β{| x |}. P (elimView β{| x |} -v) .

castWkSigmaD ◂ ∀ P: D ➔ ★. Cast ·(WkSigma ·D ·P) ·(Wrap ·D)
= Λ P. cast2ndWkSigma ·D ·P ·(λ x: D. Top) (λ x. λ y. β) .

inDWkSigma ◂ ∀ P: D ➔ ★. F ·(WkSigma ·D ·P) ➔ D
= Λ P. λ xs. inD (elimCast -(mono (castWkSigmaD ·P)) xs) .

unliftD ◂ ∀ P: D ➔ ★. Cast ·(WkIh ·D ·(LiftD ·P)) ·(WkSigma ·D ·P)
= Λ P.
  intrCast
    -(λ x. elimWkSigma x λ p. Λ ih. intrWkSigma p.1 -(ih -(selfView p.1)))
    -(λ x. elimWkSigmaEta -x) .

wkIndD ◂ ∀ P: D ➔ ★. (Π xs: F ·(WkSigma ·D ·P). P (inDWkSigma xs)) ➔ Π x: D. P x
= Λ P. λ a. λ x.
  (unrollD x).2 ·(LiftD ·P)
    (λ xs. Λ v. a (elimCast -(mono (unliftD ·P)) xs))
    -(selfView x) .

-- computation and extensionality
caseD ◂ ∀ X: ★. CaseAlg ·D ·X ➔ D ➔ X
= Λ X. λ a. λ x. (unrollD x).1 a .

_ ◂ { wkIndD ≃ caseD } = β .

caseDBeta ◂ ∀ X: ★. Π a: CaseAlg ·D ·X. Π xs: F ·(Wrap ·D). { caseD a (inD xs) ≃ a xs }
= Λ X. λ a. λ xs. β .

caseDEta ◂ Π x: D. { caseD inD x ≃ x }
= wkIndD ·(λ x: D. { caseD inD x ≃ x }) λ xs. β .

outD ◂ D ➔ F ·(Wrap ·D)
= caseD λ xs. xs .

lambek1D ◂ Π xs: F ·(Wrap ·D). { outD (inD xs) ≃ xs }
= λ xs. β .

lambek2D ◂ Π x: D. { inD (outD x) ≃ x }
= wkIndD ·(λ x: D. { inD (outD x) ≃ x }) λ xs. β .

