import functor.

module functorThms (F: ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap}.

import cast .
import mono .

monoFunctor ◂ Mono ·F
= Λ X. Λ Y. λ c.
  intrCast
    -(λ d. fmap (elimCast -c) d)
    -(λ d. fmapId (elimCast -c) (λ x. β) d).

import utils.

fmapFstPair ◂ ∀ A: ★. ∀ B: ★. Π f: A ➔ B. Π xs: F ·A.
  {fmap fst (fmap (λ x. mkpair x (f x)) xs) ≃ xs}
= Λ A. Λ B. λ f. λ xs.
  ρ+ (fmapCompose (fst ·A ·B) (λ x: A. mkpair x (f x)) xs) -
  ρ+ (fmapId (λ x: A. x) (λ x. β) xs) -
  β.

fmapSndPair ◂ ∀ A: ★. ∀ B: ★. Π f: A ➔ B. Π xs: F ·A.
  {fmap snd (fmap (λ x. mkpair x (f x)) xs) ≃ fmap f xs}
= Λ A. Λ B. λ f. λ xs.
  ρ+ (fmapCompose (snd ·A ·B) (λ x: A. mkpair x (f x)) xs) -
  β.
