import functor .
import utils .

module signatures/tree
  (A: ★) (F: ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap} .

TreeF ◂ ★ ➔ ★
= λ T: ★. Pair ·A ·(F ·T) .

treeFmap ◂ Fmap ·TreeF
= Λ X. Λ Y. λ f. λ t.
  mksigma (proj1 t) (fmap f (proj2 t)) .

treeFmapId ◂ FmapId ·TreeF treeFmap
= Λ X. Λ Y. λ c. λ ci. λ t.
  indsigma t ·(λ x: TreeF ·X. { treeFmap c x ≃ x })
    (λ x. λ xs.
       ρ (fmapId c ci xs)
         @y.{ mksigma x y ≃ mkpair x xs }
     - β) .

treeFmapCompose ◂ FmapCompose ·TreeF treeFmap
= Λ X. Λ Y. Λ Z. λ f. λ g. λ t.
  indsigma t ·(λ x: TreeF ·X. { treeFmap f (treeFmap g x) ≃ treeFmap (λ x. f (g x)) x })
    (λ x. λ xs.
       ρ (fmapCompose f g xs)
         @y.{ mkpair x y ≃ mkpair x (fmap (λ x. f (g x)) xs) }
     - β).
