import utils .
import functor .

module parigot/examples/list .

import parigot/examples/list-data .

listMap ◂ Fmap ·List
= Λ A. Λ B. λ f.
  recList ·A ·(List ·B)
    (nil ·B)
    (λ hd. λ tl. λ xs. cons (f hd) xs) .

listMapId ◂ FmapId ·List listMap
= Λ A. Λ B. λ c. λ ci.
  indList ·A ·(λ x: List ·A. { listMap c x ≃ x })
    β
    (λ hd. λ tl. λ ih.
       ρ (ci hd) @x.{ cons x (listMap c tl) ≃ cons hd tl }
     - ρ ih      @x.{ cons hd x ≃ cons hd tl }
     - β) .

listMapCompose ◂ FmapCompose ·List listMap
= Λ A. Λ B. Λ C. λ f. λ g.
  indList ·A
    ·(λ x: List ·A. { listMap f (listMap g x) ≃ listMap (λ x. f (g x)) x })
    β
    (λ hd. λ tl. λ ih.
       ρ ih @x.{ cons (f (g hd)) x ≃ cons (f (g hd)) (listMap (λ x. f (g x)) tl) }
     - β).
