import functor .
import cast .
import mono .
import view .
import recType .
import utils .

module scott-rec/induction
  (F : ★ ➔ ★) {m: Mono ·F} .
--  {fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

-- import functorThms · F fmap -fmapId -fmapCompose.

import scott/encoding ·F -m .

DR ◂ (D ➔ ★) ➔ ★ ➔ ★
= λ P: D ➔ ★. λ Y: ★. ι x: D. Y ➔ Y ➔ P x .

fromDR ◂ ∀ P: D ➔ ★. ∀ Y: ★. Cast ·(DR ·P ·Y) ·D
= Λ P. Λ Y. intrCast -(λ x. x.1) -(λ _. β) .

inDR : ∀ P: D ➔ ★. ∀ Y: ★. F ·(Wrap ·(DR ·P ·Y)) ➔ D
= Λ P. Λ Y. λ xs.
  inD (elimCast -(monoComp -m -monoWrap (fromDR ·P ·Y)) xs) .

PrfAlgR ◂ (D ➔ ★) ➔ ★
= λ P: D ➔ ★.
  ∀ Y: ★. Π xs: F ·(Wrap ·(DR ·P ·Y)). Y ➔ P (inDR xs) .

IndD ◂ D ➔ ★ = λ x: D. ∀ P: D ➔ ★. PrfAlgR ·P ➔ PrfAlgR ·P ➔ P x .

R ◂ ★ = ι x: D. IndD x .

fromR ◂ Cast ·R ·D
= intrCast -(λ x. x.1) -(λ x. β) .

instR ◂ ∀ P: D ➔ ★. Cast ·R ·(DR ·P ·(PrfAlgR ·P))
= Λ P. intrCast -(λ x. [ x.1 , x.2 ·P ]) -(λ _. β) .

castWkIhR ◂ ∀ P: DF ·R ➔ ★. Cast ·(WkIh ·R ·P) ·(Wrap ·R)
= Λ P.
  intrCast
    -(λ x. elimWkSigma x λ y. Λ pf. wrap y.1)
    -(λ x. elimWkSigmaEta -x) .

LiftR : (D ➔ ★) ➔ (DF ·R ➔ ★)
= λ P: D ➔ ★. λ x: DF ·R.
  PrfAlgR ·P ➔ ∀ v: View ·D β{| x |}. P (elimView β{| x |} -v) .

unliftR
◂ ∀ P: D ➔ ★. Cast ·(WkIh ·R ·(LiftR ·P)) ·(Wrap ·(DR ·P ·(PrfAlgR ·P)))
= Λ P. castTrans -(castWkIhR ·(LiftR ·P)) -(monoWrap (instR ·P)) .

rollR ◂ Cast ·(DFI ·R) ·R
= intrCast
    -(λ xs.
        [x ◂ D = rollD (elimCast -(monoDFI fromR) xs)]
      - [ x
        , Λ P. λ a1. λ a2.
          [P' ◂ DF ·R ➔ ★ = LiftR ·P]
        - xs.2 ·P'
            (λ xs. λ a. Λ v.
             a1 ·(PrfAlgR ·P)
               (elimCast -(m (unliftR ·P)) xs)
               a)
            a2 -(selfView x)
      ])
    -(λ x. β)
.

toR ◂ Cast ·D ·R
= recLB -rollR .

{-
import scott/encoding ·F fmap -fmapId -fmapCompose.

IndS ◂ (S ➔ ★) ➔ ★ ➔ ★ = λ P: S ➔ ★. λ Y: ★. ι x: S. Y ➔ Y ➔ P x.

unwrapFIndS ◂ ∀ P: S ➔ ★. ∀ Y: ★. F ·(Wrap ·(IndS ·P ·Y)) ➔ F ·S
= Λ P. Λ Y. fmap ·(Wrap ·(IndS ·P ·Y)) (λ w. (unwrap w).1).

PrfAlg' ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  ∀ Y: ★. Π xs: F ·(Wrap ·(IndS ·P ·Y)). Y ➔ P (in (unwrapFIndS xs)).

InductiveS ◂ S ➔ ★ = λ s: S. ∀ P: S ➔ ★. PrfAlg' ·P ➔ PrfAlg' ·P ➔ P s.

I ◂ ★ = ι x: S. InductiveS x.

fromI ◂ Cast ·I ·S = intrCast -(λ x. x.1) -(λ x. β).

wrapIndS ◂ ∀ P: S ➔ ★. I ➔ Wrap ·(IndS ·P ·(PrfAlg' ·P))
= Λ P. λ s. wrap [ s.1 , s.2 ·P ].

inI ◂ F ·I ➔ I = λ xs.
  [ in (fcast -fromI xs)
  , Λ P. λ a1. λ a2.
    ρ ς (fmapId (λ x: I. unwrap (wrap x)) (λ _. β) xs) -
    ρ ς (fmapCompose (unwrap ·I) (wrap ·I) xs) -
    a1 (fmap (wrapIndS ·P) xs) a2 ] .

_ ◂ {inI ≃ in} = β.

toI' ◂ Π x: S. ι y: I. {y ≃ x} = λ x.
  wkInduction ·(λ x: S. ι y: I. {y ≃ x})
    (λ xs. Λ s. Λ eq.
    [mkI ◂ PrfS ·S ·(LiftS ·(λ x: S. ι y: I. {y ≃ x})) ➔ I
      = λ p. elimWkSigma p (λ z. Λ ih.
        [eqz  ◂ {ih ≃ z} = (ih -z.1 -β).2] -
        [ind  ◂ InductiveS z.1 = ρ ς eqz - (ih -z.1 -β).1.2 ] -
        [ z.1 , φ eqz - ind {| z |} ])] -
    [ inI (fmap mkI xs) , β{| in (fmap unwrap xs) |} ])
    x .

toI ◂ Cast ·S ·I = intrCast -(λ x. (toI' x).1) -(λ x. (toI' x).2).

repackIndS ◂ ∀ P: S ➔ ★. ∀ Y: ★. Y ➔ Wrap ·(IndS ·P ·Y) ➔ Sigma ·S ·P
= Λ P. Λ Y. λ y. λ w. mksigma (unwrap w).1 ((unwrap w).2 y y).

PrfAlg ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★. Π d: F ·(Sigma ·S ·P). P (in (fmap (proj1 ·S ·P) d)).

fromPrfAlg ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ PrfAlg' ·P
= Λ P. λ a. Λ Y. λ xs. λ y.
  ρ+ ς (fmapCompose (proj1 ·S ·P) (repackIndS ·P y) xs)
  - a (fmap (repackIndS ·P y) xs).

induction ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ Π s: S. P s
= Λ P. λ a. λ s. (elimCast -toI s).2 (fromPrfAlg a) (fromPrfAlg a).

rec ◂ ∀ X: ★. (F ·(Pair ·S ·X) ➔ X) ➔ S ➔ X = Λ X. induction ·(λ x: S. X).
