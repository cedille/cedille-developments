import functor .
import cast .
import mono .
import view .
import recType .
import utils .

module scott-rec/generic/encoding
  (F : ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap} .

import functorThms ·F fmap -fmapId -fmapCompose .

import scott/generic/encoding ·F -monoFunctor .

PredR ◂ (D ➔ ★) ➔ ★ ➔ ★
= λ P: D ➔ ★. λ Y: ★. ι x: D. Y ➔ Y ➔ P x .

fromPredR ◂ ∀ P: D ➔ ★. ∀ Y: ★. Cast ·(PredR ·P ·Y) ·D
= Λ P. Λ Y. intrCast -(λ x. x.1) -(λ x. β) .

inPredR ◂ ∀ P: D ➔ ★. ∀ Y: ★. F ·(PredR ·P ·Y) ➔ D
= Λ P. Λ Y. λ xs.
  inD (elimCast -(monoFunctor (fromPredR ·P ·Y)) xs) .

PrfAlgR ◂ (D ➔ ★) ➔ ★
= λ P: D ➔ ★.
  ∀ Y: ★. Π xs: F ·(PredR ·P ·Y). Y ➔ P (inPredR xs) .

IndR ◂ D ➔ ★
= λ x: D. ∀ P: D ➔ ★. PrfAlgR ·P ➔ PrfAlgR ·P ➔ P x .

R ◂ ★ = ι x: D. IndR x .

fromR ◂ Cast ·R ·D
= intrCast -(λ x. x.1) -(λ x. β) .

instPredR ◂ ∀ P: D ➔ ★. Cast ·R ·(PredR ·P ·(PrfAlgR ·P))
= Λ P. intrCast -(λ x. [ x.1 , x.2 ·P ]) -(λ x. β) .

LiftR ◂ (D ➔ ★) ➔ (DF ·R ➔ ★)
= λ P: D ➔ ★. λ x: DF ·R.
  PrfAlgR ·P ➔ ∀ v: View ·D β{| x |}. P (elimView β{| x |} -v) .

fromPrfAlgR
◂ ∀ P: D ➔ ★. Cast ·(PrfAlgR ·P) ·(PrfAlgCase ·R ·(LiftR ·P))
= Λ P.
  intrCast
    -(λ a1. λ xs. λ a. Λ v.
      a1 ·(PrfAlgR ·P) (elimCast -(monoFunctor (instPredR ·P)) xs) a)
    -(λ a1. β) .

rollR ◂ Cast ·(DFI ·R) ·R
= intrCast
    -(λ x.
        [x' ◂ D = rollD (elimCast -(monoDFI fromR) x)]
      - [ x'
        , Λ P. λ a1. λ a2.
          x.2 ·(LiftR ·P)
            (elimCast -(fromPrfAlgR ·P) a1)
            a2 -(selfView x') ])
    -(λ x. β) .

toR ◂ Cast ·D ·R
= recLB -rollR .

indR ◂ ∀ P: D ➔ ★. PrfAlgR ·P ➔ Π x: D. P x
= Λ P. λ a. λ x. (elimCast -toR x).2 a a .

_ ◂ ∀ P: D ➔ ★. ∀ a: PrfAlgR ·P. ∀ xs: F ·D. { indR a (inD xs) ≃ a xs a }
= Λ P. Λ a. Λ xs. β .

import parigot as P ·F fmap -fmapId -fmapCompose .

convPredR ◂ ∀ P: D ➔ ★. ∀ Y: ★. Y ➔ PredR ·P ·Y ➔ Sigma ·D ·P
= Λ P. Λ Y. λ y. λ x. mksigma x.1 (x.2 y y) .

fromPPrfAlg
◂ ∀ P: D ➔ ★. P.PrfAlg ·D inD ·P ➔ PrfAlgR ·P
= Λ P. λ a. Λ Y. λ xs. λ y.
  ρ ς (fmapId ·(PredR ·P ·Y) ·D (λ x. proj1 (convPredR y x)) (λ x. β) xs)
    @x.(P (inD x))
- ρ ς (fmapCompose (proj1 ·D ·P) (convPredR ·P y) xs)
    @x.(P (inD x))
- a (fmap (convPredR ·P y) xs) .

ind ◂ ∀ P: D ➔ ★. P.PrfAlg ·D inD ·P ➔ Π x: D. P x
= Λ P. λ a. indR (fromPPrfAlg a) .
