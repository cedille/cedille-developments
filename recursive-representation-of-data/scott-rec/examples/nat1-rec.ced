import cast.
import recType.

module scott-rec/examples/nat1-rec.

import scott/examples/nat1.

-- Scott Nat recursor
-- ==================================================

NatRZ ◂ ★ ➔ ★ = λ X: ★. ∀ Z: ★. ∀ S: ★. Z ➔ S ➔ Nat ➔ X.
NatRS ◂ ★ ➔ ★ = λ X: ★.
  ∀ Z: ★. ∀ S: ★. (Z ➔ S ➔ Z ➔ S ➔ Nat ➔ X) ➔ Z ➔ S ➔ Nat ➔ X.
NatR ◂ ★ = ∀ X: ★.
  NatRZ ·X ➔ NatRS ·X ➔ NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X.

zeroR ◂ NatR = Λ P. λ z1. λ s1. λ z2. λ s2. λ m. z1 z2 s2 m.
sucR ◂ NatR ➔ NatR = λ n. Λ X. λ z1. λ s1. λ z2. λ s2. λ m. s1 (n ·X) z2 s2 m.

toNatR' ◂ Π n: Nat. ι x: NatR. {x ≃ n} =
  wkInductionNat ·(λ y: Nat. ι x: NatR. {x ≃ y})
    [zeroR , β{zero}]
    (λ m. Λ r. [ sucR (φ r.2 - r.1 {m} ) , β{suc m} ]).

toNatR ◂ Cast ·Nat ·NatR
= intrCast -(λ n. (toNatR' n).1) -(λ n. (toNatR' n).2).

recNatBase ◂ ∀ X: ★. X ➔ NatRZ ·X
= Λ X. λ x. Λ Z. Λ S. λ z. λ s. λ n. x.

recNatStep ◂ ∀ X : ★. X ➔ (Nat ➔ X ➔ X) ➔ NatRS ·X
= Λ X. λ x. λ f. Λ Z. Λ S. λ n. λ z. λ s. λ m.
  f (pred m) (n z s z s (pred m)).

recNat ◂ ∀ X: ★. X ➔ (Nat ➔ X ➔ X) ➔ Nat ➔ X
= Λ X. λ x. λ f. λ n.
  (elimCast -toNatR n) (recNatBase x) (recNatStep x f) (recNatBase x) (recNatStep x f) n.

{- computation laws satisfied by beta-equivalences, though not by beta-reduction -}
recNatCompZ ◂ ∀ X: ★. ∀ x: X. ∀ f: Nat ➔ X ➔ X. {recNat x f zero ≃ x}
= Λ X. Λ x. Λ f. β.

recNatCompS ◂ ∀ X: ★. ∀ n: Nat. ∀ x: X. ∀ f: Nat ➔ X ➔ X.
  {recNat x f (suc n) ≃ f n (recNat x f n)}
= Λ X. Λ n. Λ x. Λ f. β.

-- example:

add ◂ Nat ➔ Nat ➔ Nat = λ m. λ n. recNat n (λ p. λ s. suc s) m.
sumFrom ◂ Nat ➔ Nat = λ m. recNat zero (λ p. λ s. suc (add p s)) m.

_ ◂ ∀ m: Nat. {add zero m ≃ m} = Λ m. β.
_ ◂ ∀ m: Nat. ∀ n: Nat. {add (suc m) n ≃ suc (add m n)} = Λ m. Λ n. β.

_ ◂ {sumFrom zero ≃ zero} = β.
_ ◂ ∀ m: Nat. {sumFrom (suc m) ≃ add (suc m) (sumFrom m)} = Λ m. β.

num1 = suc zero.
num2 = suc num1.

_ ◂ {add num2 num2 ≃ suc (suc num2)} = β.
_ ◂ {sumFrom num2 ≃ suc num2} = β.


minus ◂ Nat ➔ Nat ➔ Nat
= λ m. λ n. recNat m (λ _. λ m. pred m) n.

_ ◂ {minus (suc (add num2 num2)) (suc num2) ≃ num2} = β.
