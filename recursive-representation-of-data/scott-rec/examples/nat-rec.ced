import cast.
import recType.

module scott-rec/examples/nat1-rec.

import scott/concrete/nat.

{- alternative proof taken from "Programming with proofs: a second order type theory" [Par88] -}
import utils/top.

View : ★ ➔ Top ➔ ★ = λ A: ★. λ x: Top. ι y: A. { y ≃ x } .

intrView : ∀ A: ★. Π x: Top. ∀ y: A. { y ≃ x } ➾ View ·A x
= Λ A. λ x. Λ y. Λ eq. [ φ eq - y {|x|} , β{|x|} ] .

elimView : ∀ A: ★. Π x: Top. View ·A x ➾ A
= Λ A. λ x. Λ v. φ v.2 - v.1 {|x|} .

lem
: ∀ X: Nat ➔ ★. Π alpha: X zero. Π beta: (Π y: Nat. X y ➔ X (suc y)).
  Π tau: Top. { tau zero ≃ alpha } ➔ (Π n: Nat. { tau (suc n) ≃ beta n (tau n) }) ➔
  Π n: Nat. View ·(X n) β{|tau n|}
= Λ X. λ alpha. λ beta. λ tau. λ eq1. λ eq2.
  wkIndNat ·(λ y: Nat. View ·(X y) β{|tau y|})
    (intrView β{|tau zero|} -alpha -(ς eq1))
    (λ m. Λ ih.
     [pf : X m = elimView β{|tau m|} -ih]
     - intrView β{|tau (suc m)|} -(beta m pf) -(ς (eq2 m))) .

iota : ∀ X: Nat ➔ ★. X zero ➔ Top
= Λ X. λ a. β{| λ _. a |}.

rho  : ∀ X: Nat ➔ ★. X zero ➔ (Π y: Nat. X y ➔ X (suc y)) ➔ Top
= Λ X. λ a. λ b. β{| λ y. λ r. b y (y (iota a) r r) |}.

tau : ∀ X: Nat ➔ ★. X zero ➔ (Π y: Nat. X y ➔ X (suc y)) ➔ Top
= Λ X. λ a. λ b. β{| λ x. x (iota a) (rho a b) (rho a b) |}.

rec : ∀ X: Nat ➔ ★. X zero ➔ (Π m: Nat. X m ➔ X (suc m)) ➔ Π n: Nat. X n
= Λ X. λ a. λ b. λ n.
  [lm = lem a b (tau a b) β (λ n. β) n]
- elimView β{|tau a b n|} -lm .

-- Scott Nat recursor
-- ==================================================

NatRZ ◂ ★ ➔ ★ = λ X: ★. ∀ Z: ★. ∀ S: ★. Z ➔ S ➔ Nat ➔ X.
NatRS ◂ ★ ➔ ★ = λ X: ★.
  ∀ Z: ★. ∀ S: ★. (Z ➔ S ➔ Z ➔ S ➔ Nat ➔ X) ➔ Z ➔ S ➔ Nat ➔ X.
NatR ◂ ★ = ∀ X: ★.
  NatRZ ·X ➔ NatRS ·X ➔ NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X.

zeroR ◂ NatR = Λ P. λ z1. λ s1. λ z2. λ s2. λ m. z1 z2 s2 m.
sucR ◂ NatR ➔ NatR = λ n. Λ X. λ z1. λ s1. λ z2. λ s2. λ m. s1 (n ·X) z2 s2 m.

sucBad ◂ NatR ➔ NatR
= λ n. Λ X. λ z1. λ s1. λ z2. λ s2. λ m.
  s2 ·Top ·Top (λ _. λ _. λ _. λ _. n z1 s2 z2 s2) β β zero .

{- another alternative proof using the fact that Rec is a least fixpoint -}
toNatR''' ◂ Cast ·(NatFI ·NatR) ·NatR
= intrCast
    -(λ xs. Λ X. λ z1. λ s1. λ z2. λ s2. λ n.
      xs.1 ·(NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X)
        (z1 ·(NatRZ ·X) ·(NatRS ·X))
        (λ m. λ z. λ s. λ m'.
         s1 ·(NatRZ ·X) ·(NatRS ·X) (m ·X) z s m') z2 s2 n)
    -(λ x. β).

toNatR'' ◂ Cast ·Nat ·NatR
= recLB ·NatFI -toNatR''' .

{- proof in the paper -}
toNatR' ◂ Π n: Nat. ι x: NatR. {x ≃ n} =
  wkIndNat ·(λ y: Nat. ι x: NatR. {x ≃ y})
    [zeroR , β{| zero |}]
    (λ m. Λ r. [ sucR (φ r.2 - r.1 {| m |} ) , β{| suc m |} ]).

toNatR ◂ Cast ·Nat ·NatR
= intrCast -(λ n. (toNatR' n).1) -(λ n. (toNatR' n).2).

recNatBase ◂ ∀ X: ★. X ➔ NatRZ ·X
= Λ X. λ x. Λ Z. Λ S. λ z. λ s. λ n. x.

recNatStep ◂ ∀ X : ★. X ➔ (Nat ➔ X ➔ X) ➔ NatRS ·X
= Λ X. λ x. λ f. Λ Z. Λ S. λ n. λ z. λ s. λ m.
  f (pred m) (n z s z s (pred m)).

recNat ◂ ∀ X: ★. X ➔ (Nat ➔ X ➔ X) ➔ Nat ➔ X
= Λ X. λ x. λ f. λ n.
  (elimCast -toNatR n) (recNatBase x) (recNatStep x f) (recNatBase x) (recNatStep x f) n.

{- computation laws satisfied by beta-equivalences, though not by beta-reduction -}
recNatCompZ ◂ ∀ X: ★. ∀ x: X. ∀ f: Nat ➔ X ➔ X. {recNat x f zero ≃ x}
= Λ X. Λ x. Λ f. β.

recNatCompS ◂ ∀ X: ★. ∀ n: Nat. ∀ x: X. ∀ f: Nat ➔ X ➔ X.
  {recNat x f (suc n) ≃ f n (recNat x f n)}
= Λ X. Λ n. Λ x. Λ f. β.

-- example:

add ◂ Nat ➔ Nat ➔ Nat = λ m. λ n. recNat n (λ p. λ s. suc s) m.
sumFrom ◂ Nat ➔ Nat = λ m. recNat zero (λ p. λ s. suc (add p s)) m.

_ ◂ ∀ m: Nat. {add zero m ≃ m} = Λ m. β.
_ ◂ ∀ m: Nat. ∀ n: Nat. {add (suc m) n ≃ suc (add m n)} = Λ m. Λ n. β.

_ ◂ {sumFrom zero ≃ zero} = β.
_ ◂ ∀ m: Nat. {sumFrom (suc m) ≃ add (suc m) (sumFrom m)} = Λ m. β.

num1 = suc zero.
num2 = suc num1.

_ ◂ {add num2 num2 ≃ suc (suc num2)} = β.
_ ◂ {sumFrom num2 ≃ suc num2} = β.


minus ◂ Nat ➔ Nat ➔ Nat
= λ m. λ n. recNat m (λ _. λ m. pred m) n.

_ ◂ {minus (suc (add num2 num2)) (suc num2) ≃ num2} = β.
