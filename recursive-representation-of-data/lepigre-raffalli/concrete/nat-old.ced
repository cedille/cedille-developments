import cast.
import recType.

import scott/concrete/nat .

module scott-rec/concrete/nat .

NatRG ◂ ★ ➔ ★ ➔ ★ ➔ ★
= λ X: ★. λ Z: ★. λ S: ★.
  Z ➔ S ➔ Z ➔ S ➔ Nat ➔ X .

NatRZ ◂ ★ ➔ ★
= λ X: ★. ∀ Z: ★. ∀ S: ★. Z ➔ S ➔ Nat ➔ X.

NatRS ◂ ★ ➔ ★
= λ X: ★.
  ∀ Z: ★. ∀ S: ★. NatRG ·X ·Z ·S ➔ Z ➔ S ➔ Nat ➔ X.

NatR ◂ ★ = ∀ X: ★. NatRG ·X ·(NatRZ ·X) ·(NatRS ·X).

recNatR ◂ ∀ X: ★. NatRZ ·X ➔ NatRS ·X ➔ NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ NatR ➔ X
= Λ X. λ z1. λ s1. λ z2. λ s2. λ n. λ r. r z1 s1 z2 s2 n .

-- to illustrate
zeroR ◂ NatR
= Λ X. λ z1. λ s1. λ z2. λ s2. λ m. z1 z2 s2 m .

sucR ◂ NatR ➔ NatR
= λ n. Λ X. λ z1. λ s1. λ z2. λ s2. λ m.
  s1 (n ·X) z2 s2 m .

instNatRZ
◂ ∀ X: ★. Cast ·(NatRZ ·X) ·(NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X)
= Λ X. intrCast -(λ x. x ·(NatRZ ·X) ·(NatRS ·X)) -(λ x. β) .

instNatRS
◂ ∀ X: ★. Cast ·(NatRS ·X) ·(NatR ➔ NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X)
= Λ X.
  intrCast
    -(λ x. λ n. λ z. λ s. λ m.
      x ·(NatRZ ·X) ·(NatRS ·X) (n ·X) z s m)
    -(λ x. β) .

rollNatR ◂ Cast ·(NatFI ·NatR) ·NatR
= intrCast
    -(λ xs. Λ X. λ z1. λ s1. λ z2. λ s2. λ m.
      xs.1 ·(NatRZ ·X ➔ NatRS ·X ➔ Nat ➔ X)
        (elimCast -(instNatRZ ·X) z1)
        (elimCast -(instNatRS ·X) s1)
        z2 s2 m)
    -(λ xs. β) .

toNatR ◂ Cast ·Nat ·NatR
= recLB -rollNatR .

-- recursion
recNatBase ◂ ∀ X: ★. X ➔ NatRZ ·X
= Λ X. λ x. Λ Z. Λ S. λ z. λ s. λ m. x.

recNatStep ◂ ∀ X: ★. X ➔ (Nat ➔ X ➔ X) ➔ NatRS ·X
= Λ X. λ x. λ f. Λ Z. Λ S. λ n. λ z. λ s. λ m.
  f (pred m) (n z s z s (pred m)) .

recNat ◂ ∀ X: ★. X ➔ (Nat ➔ X ➔ X) ➔ Nat ➔ X
= Λ X. λ x. λ f. λ n.
  (elimCast -toNatR n)
    (recNatBase x) (recNatStep x f)
    (recNatBase x) (recNatStep x f)
    n .

-- computation
recNatBeta1 ◂ ∀ X: ★. ∀ x: X. ∀ f: Nat ➔ X ➔ X. { recNat x f zero ≃ x }
= Λ X. Λ x. Λ f. β .

recNatBeta2
◂ ∀ X: ★. ∀ x: X. ∀ f: Nat ➔ X ➔ X. ∀ n: Nat.
  { recNat x f (suc n) ≃ f n (recNat x f n) }
= Λ X. Λ x. Λ f. Λ n. β .

-- examples
add ◂ Nat ➔ Nat ➔ Nat
= λ m. λ n. recNat n (λ p. suc) m .

_ ◂ ∀ n: Nat. { add zero n ≃ n }
= Λ n. β .

_ ◂ ∀ m: Nat. ∀ n: Nat. { add (suc m) n ≃ suc (add m n) }
= Λ m. Λ n. β .

sumFrom ◂ Nat ➔ Nat
= recNat zero λ p. λ s. add (suc p) s .
_ ◂ { sumFrom zero ≃ zero } = β .
_ ◂ ∀ n: Nat. { sumFrom (suc n) ≃ add (suc n) (sumFrom n) }
= Λ n. β .

minus ◂ Nat ➔ Nat ➔ Nat
= λ m. λ n. recNat m (λ _. pred) n .

_ ◂ ∀ m: Nat. { minus m zero ≃ m } = Λ m. β .
_ ◂ ∀ m: Nat. ∀ n: Nat. { minus m (suc n) ≃ pred (minus m n)}
= Λ m. Λ n. β .

{-
-- alternative proof taken from "Programming with proofs: a second order type theory" [Par88]
import utils/top.

View : ★ ➔ Top ➔ ★ = λ A: ★. λ x: Top. ι y: A. { y ≃ x } .

intrView : ∀ A: ★. Π x: Top. ∀ y: A. { y ≃ x } ➾ View ·A x
= Λ A. λ x. Λ y. Λ eq. [ φ eq - y {|x|} , β{|x|} ] .

elimView : ∀ A: ★. Π x: Top. View ·A x ➾ A
= Λ A. λ x. Λ v. φ v.2 - v.1 {|x|} .

lem
: ∀ X: Nat ➔ ★. Π alpha: X zero. Π beta: (Π y: Nat. X y ➔ X (suc y)).
  Π tau: Top. { tau zero ≃ alpha } ➔ (Π n: Nat. { tau (suc n) ≃ beta n (tau n) }) ➔
  Π n: Nat. View ·(X n) β{|tau n|}
= Λ X. λ alpha. λ beta. λ tau. λ eq1. λ eq2.
  wkIndNat ·(λ y: Nat. View ·(X y) β{|tau y|})
    (intrView β{|tau zero|} -alpha -(ς eq1))
    (λ m. Λ ih.
     [pf : X m = elimView β{|tau m|} -ih]
     - intrView β{|tau (suc m)|} -(beta m pf) -(ς (eq2 m))) .

iota : ∀ X: Nat ➔ ★. X zero ➔ Top
= Λ X. λ a. β{| λ _. a |}.

rho  : ∀ X: Nat ➔ ★. X zero ➔ (Π y: Nat. X y ➔ X (suc y)) ➔ Top
= Λ X. λ a. λ b. β{| λ y. λ r. b y (y (iota a) r r) |}.

tau : ∀ X: Nat ➔ ★. X zero ➔ (Π y: Nat. X y ➔ X (suc y)) ➔ Top
= Λ X. λ a. λ b. β{| λ x. x (iota a) (rho a b) (rho a b) |}.

rec : ∀ X: Nat ➔ ★. X zero ➔ (Π m: Nat. X m ➔ X (suc m)) ➔ Π n: Nat. X n
= Λ X. λ a. λ b. λ n.
  [lm = lem a b (tau a b) β (λ n. β) n]
- elimView β{|tau a b n|} -lm .
