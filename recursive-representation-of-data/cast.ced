module cast.

import view .

Cast ◂ ★ ➔ ★ ➔ ★ = λ S: ★. λ T: ★. View ·(S ➔ T) β{| λ x. x |} .

intrCast ◂ ∀ S: ★. ∀ T: ★. ∀ t: S ➔ T. (Π x: S. { t x ≃ x }) ➾ Cast ·S ·T
= Λ S. Λ T. Λ t. Λ t'.
  extView ·S ·T β{| λ x. x |} -(λ x. intrView β{| x |} -(t x) -(t' x)) .

elimCast ◂ ∀ S: ★. ∀ T: ★. Cast ·S ·T ➾ S ➔ T
= Λ S. Λ T. Λ c. elimView β{| λ x. x |} -c .

eqCast ◂ ∀ S: ★. ∀ T: ★. ∀ c: Cast ·S ·T. { λ x. x ≃ c }
= Λ S. Λ T. Λ c. eqView -β{| λ x. x |} -c .

castRefl ◂ ∀ S: ★. Cast ·S ·S
= Λ S. intrCast -(λ x. x) -(λ _. β) .

castTrans ◂ ∀ S: ★. ∀ T: ★. ∀ U: ★. Cast ·S ·T ➾ Cast ·T ·U ➾ Cast ·S ·U
= Λ S. Λ T. Λ U. Λ c1. Λ c2.
intrCast -(λ x. elimCast -c2 (elimCast -c1 x)) -(λ _. β) .

castUnique ◂ ∀ S: ★. ∀ T: ★. ∀ c1: Cast ·S ·T. ∀ c2: Cast ·S ·T. { c1 ≃ c2 }
= Λ S. Λ T. Λ c1. Λ c2. ρ ς (eqCast -c1) @x.{ x ≃ c2 } - eqCast -c2 .
