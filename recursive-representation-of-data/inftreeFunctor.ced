module inftreeFunctor.

import functor.
import cast.
import utils.

import parigot/concrete/nat.

InftreeF ◂ ★ ➔ ★ = λ X : ★ . Sum · Unit · (Nat ➔ X) .

inftreeFmap ◂ Fmap ·InftreeF =
  Λ X . Λ Y . λ f . λ d .
    recSum d (λ u . in1 u) (λ x . in2 (λ n . f (x n))).

inftreeFmapId ◂ FmapId ·InftreeF inftreeFmap =
  Λ X . Λ Y . λ c . λ ci . λ x .
    θ<x> (indSum x) (λ a . β)
      (λ b . ε ●).

inftreeFmapIdAbsurd ◂ FmapId ·InftreeF inftreeFmap ➔ ∀ X: ★. X
= λ fid.
  [t1 ◂ InftreeF ·Nat = in2 (λ x. x)]
- [t2 ◂ InftreeF ·Nat = inftreeFmap ·Nat ·Nat (λ n. (unrollNat n).1 zero (λ _. suc)) t1]
- [pf ◂ { t2 ≃ t1 }
   = fid ·Nat ·Nat (λ n. (unrollNat n).1 zero (λ _. suc)) (λ n. (unrollNat n).2) t1]
- δ - pf .

InftreeFmapMono ◂ ∀ X : ★ . ∀ Y : ★ . Cast · X · Y ➾ Cast · (InftreeF · X) · (InftreeF · Y) =
  Λ X . Λ Y . Λ c .
  intrCast
    -(λ x . recSum x (λ a . in1 a) (λ b . in2 (λ n . elimCast -c (b n))))
    -(λ x . θ<x> (indSum x) (λ a . β) (λ b . β)) .


InftreeFmapCompose ◂ FmapCompose · InftreeF inftreeFmap =
  Λ X . Λ Y . Λ Z . λ f . λ g . λ x .
    θ<x> (indSum x) (λ _ . β) (λ b . β).
