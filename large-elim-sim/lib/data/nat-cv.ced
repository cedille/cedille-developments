module nat-cov.

import nat.
import nat-thms.
import bool.

cvFromLte : ∀ N: ★. ∀ is: Is/Nat ·N. ∀ n: N. Π m: Nat.
  [n' = to/Nat -is n] - Lte m n' ➾ N
= Λ N. Λ is. Λ n. λ m. Λ pf.
  [n' = to/Nat -is n]
- [x = lteEAdd m n' pf]
- [eq : {minus n x ≃ m}
     = ρ (ς x.2)                @ z. {minus z x ≃ m}
     - ρ (minusAddCancel x.1 m) @ z. {z ≃ m}
     - β]
- φ eq - (minusCV -is n x.1) {|m|}.

_ : {cvFromLte ≃ λ x. x} = β.

zeroCV : ∀ N: ★. Is/Nat ·N ➾ N ➾ N
= Λ N. Λ is. Λ n.
  [n' = to/Nat -is n]
- cvFromLte -is -n zero -β.

_ : {zeroCV ≃ zero} = β.

halfGenCV : ∀ N: ★. Is/Nat ·N ➾ Bool ➔ N ➔ N
= Λ N. Λ is. λ b. λ n.
  [n' = to/Nat -is n]
- cvFromLte -is -n (halfGen b n') -(lteHalf b n').

_ : {halfGenCV ≃ halfGen} = β.

divCV : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
= Λ N. Λ is. λ m. λ n.
  [m' = to/Nat -is m]
- cvFromLte -is -m (div m' n) -(lteDiv m' n).

_ : {divCV ≃ div} = β.

remCV1 : ∀ N: ★. Is/Nat ·N ➾ N ➔ Nat ➔ N
= Λ N. Λ is. λ m. λ n.
  [m' = to/Nat -is m]
- cvFromLte -is -m (rem m' n) -(lteRem1 m' n).

_ : {remCV1 ≃ rem} = β.

remCV2 : ∀ N: ★. Is/Nat ·N ➾ Nat ➔ ∀ n: N. (ι x: Nat. {x ≃ succ n}) ➔ N
= Λ N. Λ is. λ m. Λ n. λ x.
  [n' = to/Nat -is n]
- cvFromLte -is -n (rem m x.1) -(ρ x.2 - lteRem2 m n').

_ : {remCV2 ≃ rem} = β.

gcd : Nat ➔ Nat ➔ Nat
= λ m. μ gcd. m {
  | zero ➔ λ n. n
  | succ m ➔
    [m' = to/Nat -isType/gcd m]
  - [sm : ι x: Nat. {x ≃ succ m} = [ succ m' , β{|succ m'|} ]]
  - λ n. gcd (remCV2 -isType/gcd n -m sm) (succ m')
  }.
