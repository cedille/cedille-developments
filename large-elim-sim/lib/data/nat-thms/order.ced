module data.nat-le.

import ../nat.
import ../sum.
import ../decidable.
import simple.
import ../../core/bot.
import ../../core/top.

import ../bool.

-- Ordering relation on Nat
-- =============================================================================
Lte : Nat ➔ Nat ➔ ★ = λ m: Nat. λ n: Nat. {lte m n ≃ tt}.
Lt  : Nat ➔ Nat ➔ ★ = λ m: Nat. λ n: Nat. {lt  m n ≃ tt}.
Gte : Nat ➔ Nat ➔ ★ = λ m: Nat. λ n: Nat. {gte m n ≃ tt}.
Gt  : Nat ➔ Nat ➔ ★ = λ m: Nat. λ n: Nat. {gt  m n ≃ tt}.

-- Basic theorems
-- ==================================================

-- Π m, 1+ m ≰ 0
lteSZ : Π m: Nat. Not ·(Lte (succ m) zero)
= λ m. λ lte. δ - lte.

-- Π m, m ≮ 0
ltNZ : Π m: Nat. Not ·(Lt m zero) = lteSZ.

-- Π m, 0 ≤ m
lteZN : Π m: Nat. Lte zero m
= λ m. β.

-- Π m n, 1+ m ≤ 1+ n → m ≤ n
lteSInv : Π m: Nat. Π n: Nat. Lte (succ m) (succ n) ➔ Lte m n
= λ m. λ n. λ eq. eq.

-- Π m n, m ≤ n → m ≤ 1+ n
lteSRight : Π m: Nat. Π n: Nat. Lte m n ➔ Lte m (succ n)
= λ m. μ ih. m {
  | zero ➔ λ _. λ _. β
  | succ m ➔
    [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ x: Nat. Lte (succ m') x ➔ Lte (succ m') (succ x) {
    | zero ➔ λ eq. δ - eq
    | succ n ➔ λ eq. ih m n eq
    }
  }.

-- Π m n, m ≤ n → m -1 ≤ n
ltePLeft : Π m: Nat. Π n: Nat. Lte m n ➔ Lte (pred m) n
= λ m. σ m {
  | zero ➔ λ _. λ _. β
  | succ m ➔ λ n. σ n {
    | zero ➔ λ lte. δ - lte
    | succ n ➔ λ lte. lteSRight m n lte
    }
  }.

lt2lte : Π m: Nat. Π n: Nat. Lt m n ➔ Lte m n
= λ m. ltePLeft (succ m).

-- Π m n, m ≰ n → m > n
notLteThenGt : Π m: Nat. Π n: Nat. Not ·(Lte m n) ➔ Gt m n
= λ m. μ ih. m {
  | zero ➔ λ n. λ neg. neg β ·(Gt zero n)
  | succ m ➔
    [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ x: Nat. Not ·(Lte (succ m') x) ➔ Gt (succ m') x {
    | zero ➔ λ neg. β
    | succ n ➔ λ neg. ih m n neg
    }
  }.

-- Lemmas
-- ==================================================

-- Π m n, 1+ m ≤ n → ∃ x, 1+ x = n
lteSLeftESRight : Π m: Nat. Π n: Nat. Lte (succ m) n ➔ ι x: Nat. {succ x ≃ n}
= λ m. μ ih. m {
  | zero ➔ λ n. σ n {
    | zero ➔ λ eq. δ - eq
    | succ n ➔ λ _. [ n , β{|n|} ]
    }
  | succ m ➔ [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ y: Nat. Lte (add num2 m') y ➔ ι x: Nat. {succ x ≃ y} {
    | zero ➔ λ lte. δ - lte
    | succ n ➔ λ lte.
      [x = ih m n lte]
    - [ succ x.1 , ρ x.2 @ x' . {succ x' ≃ succ n} - β{|succ x|}]
    }
  }.

-- Π m n, m ≤ n → ∃ x, x + m = n
lteEAdd : Π m: Nat. Π n: Nat. Lte m n ➔ ι x: Nat. {add x m ≃ n}
= λ m. μ ih. m {
  | zero ➔ λ n. λ _. [ n , ρ (addZRight n) - β{|n|} ]
  | succ m ➔
    [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ y: Nat. Lte (succ m') y ➔ ι x: Nat. {add x (succ m') ≃ y} {
    | zero ➔ λ lte. δ - lte
    | succ n ➔ λ lteMN.
      [x = ih m n lteMN]
    - [x.1 , ρ (addSRight x.1 m') @ x. {x ≃ succ n}
           - ρ x.2                @ x. {succ x ≃ succ n}
           - β{|x|}]
    }
  }.

-- <Nat,Lte> forms a partially ordered set
-- ==================================================

lteRefl : Π n: Nat. Lte n n
= λ m. μ ih. m {
  | zero ➔ β
  | succ m ➔ ih m
  }.

lteTrans : Π l: Nat. Π m: Nat. Π n: Nat. Lte l m ➔ Lte m n ➔ Lte l n
= λ l. μ ihl. l {
  | zero ➔ λ _. λ _. λ _. λ _. β
  | succ l ➔
    [l' = to/Nat -isType/ihl l]
  - λ m. σ m @(λ x: Nat. Π n: Nat. Lte (succ l') x ➔ Lte x n ➔ Lte (succ l') n) {
    | zero ➔ λ _. λ eq. δ - eq
    | succ m ➔ λ n. λ lteLM. σ n {
      | zero ➔ λ lteMZ. δ - lteMZ
      | succ n ➔ λ lteMN. ihl l m n lteLM lteMN
      }
    }
  }.

lteAntiSym : Π m: Nat. Π n: Nat. Lte m n ➔ Lte n m ➔ {m ≃ n}
= λ m. μ ih. m {
  | zero ➔ λ n. σ n {
    | zero ➔ λ _. λ _. β
    | succ n ➔ λ _. λ lteSZ. δ - lteSZ
    }
  | succ m ➔
    [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ x: Nat. Lte (succ m') x ➔ Lte x (succ m') ➔ {succ m ≃ x} {
    | zero ➔ λ lteSZ. δ - lteSZ
    | succ n ➔ λ lteMN. λ lteNM.
      [eqMN = ih m n lteMN lteNM]
    - ρ eqMN - β
    }
  }.

-- <N,Lte> is a *total* order
-- ==================================================

lteDecidable : Π m: Nat. Π n: Nat. Decision ·(Lte m n)
= λ m. μ ih. m {
  | zero ➔ λ n. decYes β
  | succ m ➔
    [m' = to/Nat -isType/ih m]
  - λ n. σ n @λ x: Nat. Decision ·(Lte (succ m') x) {
    | zero ➔ decNo (λ eq. δ - eq)
    | succ n ➔ ih m n
    }
  }.

lteOrGt : Π m: Nat. Π n: Nat. Sum ·(Lte m n) ·(Gt m n)
= λ m. λ n. σ (lteDecidable m n) {
  | decYes pf ➔ in1 pf
  | decNo npf ➔ in2 (notLteThenGt m n npf)
  }.

-- Theorems for minus, divide, rem
-- ==================================================

lteMinus : Π m: Nat. Π n: Nat. Lte (minus m n) m
= λ m. λ n. μ ih. n @λ x: Nat. Π m: Nat. Lte (minus m x) m {
  | zero ➔ λ m. lteRefl m
  | succ n ➔ λ m.
    [n' = to/Nat -isType/ih n]
  - σ m @λ x: Nat. Lte (pred (minus x n')) x {
    | zero ➔ ρ (minusZLeft n') @ x . Lte (pred x) zero - β
    | succ m ➔
      ρ ς (minusPLeft (succ m) n') @ x. Lte x (succ m)
    - lteSRight (minus m n') m (ih n m)
    }
  } m.

lteHalf : Π b: Bool. Π m: Nat. Lte (halfGen b m) m
= λ b. λ m. μ ih. m {
  | zero ➔ β
  | succ m ➔ σ m {
    | zero ➔ σ b {tt ➔ β | ff ➔ β}
    | succ m ➔
      [m' = to/Nat -isType/ih m]
    - lteSRight (halfGen b m') m' (ih m)
    }
  }.

lteDiv : Π m: Nat. Π n: Nat. Lte (div m n) m
= λ m. μ ih. m {
  | zero ➔ λ n. β
  | succ m ➔ λ n.
    [m' = to/Nat -isType/ih m]
  - χ {lte (ite (lt (succ m) n)
              zero (succ (div (minus m (pred n)) n))) (succ m)
       ≃ tt}
  - σ (lt (succ m') n) {
     | tt ➔ β
     | ff ➔
       [dif = minusCV -isType/ih m (pred n)]
     - [dif' = to/Nat -isType/ih dif]
     - [ih' = ih dif n]
     - lteTrans (div dif' n) dif' m' ih' (lteMinus m' (pred n))
    }
  }.

lteRem1 : Π m: Nat. Π n: Nat. Lte (rem m n) m
= λ m. μ ih. m {
  | zero ➔ λ _. β
  | succ m ➔ λ n.
    [m' = to/Nat -isType/ih m]
  - [lhs : Top ➔ Top
      = λ x. β{|ite x (succ m) (rem (minus m (pred n)) n)|}]
  - σ (lt (succ m') n) @λ x: Bool. {lte (lhs x) (succ m) ≃ tt} {
    | tt ➔ lteRefl m'
    | ff ➔
      [dif = minusCV -isType/ih m (pred n)]
    - [dif' = to/Nat -isType/ih dif]
    - [ih' = ih dif n]
    - lteTrans (rem dif' n) dif' (succ m') ih'
        (lteSRight dif' m' (lteMinus m' (pred n)))
    }
  }.

lteRem2 : Π m: Nat. Π n: Nat. Lte (rem m (succ n)) n
= λ m. μ ih. m {
  | zero ➔ λ n. β
  | succ m ➔ λ n.
    [m' = to/Nat -isType/ih m]
  - [lhs : Top ➔ Top = λ x. β{|ite x (succ m) (rem (minus m n) (succ n))|}]
  - σ (lt (succ m') (succ n)) @λ x: Bool. {lt (succ m) (succ n) ≃ x} ➔ {lte (lhs x) n ≃ tt} {
    | tt ➔ λ eq. eq
    | ff ➔ λ eq. ih (minusCV -isType/ih m n) n
    } β
  }.
