import lib .

module large-elim/concrete/zipwith/tyfold .

import tyvec .
import tyfoldr .

TyFold : Π n: Nat. 𝒌TyVec (succ n) ➔ ★
= λ n: Nat. λ L: 𝒌TyVec (succ n). ∀ X: ★. TyFoldR n ·L ·X ➾ X .

tyFoldRespTyVecEq
: ∀ n: Nat. ∀ L1: 𝒌TyVec (succ n). ∀ L2: 𝒌TyVec (succ n).
  TyVecEq' (succ n) ·L1 ·L2 ➾ TpEq ·(TyFold n ·L1) ·(TyFold n ·L2)
= Λ n. Λ L1. Λ L2. Λ eqL12.
  intrTpEq
    -(intrCast
        -(λ x. Λ X. Λ fr.
          x -((tyFoldRSubst -n ·L2 ·X -n -(tyVecEqSym -(succ n) -(succ n) -eqL12)).1 fr))
        -(λ x. β))
    -(intrCast
        -(λ x. Λ X. Λ fr.
          x -((tyFoldRSubst -n ·L1 ·X -n -eqL12).1 fr))
        -(λ x. β))
.

zTyFoldREq : ∀ L: 𝒌TyVec num1. TpEq ·(HeadTyVec zero ·L) ·(TyFold zero ·L)
= Λ L.
  intrTpEq
    -(intrCast
        -(λ x. Λ X. Λ fr. elimCast -(tyFoldFn -zero fr (zTyFoldR' ·L)).2 x)
        -(λ x. β))
    -(intrCast
        -(λ x. x -(zTyFoldR' ·L))
        -(λ x. β))
.

zTyFold : ∀ L: 𝒌TyVec num1. TyFoldR zero ·L ·(TyFold zero ·L)
= Λ L. tyFoldWd -zero (zTyFoldR' ·L) -(zTyFoldREq ·L) .

sTyFoldREq
: ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n).
  TyFoldR n ·(TailTyVec (succ n) ·L) ·(TyFold n ·(TailTyVec (succ n) ·L)) ➔
  TpEq ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L)) ·(TyFold (succ n) ·L)
= Λ n. Λ L. λ fr.
  [fr'
   = sTyFoldR -n ·L ·(TailTyVec (succ n) ·L) -(tyVecEqRefl -(succ n) ·(TailTyVec (succ n) ·L))
       ·(TyFold n ·(TailTyVec (succ n) ·L)) fr
       ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L))
       -(tpEqRefl ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L)))]
- intrTpEq
    -(intrCast
        -(λ x. Λ X. Λ fr''.
          elimCast ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L)) ·X
            -(tyFoldFn -(succ n) ·L fr' fr'').1 x)
        -(λ x. β))
    -(intrCast
        -(λ x. x -(sTyFoldR' -n fr))
        -(λ x. β)).

sTyFold
: ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n). TyFoldR n ·(TailTyVec (succ n) ·L) ·(TyFold n ·(TailTyVec (succ n) ·L)) ➔
  TyFoldR (succ n) ·L ·(TyFold (succ n) ·L)
= Λ n. Λ L. λ fr.
  tyFoldWd -(succ n) ·L
    ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L))
    (sTyFoldR' -n fr) ·(TyFold (succ n) ·L) -(sTyFoldREq -n ·L fr) .

tyFoldMk : Π n: Nat. ∀ L: 𝒌TyVec (succ n). TyFoldR n ·L ·(TyFold n ·L)
= λ n.
  μ mk. n {
  | zero ➔ zTyFold
  | succ n' ➔ Λ L.
    [n'' = to/Nat -isType/mk n']
  - sTyFold -n'' ·L (mk n' ·(TailTyVec (succ n'') ·L))
  } .

tyFoldBetaZ
: ∀ L: 𝒌TyVec num1. TpEq ·(TyFold zero ·L) ·(HeadTyVec zero ·L)
= Λ L. tpEqSym -(zTyFoldREq ·L) .

tyFoldBetaS
: ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n).
  TpEq ·(TyFold (succ n) ·L) ·(HeadTyVec (succ n) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L))
= Λ n. Λ L. tpEqSym -(sTyFoldREq -n (tyFoldMk n ·(TailTyVec (succ n) ·L))) .

tyFoldBetaZ'
: ∀ X: ★. TpEq ·(TyFold zero ·(TyCons zero ·X ·TyNil)) ·X
= Λ X.
  tpEqTrans ·(TyFold zero ·(TyCons zero ·X ·TyNil)) ·(HeadTyVec zero ·(TyCons zero ·X ·TyNil)) ·X
    -(tyFoldBetaZ ·(TyCons zero ·X ·TyNil))
    -(tyConsHead ·X -zero ·TyNil)
.

tyFoldBetaS'
: ∀ X: ★. ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TpEq ·(TyFold (succ n) ·(TyCons (succ n) ·X ·L)) ·(X ➔ TyFold n ·L)
= Λ X. Λ n. Λ L.
  tpEqTrans
    ·(TyFold (succ n) ·(TyCons (succ n) ·X ·L))
    ·(HeadTyVec (succ n) ·(TyCons (succ n) ·X ·L) ➔ TyFold n ·(TailTyVec (succ n) ·(TyCons (succ n) ·X ·L)))
    ·(X ➔ TyFold n ·L)
    -(tyFoldBetaS -n ·(TyCons (succ n) ·X ·L))
    -(arrowRespTpEq2 -(tyConsHead ·X -(succ n) ·L)
        -(tyFoldRespTyVecEq -n ·(TailTyVec (succ n) ·(TyCons (succ n) ·X ·L)) ·L
            -(tyConsTail ·X -(succ n) ·L)))
.
