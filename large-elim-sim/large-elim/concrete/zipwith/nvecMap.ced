import lib .

module large-elim/concrete/zipwith/nvecMap .

import tyvec .
import fold .

ArrTp : Π n: Nat. 𝒌TyVec (succ n) ➔ ★
= λ n: Nat. λ L: 𝒌TyVec (succ n).
  TVFold ·(λ X: ★. λ Y: ★. X ➔ Y) arrowRespTpEq2 n ·L .

TVMapVec : Π m: Nat. Π n: Nat. 𝒌TyVec n ➔ 𝒌TyVec n
= λ m: Nat. λ n: Nat. λ L: 𝒌TyVec n.
  TVMap ·(λ A: ★. Vec ·A m) n ·L .

ArrTpVec : Π n: Nat. Nat ➔ 𝒌TyVec (succ n) ➔ ★
= λ n: Nat. λ m: Nat. λ L: 𝒌TyVec (succ n).
  ArrTp n ·(TVMapVec m (succ n) ·L) .

arrTpVecZC
: ∀ m: Nat. ∀ L: 𝒌TyVec num1.
  TpEq ·(ArrTpVec zero m ·L) ·(Vec ·(TVHead zero ·L) m)
= Λ m. Λ L. tvFoldZC -arrowRespTpEq2 ·(TVMapVec m num1 ·L) .

arrTpVecZC'
: ∀ m: Nat. ∀ X: ★. TpEq ·(ArrTpVec zero m ·(TVCons zero ·X ·TVNil)) ·(Vec ·X m)
= Λ m. Λ X.
  [L : 𝒌TyVec num1 = TVCons zero ·X ·TVNil]
- trans
    -(arrTpVecZC -m ·L)
    -(vecRespTpEq -m -(tvHeadConsC -zero ·X ·TVNil))
.

arrTpVecSC
: ∀ m: Nat. ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n).
  TpEq ·(ArrTpVec (succ n) m ·L) ·(Vec ·(TVHead (succ n) ·L) m ➔ ArrTpVec n m ·(TVTail (succ n) ·L))
= Λ m. Λ n. Λ L. tvFoldSC -arrowRespTpEq2 -n ·(TVMapVec m (add num2 n) ·L) .

arrTpVecSC'
: ∀ m: Nat. ∀ X: ★. ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TpEq ·(ArrTpVec (succ n) m ·(TVCons (succ n) ·X ·L)) ·(Vec ·X m ➔ ArrTpVec n m ·L)
= Λ m. Λ X. Λ n. Λ L.
  [CL : 𝒌TyVec (add num2 n) = TVCons (succ n) ·X ·L]
- trans
   -(arrTpVecSC -m -n ·CL)
   -(arrowRespTpEq2
      -(vecRespTpEq -m -(tvHeadConsC -(succ n) ·X ·L))
      -(tvFoldSubst -arrowRespTpEq2 -n
         -(tvMapRespEq -(vecRespTpEq -m) -(succ n)
            -(tvTailConsC -(succ n) ·X ·L))))
.

nvecMap
: Π m: Nat. Π n: Nat. ∀ L: 𝒌TyVec (succ n).
  ArrTp n ·L ➔ ArrTpVec n m ·L
= λ m. λ n. Λ L. λ f.
  μ go. n
  @(λ x: Nat. ∀ L: 𝒌TyVec (succ x). Vec ·(ArrTp x ·L) m ➔ ArrTpVec x m ·L) {
  | zero ➔ Λ L. λ fs.
    tpEq2 -(arrTpVecZC -m ·L)
      (tpEq1 -(vecRespTpEq -m -(tvFoldZC -arrowRespTpEq2 ·L)) fs)
  | succ n' ➔ Λ L. λ fs.
    [n'' = to/Nat -isType/go n']
  - [fs' = tpEq1 -(vecRespTpEq -m -(tvFoldSC -arrowRespTpEq2 -n'' ·L)) fs ]
  - tpEq2 -(arrTpVecSC -m -n'' ·L)
      (λ a. go n' (vapp -m fs' a))
  } ·L (vrepeat m f).


example : Vec ·Nat num2
= [v : Vec ·Nat num2
   = vcons -num1 num1 (vcons -zero num1 (vnil ·Nat))]
- [Tl : 𝒌TyVec num1 = TVCons zero ·Nat ·TVNil]
- [L : 𝒌TyVec num2 = TVCons num1 ·Nat ·Tl]
-- sequence of type equalities
-- - for `f = add num10`
- [foldL : TpEq ·(ArrTp num1 ·L) ·(Nat ➔ Nat)
   = trans
       -(tvFoldSC' -arrowRespTpEq2 -zero ·Nat ·Tl)
       -(arrowTpEqCod -(tvFoldZC' -arrowRespTpEq2 ·Nat))]
- [f : ArrTp num1 ·L = foldL.2.1 (add num10)]
-- - for nvecMap ·L f
- [unfoldMapVecL : TpEq ·(ArrTpVec num1 num2 ·L) ·(Vec ·Nat num2 ➔ Vec ·Nat num2)
   = trans
       -(arrTpVecSC' -num2 ·Nat -zero ·Tl)
       -(arrowTpEqCod -(arrTpVecZC' -num2 ·Nat))]
- [vf : Vec ·Nat num2 ➔ Vec ·Nat num2
   = unfoldMapVecL.1.1 (nvecMap num2 num1 ·L f)]
- vf v
.

_ : { example ≃ nvecMap num2 num1 (add num10) (vcons num1 (vcons num1 vnil)) }
= β .
