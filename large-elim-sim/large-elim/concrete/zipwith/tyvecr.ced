import lib .

module large-elim/concrete/zipwith/tyvec .

-- length-indexed lists of types
𝒌TyVec (n: Nat) = Fin n ➔ ★ .

TVNil : 𝒌TyVec zero
= λ i: Fin zero. Bot .

data TVConsR {n: Nat} (H: ★) (T: 𝒌TyVec n) : Fin (succ n) ➔ ★ ➔ ★
= tvConsRZ : ∀ X: ★. TpEq ·X ·H ➾ TVConsR (zeroFin -n) ·X
| tvConsRS : ∀ i: Fin n. ∀ X: ★. TpEq ·X ·(T i) ➾ TVConsR (succFin -n i) ·X
.

{-
-- Since `TyCons` is not recursive, there is a much simpler encoding (see
-- Marmaduke, A., Jenkins, C., & Stump, A., Zero-Cost Constructor Subtyping)
-- TyCons : Π n: Nat. ★ ➔ 𝒌TyVec n ➔ 𝒌TyVec (succ n)
-- = λ n: Nat. λ A: ★. λ L: 𝒌TyVec n. λ i: Fin (succ n).
--   ι _: { i ≃ zeroFin } ➾ A.
--        ∀ j: Fin n. { i ≃ succFin j } ➾ L j .
--
-- We run through the whole development for the sake of completeness.
-}

{-
-- TVConsRUnique -n ·H ·T -(zeroFin -n) ·A1 (tvConsRZ ·A1 -eqA1) ·A2 (tvConsRZ ·A2 -eqA2) =
--   trans -eqA1 -(sym -eqA2)
-- TVConsRUnique -n ·H ·T -(succFin -n i) ·A1 (tvConsRS -i ·A1 -eqA1) ·A2 (tvConsRS -i ·A2 -eqA2) =
--   trans -eqA1 -(sym -eqA2)
-}
tvConsRUnique
: ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin (succ n).
  ∀ A1: ★. TVConsR n ·H ·T i ·A1 ➔ ∀ A2: ★. TVConsR n ·H ·T i ·A2 ➔
  TpEq ·A1 ·A2
= Λ n. Λ H. Λ T. Λ i. Λ A1. λ tyc1.
  σ tyc1 {
  | tvConsRZ ·X1 -eqX1 ➔ Λ A2. λ tyc2.
    σ tyc2 @(λ x: Fin (succ n). λ X: ★. λ _: TVConsR n ·H ·T x ·X. { x ≃ zeroFin } ➾ TpEq ·X1 ·X) {
    | tvConsRZ ·X2 -eqX2 ➔ Λ _.
      trans -eqX1 -(sym -eqX2)
    | tvConsRS -i2 ·X2 -eqX2 ➔
      Λ abs. δ - abs
    } -β
  | tvConsRS -i1 ·X1 -eqX1 ➔ Λ A2. λ tyc2.
    σ tyc2 @(λ x: Fin (succ n). λ X: ★. λ _: TVConsR n ·H ·T x ·X. { x ≃ (succFin i1) } ➾ TpEq ·X1 ·X) {
    | tvConsRZ ·X2 -eqX2 ➔ Λ abs.
      δ - abs
    | tvConsRS -i2 ·X2 -eqX2 ➔ Λ eqi.
      [eqi' : { i2 ≃ i1 } = succFinInj -n i2 -n i1 -eqi]
    - trans -eqX1 -(ρ ς eqi' - sym -eqX2)
    } -β
  }
.

tvConsRResp
: ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin (succ n).
  ∀ A1: ★. TVConsR n ·H ·T i ·A1 ➔ ∀ A2: ★. TpEq ·A1 ·A2 ➾ TVConsR n ·H ·T i ·A2
= Λ n. Λ H. Λ T. Λ i. Λ A1. λ tyc.
  σ tyc {
  | tvConsRZ ·X -eqX ➔ Λ A2. Λ eqA.
    tvConsRZ -n ·H ·T ·A2 -(trans -(sym -eqA) -eqX)
  | tvConsRS -i ·X -eqX ➔ Λ A2. Λ eqA.
    tvConsRS -n ·H ·T -i ·A2 -(trans -(sym -eqA) -eqX)
  } .


TVCons : Π n: Nat. Π H: ★. Π T: 𝒌TyVec n. 𝒌TyVec (succ n)
= λ n: Nat. λ H: ★. λ T: 𝒌TyVec n. λ i: Fin (succ n).
  ∀ X: ★. TVConsR n ·H ·T i ·X ➾ X .

tvConsRZ' : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TVConsR n ·H ·T (zeroFin -n) ·H
= Λ n. Λ H. Λ T. tvConsRZ -n ·H ·T -(refl ·H) .

tvConsZEq : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TpEq ·(TVCons n ·H ·T (zeroFin -n)) ·H
= Λ n. Λ H. Λ T.
  intrTpEq
    -(intrCast -(λ x. x -(tvConsRZ' -n ·H ·T)) -(λ _. β))
    -(intrCast
       -(λ x. Λ X. Λ tyc.
         tpEq1 -(tvConsRUnique -n ·H ·T -(zeroFin -n) (tvConsRZ' -n ·H ·T) tyc) x)
       -(λ _. β))
.

tvConsZ : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TVConsR n ·H ·T (zeroFin -n) ·(TVCons n ·H ·T (zeroFin -n))
= Λ n. Λ H. Λ T.
  tvConsRResp -n ·H ·T -(zeroFin -n) (tvConsRZ' -n ·H ·T) -(sym -(tvConsZEq -n ·H ·T)) .

tvConsRS' : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n. TVConsR n ·H ·T (succFin -n i) ·(T i)
= Λ n. Λ H. Λ T. Λ i. tvConsRS -n ·H ·T -i -(refl ·(T i)) .

tvConsSEq : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n. TpEq ·(TVCons n ·H ·T (succFin -n i)) ·(T i)
= Λ n. Λ H. Λ T. Λ i.
  intrTpEq
   -(intrCast -(λ x. x -(tvConsRS' -n ·H ·T -i)) -(λ _. β))
   -(intrCast
      -(λ x. Λ X. Λ tyc.
        tpEq1 -(tvConsRUnique -n ·H ·T -(succFin -n i) (tvConsRS' -n ·H ·T -i) tyc) x)
      -(λ _. β))
.

tvConsS
: ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n.
  TVConsR n ·H ·T (succFin -n i) ·(TVCons n ·H ·T (succFin -n i))
= Λ n. Λ H. Λ T. Λ i.
  tvConsRResp -n ·H ·T -(succFin -n i) (tvConsRS' -n ·H ·T -i) -(sym -(tvConsSEq -n ·H ·T -i)) .

TVConsEx : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n.
           Π i: Fin (succ n). TVConsR n ·H ·T i ·(TVCons n ·H ·T i)
= Λ n. Λ H. Λ T. λ i.
  σ i @(λ n': Nat. λ j: Fin n'.
        ∀ eq: { n' ≃ succ n}.
        TVConsR n ·H ·T (convFin -n' -(succ n) -eq j)
          ·(TVCons n ·H ·T (convFin -n' -(succ n) -eq j))) {
  | zeroFin -n' ➔ Λ eqn.
    tvConsZ -n ·H ·T
  | succFin -n' j ➔ Λ eqn.
    tvConsS -n ·H ·T -(convFin -n' -n -(succInj n' n eqn) j)
  } -β .

tvConsZC : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TpEq ·(TVCons n ·H ·T (zeroFin -n)) ·H
= tvConsZEq .

unrollTVConsZ : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TVCons n ·H ·T (zeroFin -n) ➔ H
= Λ n. Λ H. Λ T. tpEq1 -(tvConsZC -n ·H ·T) .

rollTVConsZ : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. H ➔ TVCons n ·H ·T (zeroFin -n)
= Λ n. Λ H. Λ T. tpEq2 -(tvConsZC -n ·H ·T) .

tvConsSC : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n. TpEq ·(TVCons n ·H ·T (succFin -n i)) ·(T i)
= tvConsSEq .

unrollTVConsS : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n. TVCons n ·H ·T (succFin -n i) ➔ T i
= Λ n. Λ H. Λ T. Λ i. tpEq1 -(tvConsSC -n ·H ·T -i) .

rollTVConsS : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. ∀ i: Fin n. T i ➔ TVCons n ·H ·T (succFin -n i)
= Λ n. Λ H. Λ T. Λ i. tpEq2 -(tvConsSC -n ·H ·T -i) .


{-
TVNil : 𝒌TyVec zero
= λ i: Fin zero. Bot .

TVCons : Π n: Nat. ★ ➔ 𝒌TyVec n ➔ 𝒌TyVec (succ n)
= λ n: Nat. λ A: ★. λ L: 𝒌TyVec n. λ i: Fin (succ n).
  ι _: { i ≃ zeroFin } ➾ A.
       ∀ j: Fin n. { i ≃ succFin j } ➾ L j .

-- some operations
HeadTyVec : Π n: Nat. 𝒌TyVec (succ n) ➔ ★
= λ n: Nat. λ L: 𝒌TyVec (succ n). L (zeroFin -n) .

TailTyVec : Π n: Nat. 𝒌TyVec (succ n) ➔ 𝒌TyVec n
= λ n: Nat. λ L: 𝒌TyVec (succ n). λ i: Fin n.
  L (succFin -n i) .

ReIdxTyVec : Π n1: Nat. Π n2: Nat. { n1 ≃ n2 } ➔ 𝒌TyVec n1 ➔ 𝒌TyVec n2
= λ n1: Nat. λ n2: Nat. λ eq: { n1 ≃ n2 }. λ L: 𝒌TyVec n1.
  λ i: Fin n2. L (ρ eq - i) .

-- mapping over a type list
MapTyVec : (★ ➔ ★) ➔ Π n: Nat. 𝒌TyVec n ➔ 𝒌TyVec n
= λ F: ★ ➔ ★. λ n: Nat. λ L: 𝒌TyVec n.
  λ i: Fin n. F ·(L i) .

-- equality
TyVecEq : Π m: Nat. 𝒌TyVec m ➔ Π n: Nat. 𝒌TyVec n ➔ ★
= λ m: Nat. λ L1: 𝒌TyVec m. λ n: Nat. λ L2: 𝒌TyVec n.
  Sigma ·{ m ≃ n }
    ·(λ eq: { m ≃ n }. Π i: Fin m. TpEq ·(L1 i) ·(L2 (convFin -m -n -eq i))) .

TyVecEq' : Π m: Nat. 𝒌TyVec m ➔ 𝒌TyVec m ➔ ★
= λ m: Nat. λ L1: 𝒌TyVec m. λ L2: 𝒌TyVec m.
  TyVecEq m ·L1 m ·L2 .

tyVecEqIrrel
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TyVecEq n1 ·L1 n2 ·L2 ➾ TyVecEq n1 ·L1 n2 ·L2
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  sigma (ρ (fst eqL) - β) λ i. tpEqIrrel -(snd eqL i) .

tyVecEqRefl : ∀ n: Nat. ∀ L: 𝒌TyVec n. TyVecEq' n ·L ·L
= Λ n. Λ L.
  sigma β λ i. tpEqRefl ·(L i) .

tyVecEqSym
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TyVecEq n1 ·L1 n2 ·L2 ➾ TyVecEq n2 ·L2 n1 ·L1
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  sigma (ρ (fst eqL) - β) λ i. tpEqSym -(snd eqL (ρ (fst eqL) - i)) .

tyVecEqTrans
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1.
  ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  ∀ n3: Nat. ∀ L3: 𝒌TyVec n3.
  TyVecEq n1 ·L1 n2 ·L2 ➾ TyVecEq n2 ·L2 n3 ·L3 ➾
  TyVecEq n1 ·L1 n3 ·L3
= Λ n1. Λ L1. Λ n2. Λ L2. Λ n3. Λ L3. Λ eqL1. Λ eqL2.
  sigma (ρ (fst eqL1) - ρ (fst eqL2) - β) λ i.
    tpEqTrans -(snd eqL1 i) -(snd eqL2 (convFin -n1 -n2 -(fst eqL1) i)) .

-- eta-expansion
tyVecEqEta : ∀ n: Nat. ∀ L: 𝒌TyVec n. TyVecEq' n ·L ·(λ i: Fin n. L i)
= Λ n. Λ L. sigma β λ i. tpEqRefl ·(L i) .

-- equality for constructors
TVNilEq : ∀ L: 𝒌TyVec zero. TyVecEq zero ·L zero ·TVNil
= Λ L. sigma β λ i. elimBot (emptyFin i) .

TVConsEq
: ∀ A1: ★. ∀ A2: ★. TpEq ·A1 ·A2 ➾
  ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2. TyVecEq n1 ·L1 n2 ·L2 ➾
  TyVecEq (succ n1) ·(TVCons n1 ·A1 ·L1) (succ n2) ·(TVCons n2 ·A2 ·L2)
= Λ A1. Λ A2. Λ eqA. Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  [eqSL : { succ n1 ≃ succ n2 } = ρ (fst eqL) - β]
- sigma (ρ eqSL - β) λ i.
     μ rec. i @(λ n: Nat. λ x: Fin n. { pred n ≃ n1} ➾ { i ≃ x } ➾
                TpEq ·(TVCons n1 ·A1 ·L1 i)
                  ·(TVCons n2 ·A2 ·L2 (convFin -(succ n1) -(succ n2) -eqSL i))) {
     | zeroFin -n ➔ Λ eq1. Λ eq2.
       ρ ς eq1 - ρ eq2
     - intrTpEq
         -(intrCast
             -(λ x.
               [ Λ _. elimCast -eqA.1 (x.1 -β)
               , Λ j. Λ abs. botCast -(δ - abs) x ])
             -(λ x. β))
         -(intrCast
             -(λ x.
               [ Λ _. elimCast -eqA.2 (x.1 -β)
               , Λ j. Λ abs. botCast -(δ - abs) x ])
             -(λ x. β))
     | succFin -n i ➔ Λ eq1. Λ eq2.
       ρ ς eq1 - ρ eq2
     - [i' : Fin n = to/Fin -isType/rec -n i]
     - [i1 : Fin n1 = ρ ς eq1 - i']
     - [i2 : Fin n2 = ρ ς (succInj n1 n2 eqSL) - i1]
     - intrTpEq
         -(intrCast
             -(λ x.
               [ Λ abs. botCast -(δ - abs) x
               , Λ j. Λ eq.
                 [eq' = succFinInj -n i' -n2 j -eq]
               - ρ ς eq'
               - elimCast -(snd eqL i1).1 (x.2 -i' -β) ])
             -(λ x. β))
         -(intrCast
             -(λ x.
               [ Λ abs. botCast -(δ - abs) x
               , Λ j. Λ eq.
                 [eq' = succFinInj -n i' -n j -eq]
               - ρ ς eq'
               - elimCast -(snd eqL i1).2 (x.2 -i2 -β) ])
             -(λ x. β))
    } -β -β .

tyHeadRespEq
: ∀ n: Nat. ∀ L1: 𝒌TyVec (succ n). ∀ L2: 𝒌TyVec (succ n).
  TyVecEq' (succ n) ·L1 ·L2 ➾ TpEq ·(HeadTyVec n ·L1) ·(HeadTyVec n ·L2)
= Λ n. Λ L1. Λ L2. Λ eqL12.
  intrTpEq
    -(intrCast
        -(elimCast -(snd eqL12 (zeroFin -n)).1)
        -(λ x. β))
    -(intrCast
        -(elimCast -(snd eqL12 (zeroFin -n)).2)
        -(λ x. β)).

TVConsHead : ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n. TpEq ·(HeadTyVec n ·(TVCons n ·A ·L)) ·A
= Λ A. Λ n. Λ L.
  intrTpEq
    -(intrCast
        -(λ x. x.1 -β)
        -(λ x. β))
    -(intrCast
        -(λ x. [ Λ _. x , Λ i. Λ abs. botCast -(δ - abs) x ])
        -(λ x. β)) .

TVConsTail
: ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n. TyVecEq n ·(TailTyVec n ·(TVCons n ·A ·L)) n ·L
= Λ A. Λ n. Λ L.
  sigma β λ i.
  intrTpEq
    -(intrCast
        -(λ x. x.2 -i -β)
        -(λ x. β))
    -(intrCast
        -(λ x. [ Λ abs. botCast -(δ - abs) x
               , Λ j. Λ eq. ρ ς (succFinInj -n i -n j -eq) - x ])
        -(λ x. β)) .

tyVecEqHead
: ∀ n1: Nat. ∀ L1: 𝒌TyVec (succ n1). ∀ n2: Nat. ∀ L2: 𝒌TyVec (succ n2).
  TyVecEq (succ n1) ·L1 (succ n2) ·L2 ➾
  TpEq ·(HeadTyVec n1 ·L1) ·(HeadTyVec n2 ·L2)
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  tpEqIrrel -(snd eqL (zeroFin -n1)) .

tyVecEqTail
: ∀ n1: Nat. ∀ L1: 𝒌TyVec (succ n1). ∀ n2: Nat. ∀ L2: 𝒌TyVec (succ n2).
  TyVecEq (succ n1) ·L1 (succ n2) ·L2 ➾
  TyVecEq n1 ·(TailTyVec n1 ·L1) n2 ·(TailTyVec n2 ·L2)
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  tyVecEqIrrel -n1 ·(TailTyVec n1 ·L1) -n2 ·(TailTyVec n2 ·L2)
    -(sigma (succInj n1 n2 (fst eqL)) λ i.
        snd eqL (succFin -n1 i)) .

TVConsInj1
: ∀ A1: ★. ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ A2: ★. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TyVecEq (succ n1) ·(TVCons n1 ·A1 ·L1) (succ n2) ·(TVCons n2 ·A2 ·L2) ➾
  TpEq ·A1 ·A2
= Λ A1. Λ n1. Λ L1. Λ A2. Λ n2. Λ L2. Λ eqV.
  tpEqTrans ·A1 ·(TVCons n1 ·A1 ·L1 (zeroFin -n1)) ·A2
    -(tpEqSym -(TVConsHead ·A1 -n1 ·L1))
    -(tpEqTrans ·(TVCons n1 ·A1 ·L1 (zeroFin -n1)) ·(TVCons n2 ·A2 ·L2 (zeroFin -n2)) ·A2
        -(snd eqV (zeroFin -n1))
        -(TVConsHead ·A2 -n2 ·L2)).

TVConsInj2
: ∀ A1: ★. ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ A2: ★. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TyVecEq (succ n1) ·(TVCons n1 ·A1 ·L1) (succ n2) ·(TVCons n2 ·A2 ·L2) ➾
  TyVecEq n1 ·L1 n2 ·L2
= Λ A1. Λ n1. Λ L1. Λ A2. Λ n2. Λ L2. Λ eqV.
  [eqn : { n1 ≃ n2 } = ρ (succInj n1 n2 (fst eqV)) - β]
- sigma eqn λ i.
     [j : Fin n2 = convFin -n1 -n2 -eqn i]
   - tpEqTrans
        ·(L1 i) ·(TailTyVec n1 ·(TVCons n1 ·A1 ·L1) i) ·(L2 j)
        -(tpEqSym -(snd (TVConsTail ·A1 -n1 ·L1) i))
        -(tpEqTrans
           ·(TailTyVec n1 ·(TVCons n1 ·A1 ·L1) i)
           ·(TailTyVec n2 ·(TVCons n2 ·A2 ·L2) j)
           ·(L2 (convFin -n1 -n2 -eqn i))
           -(snd eqV (succFin -n1 i))
           -(snd (TVConsTail ·A2 -n2 ·L2) j)).

mapTyVecHead
: ∀ F: ★ ➔ ★. RespTpEq ·F ➾ ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TpEq ·(HeadTyVec n ·(MapTyVec ·F (succ n) ·L)) ·(F ·(HeadTyVec n ·L))
= Λ F. Λ rF. Λ n. Λ L.
  tpEqIrrel -(rF -(tpEqRefl ·(HeadTyVec n ·L))) .

-- mapTyVecHead
-- : ∀ F: ★ ➔ ★. RespTpEq ·F ➾ ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n.
--   TpEq ·(MapTyVec ·F (succ n) ·(TVCons n ·A ·L) (zeroFin -n)) ·(F ·A)
-- = Λ F. Λ tpF. Λ A. Λ n. Λ L.
--   tpEqIrrel -(tpF (TVConsHead ·A -n ·L)).

mapTyVecTail
: ∀ F: ★ ➔ ★. RespTpEq ·F ➾ ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TyVecEq' n ·(TailTyVec n ·(MapTyVec ·F (succ n) ·L)) ·(MapTyVec ·F n ·(TailTyVec n ·L))
= Λ F. Λ rF. Λ n. Λ L.
  sigma β λ i. tpEqIrrel -(rF -(tpEqRefl ·(L (succFin -n i))))
.

mapTyVecRespTyVecEq
: ∀ F: ★ ➔ ★. RespTpEq ·F ➾
  ∀ n: Nat. ∀ L1: 𝒌TyVec n. ∀ L2: 𝒌TyVec n.
  TyVecEq' n ·L1 ·L2 ➾ TyVecEq' n ·(MapTyVec ·F n ·L1) ·(MapTyVec ·F n ·L2)
= Λ F. Λ rF. Λ n. Λ L1. Λ L2. Λ eqL.
  sigma β λ i. tpEqIrrel -(rF -(snd eqL i))
.

-- mapTyVecTail
-- : ∀ F: ★ ➔ ★. RespTpEq ·F ➾ ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n.
--   TyVecEq' n
--     ·(TailTyVec n ·(MapTyVec ·F (succ n) ·(TVCons n ·A ·L)))
--     ·(MapTyVec ·F n ·L)
-- = Λ F. Λ tpF. Λ A. Λ n. Λ L.
--   sigma β λ i.
--     tpEqIrrel -(tpF (snd (TVConsTail ·A -n ·L) i)) .
