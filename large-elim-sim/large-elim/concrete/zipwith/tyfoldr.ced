import lib .

module large-elim/concrete/zipwith/tyfoldr .

import tyvec .

{- λ n. μ TyFold. n @(λ x: Nat. λ L: 𝒌TyVec (succ n). ★) {
--      | zero ➔ λ L.
--        HeadTyVec zero ·L
--      | succ m ➔ λ L.
--        (HeadTyVec (succ m) ·L ➔ TyFold n ·(TailTyVec (succ n) ·L))
-- }
-}

data TyFoldR : Π n: Nat. 𝒌TyVec (succ n) ➔ ★ ➔ ★
= zTyFoldR
  : ∀ L: 𝒌TyVec num1. ∀ X: ★. TpEq ·X ·(HeadTyVec zero ·L) ➾
    TyFoldR zero ·L ·X
| sTyFoldR
  : ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n).
    ∀ Tl: 𝒌TyVec (succ n). TyVecEq' (succ n) ·Tl ·(TailTyVec (succ n) ·L) ➾
    ∀ Y: ★. TyFoldR n ·Tl ·Y ➔
    ∀ X: ★. TpEq ·X ·(HeadTyVec (succ n) ·L ➔ Y) ➾
    TyFoldR (succ n) ·L ·X
.

zTyFoldR'
: ∀ L: 𝒌TyVec num1. TyFoldR zero ·L ·(HeadTyVec zero ·L)
= Λ L. zTyFoldR ·L -(tpEqRefl ·(HeadTyVec zero ·L)) .

sTyFoldR'
: ∀ n: Nat. ∀ L: 𝒌TyVec (add num2 n). ∀ Y: ★. TyFoldR n ·(TailTyVec (succ n) ·L) ·Y ➔
  TyFoldR (succ n) ·L ·(HeadTyVec (succ n) ·L ➔ Y)
= Λ n. Λ L. Λ Y. λ fr.
  sTyFoldR -n ·L -(tyVecEqRefl -(succ n) ·(TailTyVec (succ n) ·L)) fr -(tpEqRefl ·(HeadTyVec (succ n) ·L ➔ Y)) .

tyFoldRSubst
: ∀ n1: Nat. ∀ L1: 𝒌TyVec (succ n1). ∀ X: ★.
  ∀ n2: Nat. ∀ L2: 𝒌TyVec (succ n2). TyVecEq (succ n1) ·L1 (succ n2) ·L2 ➾
  Cast ·(TyFoldR n1 ·L1 ·X) ·(TyFoldR n2 ·L2 ·X)
= Λ n1. Λ L1. Λ X. Λ n2. Λ L2. Λ tyEq.
  intrCastI
    -λ fr.
     σ fr
       @(λ n1: Nat. λ L1: 𝒌TyVec (succ n1). λ X: ★. λ x: TyFoldR n1 ·L1 ·X.
        ∀ n2: Nat. { n2 ≃ n1 } ➾ ∀ L2: 𝒌TyVec (succ n2).
        TyVecEq (succ n1) ·L1 (succ n2) ·L2 ➔
        ι y: TyFoldR n2 ·L2 ·X. { x ≃ y }) {
     | zTyFoldR ·L1' ·X -eqX ➔ Λ n2'. Λ eqn.
       ρ eqn
         @x.(∀ L2: 𝒌TyVec (succ x). TyVecEq num1 ·L1' (succ x) ·L2 ➔
             ι y: TyFoldR x ·L2 ·X. { zTyFoldR ≃ y })
     - Λ L2. λ eqL.
       [ zTyFoldR ·L2 ·X
           -(tpEqTrans ·X ·(HeadTyVec zero ·L1') ·(HeadTyVec zero ·L2)
               -eqX
               -(tyVecEqHead -zero -zero -eqL))
       , β{| zTyFoldR |} ]
     | sTyFoldR -n1' ·L1' ·Tl -eqTl ·Y fr' ·X -eqX ➔ Λ n2. Λ eqn.
       ρ eqn
         @x.(∀ L2: 𝒌TyVec (succ x). TyVecEq (add num2 n1') ·L1' (succ x) ·L2 ➔
             ι y: TyFoldR x ·L2 ·X. { sTyFoldR fr' ≃ y})
     - Λ L2. λ eqL.
       [eqX' : TpEq ·X ·(HeadTyVec (succ n1') ·L2 ➔ Y)
        = tpEqTrans ·X ·(HeadTyVec (succ n1') ·L1' ➔ Y) ·(HeadTyVec (succ n1') ·L2 ➔ Y)
            -eqX
            -(arrowRespTpEq2 -(tyVecEqHead -(succ n1') -(succ n1') -eqL) -(tpEqRefl ·Y))]
     - [eqTl' : TyVecEq' (succ n1') ·Tl ·(TailTyVec (succ n1') ·L2)
        = tyVecEqTrans
            -(succ n1') ·Tl
            -(succ n1') ·(TailTyVec (succ n1') ·L1')
            -(succ n1') ·(TailTyVec (succ n1') ·L2)
            -eqTl
            -(tyVecEqTail -(succ n1') -(succ n1') -eqL)]
     - [ sTyFoldR -n1' ·L2 ·Tl -eqTl' ·Y fr' ·X -eqX'
       , β{| sTyFoldR fr' |} ]
     } -n2 -(ς (succInj n1 n2 (fst tyEq))) ·L2 tyEq
.

tyFoldFn
: ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  ∀ X1: ★. TyFoldR n ·L ·X1 ➔ ∀ X2: ★. TyFoldR n ·L ·X2 ➔
  TpEq ·X1 ·X2
= Λ n. Λ L. Λ X1. λ fr1.
  μ fn. fr1 {
  | zTyFoldR ·L1 ·X1' -eqX1 ➔ Λ X2. λ fr2.
    σ fr2
    @(λ n2: Nat. λ L2: 𝒌TyVec (succ n2). λ X2: ★. λ x: TyFoldR n2 ·L2 ·X2.
      TyVecEq num1 ·L1 (succ n2) ·L2 ➔ TpEq ·X1' ·X2){
    | zTyFoldR ·L2 ·X2' -eqX2 ➔ λ eqL12.
      tpEqTrans ·X1' ·(HeadTyVec zero ·L1) ·X2'
        -eqX1
        -(tpEqTrans ·(HeadTyVec zero ·L1) ·(HeadTyVec zero ·L2) ·X2'
            -(tyVecEqHead -zero -zero -eqL12)
            -(tpEqSym -eqX2))
    | sTyFoldR -n2 ·L2 ·Tl2 -eqTl2 ·Y2 fr2' ·X2' -eqX2 ➔ λ eqL12.
      [abs : { zero ≃ succ n2 } = succInj zero (succ n2) (fst eqL12)]
    - δ - abs
    } (tyVecEqRefl -num1 ·L1)
  | sTyFoldR -n1 ·L1 ·Tl1 -eqTl1 ·Y1 fr1' ·X1' -eqX1 ➔ Λ X2. λ fr2.
    σ fr2
    @(λ n2: Nat. λ L2: 𝒌TyVec (succ n2). λ X2: ★. λ x: TyFoldR n2 ·L2 ·X2.
      TyVecEq (succ (succ n1)) ·L1 (succ n2) ·L2 ➔ TpEq ·X1' ·X2) {
    | zTyFoldR ·L2 ·X2' -eqX2 ➔ λ eqL12.
      [abs : { succ n1 ≃ zero } = succInj (succ n1) zero (fst eqL12)]
    - δ - abs
    | sTyFoldR -n2 ·L2 ·Tl2 -eqTl2 ·Y2 fr2' ·X2' -eqX2 ➔ λ eqL12.
      [eqTl12 : TyVecEq (succ n1) ·Tl1 (succ n2) ·Tl2
       = tyVecEqTrans
           -(succ n1) ·Tl1
           -(succ n1) ·(TailTyVec (succ n1) ·L1)
           -(succ n2) ·Tl2
           -eqTl1
           -(tyVecEqTrans
               -(succ n1) ·(TailTyVec (succ n1) ·L1)
               -(succ n2) ·(TailTyVec (succ n2) ·L2)
               -(succ n2) ·Tl2
               -(tyVecEqTail -(succ n1) -(succ n2) -eqL12)
               -(tyVecEqSym -(succ n2) -(succ n2) -eqTl2))]
    - [fr2'' : TyFoldR n1 ·Tl1 ·Y2
       = (tyFoldRSubst -n2 ·Tl2 ·Y2 -n1 ·Tl1 -(tyVecEqSym -(succ n1) -(succ n2) -eqTl12)).1
           fr2']
    - [ih = fn -n1 fr1' ·Y2 fr2'']
    - tpEqTrans ·X1' ·(HeadTyVec (succ n1) ·L1 ➔ Y1) ·X2'
        -eqX1
        -(tpEqTrans ·(HeadTyVec (succ n1) ·L1 ➔ Y1) ·(HeadTyVec (succ n2) ·L2 ➔ Y2) ·X2'
            -(arrowRespTpEq2 -(tyVecEqHead -(succ n1) -(succ n2) -eqL12) -ih)
            -(tpEqSym -eqX2))
    } (tyVecEqRefl -(add num2 n1) ·L1)
  }
.

tyFoldWd
: ∀ n: Nat. ∀ L: 𝒌TyVec (succ n). ∀ X1: ★. TyFoldR n ·L ·X1 ➔
  ∀ X2: ★. TpEq ·X1 ·X2 ➾ TyFoldR n ·L ·X2
= Λ n. Λ L. Λ X1. λ fr.
  σ fr {
  | zTyFoldR ·L' ·X1' -eqX1 ➔ Λ X2. Λ eqX12.
    zTyFoldR ·L' ·X2
      -(tpEqTrans ·X2 ·X1' ·(HeadTyVec zero ·L')
          -(tpEqSym -eqX12)
          -eqX1)
  | sTyFoldR -n' ·L' ·Tl -eqTl ·Y fr' ·X1' -eqX1 ➔ Λ X2. Λ eqX12.
    sTyFoldR -n' ·L' ·Tl -eqTl ·Y fr' ·X2
      -(tpEqTrans ·X2 ·X1' ·(HeadTyVec (succ n') ·L' ➔ Y)
          -(tpEqSym -eqX12)
          -eqX1)
  } .
