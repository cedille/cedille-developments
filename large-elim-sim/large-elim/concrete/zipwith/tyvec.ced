import lib .
import public large-elim/concrete/zipwith/tyvecr .

module large-elim/concrete/zipwith/tyvec .

-- some operations
TVHead : Π n: Nat. 𝒌TyVec (succ n) ➔ ★
= λ n: Nat. λ L: 𝒌TyVec (succ n). L (zeroFin -n) .

TVTail : Π n: Nat. 𝒌TyVec (succ n) ➔ 𝒌TyVec n
= λ n: Nat. λ L: 𝒌TyVec (succ n). λ i: Fin n.
  L (succFin -n i) .

TVMap : (★ ➔ ★) ➔ Π n: Nat. 𝒌TyVec n ➔ 𝒌TyVec n
= λ F: ★ ➔ ★. λ n: Nat. λ L: 𝒌TyVec n.
  λ i: Fin n. F ·(L i) .

-- ReIdxTyVec : Π n1: Nat. Π n2: Nat. { n1 ≃ n2 } ➔ 𝒌TyVec n1 ➔ 𝒌TyVec n2
-- = λ n1: Nat. λ n2: Nat. λ eq: { n1 ≃ n2 }. λ L: 𝒌TyVec n1.
--   λ i: Fin n2. L (ρ eq - i) .

-- equality
TVEq' : Π m: Nat. 𝒌TyVec m ➔ Π n: Nat. 𝒌TyVec n ➔ ★
= λ m: Nat. λ L1: 𝒌TyVec m. λ n: Nat. λ L2: 𝒌TyVec n.
  Sigma ·{ m ≃ n }
    ·(λ eq: { m ≃ n }. Π i: Fin m. TpEq ·(L1 i) ·(L2 (convFin -m -n -eq i))) .

TVEq : Π m: Nat. 𝒌TyVec m ➔ 𝒌TyVec m ➔ ★
= λ m: Nat. λ L1: 𝒌TyVec m. λ L2: 𝒌TyVec m.
  TVEq' m ·L1 m ·L2 .

tvEqIrrel'
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TVEq' n1 ·L1 n2 ·L2 ➾ TVEq' n1 ·L1 n2 ·L2
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  sigma (ρ (fst eqL) - β) (λ i. tpEqIrrel -(snd eqL i)) .

tvRefl : ∀ n: Nat. ∀ L: 𝒌TyVec n. TVEq n ·L ·L
= Λ n. Λ L.
  sigma β (λ i. refl ·(L i)) .

tvSym'
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  TVEq' n1 ·L1 n2 ·L2 ➾ TVEq' n2 ·L2 n1 ·L1
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  sigma (ρ (fst eqL) - β) (λ i. tpEqSym -(snd eqL (ρ (fst eqL) - i))) .

tvSym
: ∀ n: Nat. ∀ L1: 𝒌TyVec n. ∀ L2: 𝒌TyVec n.
  TVEq n ·L1 ·L2 ➾ TVEq n ·L2 ·L1
= Λ n. Λ L1. Λ L2. tvSym' -n ·L1 -n ·L2 .

tvTrans'
: ∀ n1: Nat. ∀ L1: 𝒌TyVec n1.
  ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
  ∀ n3: Nat. ∀ L3: 𝒌TyVec n3.
  TVEq' n1 ·L1 n2 ·L2 ➾ TVEq' n2 ·L2 n3 ·L3 ➾
  TVEq' n1 ·L1 n3 ·L3
= Λ n1. Λ L1. Λ n2. Λ L2. Λ n3. Λ L3. Λ eqL1. Λ eqL2.
  sigma (ρ (fst eqL1) - ρ (fst eqL2) - β) (λ i.
    tpEqTrans -(snd eqL1 i) -(snd eqL2 (convFin -n1 -n2 -(fst eqL1) i))) .

tvTrans : ∀ n: Nat. ∀ L1: 𝒌TyVec n. ∀ L2: 𝒌TyVec n. ∀ L3: 𝒌TyVec n.
          TVEq n ·L1 ·L2 ➾ TVEq n ·L2 ·L3 ➾ TVEq n ·L1 ·L3
= Λ n. Λ L1. Λ L2. Λ L3. tvTrans' -n ·L1 -n ·L2 -n ·L3 .

-- Head and Tail respect type vector equality
tvEqHead'
: ∀ n1: Nat. ∀ L1: 𝒌TyVec (succ n1). ∀ n2: Nat. ∀ L2: 𝒌TyVec (succ n2).
  TVEq' (succ n1) ·L1 (succ n2) ·L2 ➾
  TpEq ·(TVHead n1 ·L1) ·(TVHead n2 ·L2)
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  tpEqIrrel -(snd eqL (zeroFin -n1)) .

tvEqHead
: ∀ n: Nat. ∀ L1: 𝒌TyVec (succ n). ∀ L2: 𝒌TyVec (succ n).
  TVEq (succ n) ·L1 ·L2 ➾ TpEq ·(TVHead n ·L1) ·(TVHead n ·L2)
= Λ n. Λ L1. Λ L2. tvEqHead' -n ·L1 -n ·L2 .

tvEqTail'
: ∀ n1: Nat. ∀ L1: 𝒌TyVec (succ n1). ∀ n2: Nat. ∀ L2: 𝒌TyVec (succ n2).
  TVEq' (succ n1) ·L1 (succ n2) ·L2 ➾
  TVEq' n1 ·(TVTail n1 ·L1) n2 ·(TVTail n2 ·L2)
= Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
  tvEqIrrel' -n1 ·(TVTail n1 ·L1) -n2 ·(TVTail n2 ·L2)
    -(sigma (succInj n1 n2 (fst eqL)) (λ i.
        snd eqL (succFin -n1 i))) .

tvEqTail
: ∀ n: Nat. ∀ L1: 𝒌TyVec (succ n). ∀ L2: 𝒌TyVec (succ n).
  TVEq (succ n) ·L1 ·L2 ➾ TVEq n ·(TVTail n ·L1) ·(TVTail n ·L2)
= Λ n. Λ L1. Λ L2. tvEqTail' -n ·L1 -n ·L2 .

-- Interaction of head and tail on cons
tvHeadConsC : ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TpEq ·(TVHead n ·(TVCons n ·H ·T)) ·H
= tvConsZC .

tvTailConsC
: ∀ n: Nat. ∀ H: ★. ∀ T: 𝒌TyVec n. TVEq n ·(TVTail n ·(TVCons n ·H ·T)) ·T
= Λ n. Λ H. Λ T.
  sigma β (λ i. tvConsSC -n ·H ·T -i) .

-- Interaction of head and tail on map
tvHeadMapC
: ∀ F: ★ ➔ ★. ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TpEq ·(TVHead n ·(TVMap ·F (succ n) ·L)) ·(F ·(TVHead n ·L))
= Λ F. Λ n. Λ L. refl ·(F ·(TVHead n ·L)) .

tvTailMapC
: ∀ F: ★ ➔ ★. ∀ n: Nat. ∀ L: 𝒌TyVec (succ n).
  TVEq n ·(TVTail n ·(TVMap ·F (succ n) ·L)) ·(TVMap ·F n ·(TVTail n ·L))
= Λ F. Λ n. Λ L. sigma β (λ i. refl ·(TVTail n ·(TVMap ·F (succ n) ·L) i)) .


-- map respects type vector equality
tvMapRespEq
: ∀ F: ★ ➔ ★. RespTpEq ·F ➾
  ∀ n: Nat. ∀ L1: 𝒌TyVec n. ∀ L2: 𝒌TyVec n.
  TVEq n ·L1 ·L2 ➾ TVEq n ·(TVMap ·F n ·L1) ·(TVMap ·F n ·L2)
= Λ F. Λ rF. Λ n. Λ L1. Λ L2. Λ eqL.
  sigma β
    (λ i. tpEqIrrel -(rF -(snd eqL i)))
.

-- -- eta-expansion
-- TVEqEta : ∀ n: Nat. ∀ L: 𝒌TyVec n. TVEq' n ·L ·(λ i: Fin n. L i)
-- = Λ n. Λ L. sigma β λ i. tpEqRefl ·(L i) .

-- -- equality for constructors
-- tyNilEq : ∀ L: 𝒌TyVec zero. TVEq zero ·L zero ·TyNil
-- = Λ L. sigma β λ i. elimBot (emptyFin i) .

-- tyConsEq
-- : ∀ A1: ★. ∀ A2: ★. TpEq ·A1 ·A2 ➾
--   ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2. TVEq n1 ·L1 n2 ·L2 ➾
--   TVEq (succ n1) ·(TyCons n1 ·A1 ·L1) (succ n2) ·(TyCons n2 ·A2 ·L2)
-- = Λ A1. Λ A2. Λ eqA. Λ n1. Λ L1. Λ n2. Λ L2. Λ eqL.
--   [eqSL : { succ n1 ≃ succ n2 } = ρ (fst eqL) - β]
-- - sigma (ρ eqSL - β) λ i.
--      μ rec. i @(λ n: Nat. λ x: Fin n. { pred n ≃ n1} ➾ { i ≃ x } ➾
--                 TpEq ·(TyCons n1 ·A1 ·L1 i)
--                   ·(TyCons n2 ·A2 ·L2 (convFin -(succ n1) -(succ n2) -eqSL i))) {
--      | zeroFin -n ➔ Λ eq1. Λ eq2.
--        ρ ς eq1 - ρ eq2
--      - intrTpEq
--          -(intrCast
--              -(λ x.
--                [ Λ _. elimCast -eqA.1 (x.1 -β)
--                , Λ j. Λ abs. botCast -(δ - abs) x ])
--              -(λ x. β))
--          -(intrCast
--              -(λ x.
--                [ Λ _. elimCast -eqA.2 (x.1 -β)
--                , Λ j. Λ abs. botCast -(δ - abs) x ])
--              -(λ x. β))
--      | succFin -n i ➔ Λ eq1. Λ eq2.
--        ρ ς eq1 - ρ eq2
--      - [i' : Fin n = to/Fin -isType/rec -n i]
--      - [i1 : Fin n1 = ρ ς eq1 - i']
--      - [i2 : Fin n2 = ρ ς (succInj n1 n2 eqSL) - i1]
--      - intrTpEq
--          -(intrCast
--              -(λ x.
--                [ Λ abs. botCast -(δ - abs) x
--                , Λ j. Λ eq.
--                  [eq' = succFinInj -n i' -n2 j -eq]
--                - ρ ς eq'
--                - elimCast -(snd eqL i1).1 (x.2 -i' -β) ])
--              -(λ x. β))
--          -(intrCast
--              -(λ x.
--                [ Λ abs. botCast -(δ - abs) x
--                , Λ j. Λ eq.
--                  [eq' = succFinInj -n i' -n j -eq]
--                - ρ ς eq'
--                - elimCast -(snd eqL i1).2 (x.2 -i2 -β) ])
--              -(λ x. β))
--     } -β -β .

-- tyHeadRespEq
-- : ∀ n: Nat. ∀ L1: 𝒌TyVec (succ n). ∀ L2: 𝒌TyVec (succ n).
--   TVEq' (succ n) ·L1 ·L2 ➾ TpEq ·(TVHead n ·L1) ·(TVHead n ·L2)
-- = Λ n. Λ L1. Λ L2. Λ eqL12.
--   intrTpEq
--     -(intrCast
--         -(elimCast -(snd eqL12 (zeroFin -n)).1)
--         -(λ x. β))
--     -(intrCast
--         -(elimCast -(snd eqL12 (zeroFin -n)).2)
--         -(λ x. β)).

-- tyConsHead : ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n. TpEq ·(TVHead n ·(TyCons n ·A ·L)) ·A
-- = Λ A. Λ n. Λ L.
--   intrTpEq
--     -(intrCast
--         -(λ x. x.1 -β)
--         -(λ x. β))
--     -(intrCast
--         -(λ x. [ Λ _. x , Λ i. Λ abs. botCast -(δ - abs) x ])
--         -(λ x. β)) .

-- tyConsTail
-- : ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n. TVEq n ·(TVTail n ·(TyCons n ·A ·L)) n ·L
-- = Λ A. Λ n. Λ L.
--   sigma β λ i.
--   intrTpEq
--     -(intrCast
--         -(λ x. x.2 -i -β)
--         -(λ x. β))
--     -(intrCast
--         -(λ x. [ Λ abs. botCast -(δ - abs) x
--                , Λ j. Λ eq. ρ ς (succFinInj -n i -n j -eq) - x ])
--         -(λ x. β)) .

-- tyConsInj1
-- : ∀ A1: ★. ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ A2: ★. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
--   TVEq (succ n1) ·(TyCons n1 ·A1 ·L1) (succ n2) ·(TyCons n2 ·A2 ·L2) ➾
--   TpEq ·A1 ·A2
-- = Λ A1. Λ n1. Λ L1. Λ A2. Λ n2. Λ L2. Λ eqV.
--   tpEqTrans ·A1 ·(TyCons n1 ·A1 ·L1 (zeroFin -n1)) ·A2
--     -(tpEqSym -(tyConsHead ·A1 -n1 ·L1))
--     -(tpEqTrans ·(TyCons n1 ·A1 ·L1 (zeroFin -n1)) ·(TyCons n2 ·A2 ·L2 (zeroFin -n2)) ·A2
--         -(snd eqV (zeroFin -n1))
--         -(tyConsHead ·A2 -n2 ·L2)).

-- tyConsInj2
-- : ∀ A1: ★. ∀ n1: Nat. ∀ L1: 𝒌TyVec n1. ∀ A2: ★. ∀ n2: Nat. ∀ L2: 𝒌TyVec n2.
--   TVEq (succ n1) ·(TyCons n1 ·A1 ·L1) (succ n2) ·(TyCons n2 ·A2 ·L2) ➾
--   TVEq n1 ·L1 n2 ·L2
-- = Λ A1. Λ n1. Λ L1. Λ A2. Λ n2. Λ L2. Λ eqV.
--   [eqn : { n1 ≃ n2 } = ρ (succInj n1 n2 (fst eqV)) - β]
-- - sigma eqn λ i.
--      [j : Fin n2 = convFin -n1 -n2 -eqn i]
--    - tpEqTrans
--         ·(L1 i) ·(TVTail n1 ·(TyCons n1 ·A1 ·L1) i) ·(L2 j)
--         -(tpEqSym -(snd (tyConsTail ·A1 -n1 ·L1) i))
--         -(tpEqTrans
--            ·(TVTail n1 ·(TyCons n1 ·A1 ·L1) i)
--            ·(TVTail n2 ·(TyCons n2 ·A2 ·L2) j)
--            ·(L2 (convFin -n1 -n2 -eqn i))
--            -(snd eqV (succFin -n1 i))
--            -(snd (tyConsTail ·A2 -n2 ·L2) j)).

-- TVMapRespTVEq
-- : ∀ F: ★ ➔ ★. RespTpEq ·F ➾
--   ∀ n: Nat. ∀ L1: 𝒌TyVec n. ∀ L2: 𝒌TyVec n.
--   TVEq' n ·L1 ·L2 ➾ TVEq' n ·(TVMap ·F n ·L1) ·(TVMap ·F n ·L2)
-- = Λ F. Λ rF. Λ n. Λ L1. Λ L2. Λ eqL.
--   sigma β λ i. tpEqIrrel -(rF -(snd eqL i))
-- .

-- -- TVMapTail
-- -- : ∀ F: ★ ➔ ★. RespTpEq ·F ➾ ∀ A: ★. ∀ n: Nat. ∀ L: 𝒌TyVec n.
-- --   TVEq' n
-- --     ·(TVTail n ·(TVMap ·F (succ n) ·(TyCons n ·A ·L)))
-- --     ·(TVMap ·F n ·L)
-- -- = Λ F. Λ tpF. Λ A. Λ n. Λ L.
-- --   sigma β λ i.
-- --     tpEqIrrel -(tpF (snd (tyConsTail ·A -n ·L) i)) .
