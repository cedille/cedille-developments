module large-elim/concrete/universe/list (A : ★) .

import lib .

import descr ·Unit ·(λ _: Unit. A) .
import decode ·Unit ·(λ _: Unit. A) .

descrListArgs : Fin num2 ➔ Descr
= fvcons -num1 constD
    (fvcons -zero (sumD unit (λ _. idD))
      (fvnil ·Descr))
.

descrList : Descr
= sigD num2 descrListArgs .

import udata ·Unit ·(λ _: Unit. A) descrList .

UList : ★ = D .

rollUList   = Λ R: ★. rollSig   ·R -num2 -descrListArgs .
unrollUList = Λ R: ★. unrollSig ·R -num2 -descrListArgs .

unil : UList
= in (rollUList (sigma (zeroFin -num1) (rollConst unit))) .

ucons : A ➔ UList ➔ UList
= λ hd. λ tl.
  in (rollUList
       (sigma (fin1 -zero)
         (rollSum ·UList -unit -(λ _. idD) (sigma hd (rollId tl))))) .

caseUList
: ∀ P: UList ➔ ★. P unil ➔ (Π hd: A. Π tl: UList. P tl ➔ P (ucons hd tl)) ➔ Π xs: UList. P xs
= Λ P. λ ni. λ co.
  induction ·P
    (Λ R. Λ c. λ ih. λ xs.
    μ' (unrollUList xs)
    @(λ x: Sigma ·(Fin num2) ·(λ i: Fin num2. Decode ·R (descrListArgs i)). P (in' -c (rollUList x))) {
    | sigma i e ➔
      μ' i
      @(λ n: Nat. λ x: Fin n. ∀ eq: { n ≃ num2 }.
          [x' : Fin num2 = ρ ς eq - x]
        - Π e: Decode ·R (descrListArgs x'). P (in' -c (rollUList (sigma x' e)))) {
      | zeroFin -n' ➔ Λ _. λ e.
        μ' (unrollConst e) @λ x: Unit. P (in' -c (rollUList (sigma (zeroFin -num1) (rollConst x)))) {
        | unit ➔ ni
        }
      | succFin -n' i' ➔ Λ eqSN. λ e.
        μ' i'
        @λ n: Nat. λ x: Fin n. ∀ eq: { n ≃ num1 }.
           [x' : Fin num2 = succFin -num1 (ρ ς eq - x)]
         - Π e: Decode ·R (descrListArgs x'). P (in' -c (rollUList (sigma x' e))) {
        | zeroFin -n'' ➔ Λ _. λ e.
          μ' (unrollSum -unit -(λ _. idD) e)
          @λ x: Sigma ·A ·(λ _: A. Decode ·R idD). P (in' -c (rollUList (sigma (fin1 -zero) (rollSum -unit -(λ _. idD) x)))) {
          | sigma hd tl ➔
            [tl' : R = unrollId tl]
          - co hd (cast -c tl') (ih tl')
          }
        | succFin -n'' i'' ➔ Λ eqSSN. λ e.
          explode (emptyFin (ρ (succInj zero n'' (ς eqSSN)) - i''))
        } -(succInj n' num1 eqSN) e
      } -β e
    })
.
