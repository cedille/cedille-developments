import lib .
import descr as descr .

module large-elim/concrete/universe/noconfusionR
  (C: ★) (I: C ➔ ★) (n: Nat) (cs: Fin n ➔ descr.Descr ·C ·I) .

import descr ·C .
import decode ·C ·I .
import udata ·C ·I (sigD n cs) .

inSig : Π i: Fin n. Decode ·D (cs i) ➔ D
= λ i. λ d. in (rollSig ·D -n -cs (sigma i d)) .

inSigInj
: ∀ i1: Fin n. ∀ d1: Decode ·D (cs i1). ∀ i2: Fin n. ∀ d2: Decode ·D (cs i2).
  { inSig i1 d1 ≃ inSig i2 d2 } ➾ Pair ·{ i1 ≃ i2 } ·{ d1 ≃ d2 }
= Λ i1. Λ d1. Λ i2. Λ d2. Λ eq.
  [lem : { sigma i1 d1 ≃ sigma i2 d2 }
   = ρ eq @x.{ out x ≃ sigma i2 d2 }
   - β]
- sigma
    (sigmaInj1 ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)) -i1 -d1 ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)) -i2 -d2 -lem)
    (sigmaInj2 ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)) -i1 -d1 ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)) -i2 -d2 -lem)
.

data NoConfusionR : D ➔ D ➔ ★ ➔ ★
= noConfEqR
  : ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2} ➾
    ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
    ∀ X: ★. TpEq ·X ·(∀ P: ★. ({ a1 ≃ a2 } ➔ P) ➔ P) ➾
    NoConfusionR (inSig i1 a1) (inSig i2 a2) ·X
| noConfNeqR
  : ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
    ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
    ∀ X: ★. TpEq ·X ·Bot ➾
    NoConfusionR (inSig i1 a1) (inSig i2 a2) ·X
.

-- Respectfullness
noConfusionRResp
: ∀ d1: D. ∀ d2: D. ∀ T1: ★. NoConfusionR d1 d2 ·T1 ➔ ∀ T2: ★. TpEq ·T1 ·T2 ➾ NoConfusionR d1 d2 ·T2
= Λ d1. Λ d2. Λ T1. λ ncr.
  σ ncr {
  | noConfEqR -i1 -i2 -eq -a1 -a2 ·X -eqX ➔ Λ T2. Λ eqT2.
    noConfEqR -i1 -i2 -eq -a1 -a2 ·T2 -(trans -(sym -eqT2) -eqX)
  | noConfNeqR -i1 -i2 -neq -a1 -a2 ·X -eqX ➔ Λ T2. Λ eqT2.
    noConfNeqR -i1 -i2 -neq -a1 -a2 ·T2 -(trans -(sym -eqT2) -eqX)
}
.

noConfusionRUnique
: ∀ d1: D. ∀ d2: D. ∀ T1: ★. NoConfusionR d1 d2 ·T1 ➔ ∀ T2: ★. NoConfusionR d1 d2 ·T2 ➔ TpEq ·T1 ·T2
= Λ d1. Λ d2. Λ T1. λ ncr1.
  μ noConfusionRUnique. ncr1 {
  | noConfEqR -i11 -i12 -eq1 -a11 -a12 ·X1 -eqX1 ➔ Λ T2. λ ncr2.
    σ ncr2
    @(λ x1: D. λ x2: D. λ X: ★. λ ncr: NoConfusionR x1 x2 ·X.
      { x1 ≃ inSig i11 a11 } ➾ { x2 ≃ inSig i12 a12 } ➾ TpEq ·X1 ·X) {
    | noConfEqR -i21 -i22 -eq2 -a21 -a22 ·X2 -eqX2 ➔ Λ eqa11. Λ eqa12.
      trans -eqX1
        -(  ρ ς (snd (inSigInj -i21 -a21 -i11 -a11 -eqa11))
          - ρ ς (snd (inSigInj -i22 -a22 -i12 -a12 -eqa12))
          - (sym -eqX2))
    | noConfNeqR -i21 -i22 -neq2 -a21 -a22 ·X2 -eqX2 ➔ Λ eqa11. Λ eqa12.
      elimBot (botIrrel -(neq2
        (  ρ (fst' (inSigInj -i21 -a21 -i11 -a11 -eqa11))
         - ρ eq1
         - ς (fst' (inSigInj -i22 -a22 -i12 -a12 -eqa12)))))
    } -β -β
  | noConfNeqR -i11 -i12 -neq1 -a11 -a12 ·X1 -eqX1 ➔ Λ T2. λ ncr2.
    σ ncr2
    @(λ x1: D. λ x2: D. λ X: ★. λ ncr: NoConfusionR x1 x2 ·X.
      { x1 ≃ inSig i11 a11 } ➾ { x2 ≃ inSig i12 a12 } ➾ TpEq ·X1 ·X) {
    | noConfEqR -i21 -i22 -eq2 -a21 -a22 ·X2 -eqX2 ➔ Λ eqa11. Λ eqa12.
      elimBot (botIrrel -(neq1
        ( ρ ς (fst' (inSigInj -i21 -a21 -i11 -a11 -eqa11))
        - ρ eq2
        - fst' (inSigInj -i22 -a22 -i12 -a12 -eqa12))))
    | noConfNeqR -i21 -i22 -neq2 -a21 -a22 ·X2 -eqX2 ➔ Λ eqa11. Λ eqa12.
      trans -eqX1 -(sym -eqX2)
    } -β -β
}
.
