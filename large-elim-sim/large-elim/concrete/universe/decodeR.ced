module large-elim/concrete/universe/decodeR (C: ★) (I: C ➔ ★) (T: ★) .

import lib .
import descr ·C ·I.

data DecodeR : Descr ➔ ★ ➔ ★
= decIdR    : ∀ X: ★. TpEq ·X ·T ➾ DecodeR idD ·X
| decConstR : ∀ X: ★. TpEq ·X ·Unit ➾ DecodeR constD ·X
| decPairR  : ∀ d1: Descr. ∀ Ih1: ★. DecodeR d1 ·Ih1 ➔
              ∀ d2: Descr. ∀ Ih2: ★. DecodeR d2 ·Ih2 ➔
              ∀ X: ★. TpEq ·X ·(Pair ·Ih1 ·Ih2) ➾
              DecodeR (pairD d1 d2) ·X
| decSumR   : ∀ c: C. ∀ f: I c ➔ Descr. ∀ Ih: I c ➔ ★. (Π i: I c. DecodeR (f i) ·(Ih i)) ➔
              ∀ X: ★. TpEq ·X ·(Sigma ·(I c) ·Ih) ➾
              DecodeR (sumD c f) ·X
| decSigR   : ∀ n: Nat. ∀ f: Fin n ➔ Descr. ∀ Ih: Fin n ➔ ★. (Π i : Fin n. DecodeR (f i) ·(Ih i)) ➔
              ∀ X: ★. TpEq ·X ·(Sigma ·(Fin n) ·Ih) ➾
              DecodeR (sigD n f) ·X
.

caseDecodeRId
: ∀ P: Π d: Descr. Π T: ★. DecodeR d ·T ➔ ★.
  (∀ X: ★. ∀ eq: TpEq ·X ·T. P idD ·X (decIdR ·X -eq)) ➔
  ∀ T: ★. Π dr: DecodeR idD ·T. P idD ·T dr
= Λ P. λ pf. Λ T. λ dr.
  μ' dr @λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ idD } ➾ P d ·T x {
  | decIdR ·X -eqX ➔ Λ _.
    pf ·X -eqX
  | decConstR ·X -eqX ➔ Λ eq.
    δ - eq
  | decPairR -d1 ·Ih1 dr1 -d2 ·Ih2 dr2 ·X -eqX ➔ Λ eq.
    δ - eq
  | decSumR -c -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  } -β
.

caseDecodeRConst
: ∀ P: Π d: Descr. Π T: ★. DecodeR d ·T ➔ ★.
  (∀ X: ★. ∀ eq: TpEq ·X ·Unit. P constD ·X (decConstR ·X -eq)) ➔
  ∀ T: ★. Π dr: DecodeR constD ·T. P constD ·T dr
= Λ P. λ pf. Λ T. λ dr.
  μ' dr @λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ constD } ➾ P d ·T x {
  | decIdR ·X -eqX ➔ Λ eq.
    δ - eq
  | decConstR ·X -eqX ➔ Λ eq.
    pf ·X -eqX
  | decPairR -d1 ·Ih1 dr1 -d2 ·Ih2 dr2 ·X -eqX ➔ Λ eq.
    δ - eq
  | decSumR -c -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  } -β
.

caseDecodeRPair
: ∀ P: Π d: Descr. Π T: ★. DecodeR d ·T ➔ ★.
  (∀ d1: Descr. ∀ Ih1: ★. Π dr1: DecodeR d1 ·Ih1.
   ∀ d2: Descr. ∀ Ih2: ★. Π dr2: DecodeR d2 ·Ih2.
   ∀ X: ★. ∀ eq: TpEq ·X ·(Pair ·Ih1 ·Ih2).
   P (pairD d1 d2) ·X (decPairR -d1 dr1 -d2 dr2 -eq)) ➔
  ∀ d1: Descr. ∀ d2: Descr. ∀ T: ★. Π dr: DecodeR (pairD d1 d2) ·T. P (pairD d1 d2) ·T dr
= Λ P. λ pf. Λ d1. Λ d2. Λ T. λ dr.
  μ' dr @λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ pairD d1 d2 } ➾ P d ·T x {
  | decIdR ·X -eqX ➔ Λ eq.
    δ - eq
  | decConstR ·X -eqX ➔ Λ eq.
    δ - eq
  | decPairR -d1' ·Ih1 dr1' -d2' ·Ih2 dr2' ·X -eqX ➔ Λ eq.
    pf -d1' dr1' -d2' dr2' -eqX
  | decSumR -c -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  } -β
.

caseDecodeRSum
: ∀ P: Π d: Descr. Π T: ★. DecodeR d ·T ➔ ★.
  (∀ c: C. ∀ f: I c ➔ Descr. ∀ Ih: I c ➔ ★. Π ih: Π i: I c. DecodeR (f i) ·(Ih i).
   ∀ X: ★. ∀ eq: TpEq ·X ·(Sigma ·(I c) ·Ih).
   P (sumD c f) ·X (decSumR -c -f ih -eq)) ➔
  ∀ c: C. ∀ f: I c ➔ Descr. ∀ T: ★. Π dr: DecodeR (sumD c f) ·T. P (sumD c f) ·T dr
= Λ P. λ pf. Λ c. Λ f. Λ T. λ dr.
  μ' dr @λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ sumD c f } ➾ P d ·T x {
  | decIdR ·X -eqX ➔ Λ eq.
    δ - eq
  | decConstR ·X -eqX ➔ Λ eq.
    δ - eq
  | decPairR -d1' ·Ih1 dr1' -d2' ·Ih2 dr2' ·X -eqX ➔ Λ eq.
    δ - eq
  | decSumR -c' -f' ·Ih fr ·X -eqX ➔ Λ eq.
    pf -c' -f' ·Ih fr -eqX
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  } -β
.

caseDecodeRSig
: ∀ P: Π d: Descr. Π T: ★. DecodeR d ·T ➔ ★.
  (∀ n: Nat. ∀ f: Fin n ➔ Descr. ∀ Ih: Fin n ➔ ★. Π ih: Π i: Fin n. DecodeR (f i) ·(Ih i).
   ∀ X: ★. ∀ eq: TpEq ·X ·(Sigma ·(Fin n) ·Ih).
   P (sigD n f) ·X (decSigR -n -f ih -eq)) ➔
  ∀ n: Nat. ∀ f: Fin n ➔ Descr. ∀ T: ★. Π dr: DecodeR (sigD n f) ·T. P (sigD n f) ·T dr
= Λ P. λ pf. Λ n. Λ f. Λ T. λ dr.
  μ' dr @λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ sigD n f } ➾ P d ·T x {
  | decIdR ·X -eqX ➔ Λ eq.
    δ - eq
  | decConstR ·X -eqX ➔ Λ eq.
    δ - eq
  | decPairR -d1' ·Ih1 dr1' -d2' ·Ih2 dr2' ·X -eqX ➔ Λ eq.
    δ - eq
  | decSumR -c' -f' ·Ih fr ·X -eqX ➔ Λ eq.
    δ - eq
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ eq.
    pf -n -f ·Ih fr -eqX
  } -β
.


-- Respectfullness
decodeRResp
: ∀ d: Descr. ∀ T1: ★. DecodeR d ·T1 ➔ ∀ T2: ★. TpEq ·T1 ·T2 ➾ DecodeR d ·T2
= Λ d. Λ T1. λ dr.
  μ' dr {
  | decIdR ·X -eqX ➔ Λ T2. Λ eq.
    decIdR ·T2 -(trans -(sym -eq) -eqX)
  | decConstR ·X -eqX ➔ Λ T2. Λ eq.
    decConstR ·T2 -(trans -(sym -eq) -eqX)
  | decPairR -d1 ·Ih1 dr1 -d2 ·Ih2 dr2 ·X -eqX ➔ Λ T2. Λ eq.
    decPairR -d1 ·Ih1 dr1 -d2 ·Ih2 dr2 ·T2 -(trans -(sym -eq) -eqX)
  | decSumR -c -f ·Ih fr ·X -eqX ➔ Λ T2. Λ eq.
    decSumR -c -f ·Ih fr ·T2 -(trans -(sym -eq) -eqX)
  | decSigR -n -f ·Ih fr ·X -eqX ➔ Λ T2. Λ eq.
    decSigR -n -f ·Ih fr ·T2 -(trans -(sym -eq) -eqX)
  }
.

-- Uniqueness
decodeRUnique
: ∀ d: Descr. ∀ T1: ★. DecodeR d ·T1 ➔ ∀ T2: ★. DecodeR d ·T2 ➔ TpEq ·T1 ·T2
= Λ d. Λ T1. λ dr1.
  μ decodeRUnique. dr1 {
  | decIdR ·X1 -eqX1 ➔
    caseDecodeRId ·(λ d: Descr. λ T: ★. λ x: DecodeR d ·T. TpEq ·X1 ·T)
      (Λ X2. Λ eqX2.
      trans -eqX1 -(sym -eqX2))
  | decConstR ·X1 -eqX1 ➔
    caseDecodeRConst ·(λ d: Descr. λ T: ★. λ x: DecodeR d ·T. TpEq ·X1 ·T)
      (Λ X2. Λ eqX2.
      trans -eqX1 -(sym -eqX2))
  | decPairR -d11 ·Ih11 dr11 -d12 ·Ih12 dr12 ·X1 -eqX1 ➔ Λ T2. λ dr2.
    caseDecodeRPair
      ·(λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ pairD d11 d12 } ➾ TpEq ·X1 ·T)
      (Λ d21. Λ Ih21. λ dr21. Λ d22. Λ Ih22. λ dr22. Λ X2. Λ eqX2. Λ eqds.
       trans -eqX1
         -(trans -(pairRespTpEq -(decodeRUnique -d11 ·Ih11 dr11 ·Ih21
                                    (ρ (fst (pairDInj -d11 -d12 -d21 -d22 -(ς eqds))) - dr21))
                                -(decodeRUnique -d12 ·Ih12 dr12 ·Ih22
                                    (ρ (snd (pairDInj -d11 -d12 -d21 -d22 -(ς eqds))) - dr22)))
                 -(sym -eqX2)))
      -d11 -d12 ·T2 dr2 -β
  | decSumR -c -f ·Ih fr ·X1 -eqX1 ➔ Λ T2. λ dr2.
    caseDecodeRSum
     ·(λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ sumD c f } ➾ TpEq ·X1 ·T)
      (Λ c'. Λ f'. Λ Ih2. λ fr2. Λ X2. Λ eqX2. Λ eqcf.
         [eqc : { c' ≃ c } = fst (sumDInj -c' -f' -c -f -eqcf)]
       - [eqf : { f' ≃ f } = snd (sumDInj -c' -f' -c -f -eqcf)]
       - trans -eqX1
       - (trans
           -(sigmaRespTpEq ·(I c) ·Ih ·(I c') ·Ih2
              -(intrTpEq
                 -(intrCast -(λ x. ρ eqc - x) -(λ _. β))
                 -(intrCast -(λ x. ρ ς eqc - x) -(λ _. β)))
              -(λ i1. λ i2. Λ eqi.
               decodeRUnique -(f i1) ·(Ih i1) (fr i1) ·(Ih2 i2)
                 (ρ ς eqf - ρ eqi - (fr2 i2))))
          -(sym -eqX2)))
     -c -f dr2 -β
  | decSigR -n -f ·Ih fr ·X1 -eqX1 ➔ Λ T2. λ dr2.
    caseDecodeRSig
     ·(λ d: Descr. λ T: ★. λ x: DecodeR d ·T. { d ≃ sigD n f } ➾ TpEq ·X1 ·T)
      (Λ n'. Λ f'. Λ Ih2. λ fr2. Λ X2. Λ eqX2. Λ eqnf.
         [eqn : { n' ≃ n } = fst (sigDInj -n' -f' -n -f -eqnf)]
       - [eqf : { f' ≃ f } = snd (sigDInj -n' -f' -n -f -eqnf)]
       - trans -eqX1
       - (trans
           -(sigmaRespTpEq ·(Fin n) ·Ih ·(Fin n') ·Ih2
              -(intrTpEq
                 -(intrCast -(λ x. ρ eqn - x) -(λ _. β))
                 -(intrCast -(λ x. ρ ς eqn - x) -(λ _. β)))
              -(λ i1. λ i2. Λ eqi.
               decodeRUnique -(f i1) ·(Ih i1) (fr i1) ·(Ih2 i2)
                 (ρ ς eqf - ρ eqi - (fr2 i2))))
          -(sym -eqX2)))
     -n -f dr2 -β
  }
.
