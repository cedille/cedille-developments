import lib .
import descr as descr .

module large-elim/concrete/universe/noconfusion
  (C: ★) (I: C ➔ ★) (n: Nat) (cs: Fin n ➔ descr.Descr ·C) .

import descr ·C .
import decode ·C ·I .
import udata ·C ·I (sigD n cs) .
import noconfusionR ·C ·I n cs .

NoConfusion : D ➔ D ➔ ★
= λ d1: D. λ d2: D. ∀ X: ★. NoConfusionR d1 d2 ·X ➾ X .

noConfEqEq
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  TpEq ·(∀ P: ★. ({ a1 ≃ a2 } ➔ P) ➔ P)
    ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ eqi. Λ a1. Λ a2.
  intrTpEq
    -(intrCast
       -(λ x. Λ X. Λ nc.
         elimCast
           -(noconfusionFn -(inSig i1 a1) -(inSig i2 a2)
              (noConfEqR' -i1 -i2 -eqi -a1 -a2) nc).1
           x)
       -(λ x. β))
    -(intrCast
       -(λ x. x -(noConfEqR' -i1 -i2 -eqi -a1 -a2))
       -(λ x. β))
.

noConfEq
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ eqi. Λ a1. Λ a2.
  noconfusionWd -(inSig i1 a1) -(inSig i2 a2)
    (noConfEqR' -i1 -i2 -eqi -a1 -a2)
    -(noConfEqEq -i1 -i2 -eqi -a1 -a2)
.

noConfNeqEq
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  TpEq ·Bot ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ neqi. Λ a1. Λ a2.
  intrTpEq
    -(intrCast
       -- cheating a bit here
       -(λ x. x ·(NoConfusion (inSig i1 a1) (inSig i2 a2)))
       -(λ x. β))
    -(intrCast
       -(λ x. x -(noConfNeqR' -i1 -i2 -neqi -a1 -a2))
       -(λ x. β))
.

noConfNeq
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ neqi. Λ a1. Λ a2.
  noconfusionWd -(inSig i1 a1) -(inSig i2 a2)
    (noConfNeqR' -i1 -i2 -neqi -a1 -a2)
    -(noConfNeqEq -i1 -i2 -neqi -a1 -a2)
.

noConfTot
: Π i1: Fin n. ∀ a1: Decode ·D (cs i1). Π i2: Fin n. ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2)
    ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= λ i1. Λ a1. λ i2. Λ a2.
  σ (eqFin -n i1 i2) {
  | decYes y ➔
    noConfEq -i1 -i2 -y -a1 -a2
  | decNo  n ➔
    noConfNeq -i1 -i2 -n -a1 -a2
  }
.

encNoConfEq
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  { a1 ≃ a2 } ➾
  NoConfusion (inSig i1 a1) (inSig i2 a2)
= Λ i1. Λ i2. Λ eqi. Λ a1. Λ a2. Λ eqA.
  (noConfEqEq -i1 -i2 -eqi -a1 -a2).1.1
    Λ P. ρ eqA - λ f. f β
.

encNoConfNeq
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  Bot ➔ NoConfusion (inSig i1 a1) (inSig i2 a2)
= Λ i1. Λ i2. Λ neqi. Λ a1. Λ a2. λ absurd.
  (noConfNeqEq -i1 -i2 -neqi -a1 -a2).1.1 absurd
.


noConfusion : Π x: D. Π y: D. { x ≃ y } ➾ NoConfusion x y
= λ x.
  ρ ς (lambek2 x)
- σ ((decBetaSigD ·D -n -cs).1.1 (out x))
  @(λ p: Sigma ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)).
    Π y: D. { in p ≃ y } ➾ NoConfusion (in (encSig ·D -n -cs p)) y) {
  | sigma i1 d1 ➔ λ y.
    [x = inSig i1 d1]
  - ρ ς (lambek2 y)
  - σ ((decBetaSigD ·D -n -cs).1.1 (out y))
    @(λ p: Sigma ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)).
      { x ≃ in p } ➾ NoConfusion x (in (encSig ·D -n -cs p))) {
    | sigma i2 d2 ➔ Λ eq.
      [y = inSig i2 d2]
    - σ (eqFin -n i1 i2) {
      | decYes eqi ➔
        [eqd : { d1 ≃ d2 }
         = ρ eq @z.{ snd (out z) ≃ snd (out y)}
         - β]
      - encNoConfEq -i1 -i2 -eqi -d1 -d2 -eqd
      | decNo neqi ➔
        [eqi : { i1 ≃ i2 }
         = ρ eq @z.{ fst (out z) ≃ fst (out y )}
         - β]
      - encNoConfNeq -i1 -i2 -neqi -d1 -d2
          (neqi eqi)
      }
    }
  }
.
