import lib .
import descr as descr .

module large-elim/concrete/universe/noconfusion
  (C: ★) (I: C ➔ ★) (n: Nat) (cs: Fin n ➔ descr.Descr ·C ·I) .

import descr  ·C ·I.
import decode ·C ·I .
import udata  ·C ·I (sigD n cs) .
import noconfusionR ·C ·I n cs .

-- Existence

NoConfusion : D ➔ D ➔ ★
= λ d1: D. λ d2: D. ∀ X: ★. NoConfusionR d1 d2 ·X ➾ X .

noConfEqR'
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2} ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·{ a1 ≃ a2 }
= Λ i1. Λ i2. Λ eq. Λ a1. Λ a2.
  noConfEqR -i1 -i2 -eq -a1 -a2 -(refl ·{ a1 ≃ a2 }) .

noConfEqEq
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2} ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  TpEq ·(NoConfusion (inSig i1 a1) (inSig i2 a2)) ·{ a1 ≃ a2 }
= Λ i1. Λ i2. Λ eq. Λ a1. Λ a2.
  intrTpEq
   -(intrCast
      -(λ nc. nc -(noConfEqR' -i1 -i2 -eq -a1 -a2))
      -(λ _. β))
   -(intrCast
      -(λ eq'. Λ X. Λ ncr.
        tpEq1
          -(noConfusionRUnique -(inSig i1 a1) -(inSig i2 a2) (noConfEqR' -i1 -i2 -eq -a1 -a2) ncr)
          eq')
      -(λ _. β))
.

noConfEq
: ∀ i1: Fin n. ∀ i2: Fin n. { i1 ≃ i2} ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ eq. Λ a1. Λ a2.
  noConfusionRResp -(inSig i1 a1) -(inSig i2 a2)
    (noConfEqR' -i1 -i2 -eq -a1 -a2)
   -(sym -(noConfEqEq -i1 -i2 -eq -a1 -a2))
.

noConfNeqR'
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·Bot
= Λ i1. Λ i2. Λ neq. Λ a1. Λ a2.
  noConfNeqR -i1 -i2 -neq -a1 -a2 -(refl ·Bot) .

noConfNeqEq
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  TpEq ·(NoConfusion (inSig i1 a1) (inSig i2 a2)) ·Bot
= Λ i1. Λ i2. Λ neq. Λ a1. Λ a2.
  intrTpEq
   -(intrCast
      -(λ nc. nc -(noConfNeqR' -i1 -i2 -neq -a1 -a2))
      -(λ _. β))
   -(intrCast
      -(λ b. b ·(NoConfusion (inSig i1 a1) (inSig i2 a2)) {- we can take a shortcut here -})
      -(λ _. β))
.

noConfNeq
: ∀ i1: Fin n. ∀ i2: Fin n. Not ·{ i1 ≃ i2 } ➾
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= Λ i1. Λ i2. Λ neq. Λ a1. Λ a2.
  noConfusionRResp -(inSig i1 a1) -(inSig i2 a2)
    (noConfNeqR' -i1 -i2 -neq -a1 -a2)
   -(sym -(noConfNeqEq -i1 -i2 -neq -a1 -a2))
.

{- This step is included for completeness, but it is not needed since
-- `NoConfusion` is not recursive
-}
noConfEx
: Π i1: Fin n. Π i2: Fin n.
  ∀ a1: Decode ·D (cs i1). ∀ a2: Decode ·D (cs i2).
  NoConfusionR (inSig i1 a1) (inSig i2 a2) ·(NoConfusion (inSig i1 a1) (inSig i2 a2))
= λ i1. λ i2. Λ a1. Λ a2.
  μ' (eqFin -n i1 i2) {
  | decYes eq ➔
    noConfEq -i1 -i2 -eq -a1 -a2
  | decNo neq ➔
    noConfNeq -i1 -i2 -neq -a1 -a2
  } .

noConfC1 = noConfEqEq  .
noConfC2 = noConfNeqEq .

-- proof of NoConfusion
noConfusion
: Π d1: D. Π d2: D. { d1 ≃ d2 } ➾ NoConfusion d1 d2
= caseD ·(λ d1: D. Π d2: D. { d1 ≃ d2 } ➾ NoConfusion d1 d2)
    (λ xs1.
    μ' (unrollSig ·D -n -cs xs1)
    @(λ xs: Sigma ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)).
        [d1 = in (rollSig -n -cs xs)]
      - Π d2: D. { d1 ≃ d2 } ➾ NoConfusion d1 d2) {
    | sigma i1 a1 ➔
      [d1 = inSig i1 a1]
    - caseD ·(λ d2: D. { d1 ≃ d2 } ➾ NoConfusion d1 d2)
        (λ xs2.
        μ' (unrollSig ·D -n -cs xs2)
        @(λ xs: Sigma ·(Fin n) ·(λ i: Fin n. Decode ·D (cs i)).
            [d2 = in (rollSig -n -cs xs)]
          - { d1 ≃ d2 } ➾ NoConfusion d1 d2) {
        | sigma i2 a2 ➔
          [d2 = inSig i2 a2]
        - Λ eq: { d1 ≃ d2 }.
          μ' (eqFin -n i1 i2) {
          | decYes eqi ➔
            tpEq2 -(noConfC1 -i1 -i2 -eqi -a1 -a2)
              (snd (inSigInj -i1 -a1 -i2 -a2 -eq))
          | decNo neqi ➔
            tpEq2 -(noConfC2 -i1 -i2 -neqi -a1 -a2)
              (neqi (fst (inSigInj -i1 -a1 -i2 -a2 -eq)))
          }
        })
    })
.
