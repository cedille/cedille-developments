import ../../Utilities/Sigma.
import ../../Utilities/Unit.
import ../../Utilities/Sum.

import ../FixIndC.
import ../InductionC.

import NatF.

module NatC.

-- defining NatC as a Church-style least fixed point of signature
-- functor NatF
NatC ◂ ★ = FixIndC · NatF NatFmap.


-- generically derived induction principle for NatC 
inductionGenNatC ◂ ∀ Q : NatC ➔ ★. 
 (Π gr : NatF · (Sigma · NatC · Q).  
   Q (inFixIndC · NatF NatFmap NatFlaw2 NatFlaw1 (NatFmap · (Sigma · NatC · Q) · NatC 
      (proj1 · NatC · Q)  gr))  ) ➔
 Π e : NatC.  Q e 
 = inductionC · NatF NatFmap NatFlaw1 NatFlaw2 NatFeq.


-- NatC constructors
zeroC ◂ NatC 
 = inFixIndC · NatF NatFmap NatFlaw2 NatFlaw1 (in1 · Unit · NatC unit).

succC ◂ NatC ➔ NatC 
 = λ n. inFixIndC · NatF NatFmap NatFlaw2 NatFlaw1 (in2 · Unit · NatC n).


-- "flat" version of induction rule for NatC stated in terms of
-- constructors zero and suc:
inductionNat ◂ ∀ Q : NatC ➔ ★. 
 Q zeroC ➔ (Π n : NatC. Q n ➔ Q (succC n)) ➔ 
 Π x : NatC.  Q x 
 = Λ Q. λ qz. λ qs. inductionGenNatC · Q 
 (λ ih. ind-Sum · Unit · (Sigma · NatC · Q) ih 
   · (λ gr : NatF · (Sigma · NatC · Q).  
         Q (inFixIndC · NatF NatFmap NatFlaw2 NatFlaw1 
             (NatFmap · (Sigma · NatC · Q) · NatC 
               (proj1 · NatC · Q) gr)))
   (λ unit' . ρ (eta-Unit unit') - qz) 
   (λ b . qs (proj1 · NatC · Q b) (proj2 · NatC · Q b))).
