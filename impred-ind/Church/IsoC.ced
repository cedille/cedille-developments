import ../Utilities/Functor.
import ../Utilities/Sigma.
import ../Utilities/Unary.
import ../Utilities/Top.

import FixC.
import FixIndC.
import PropertiesC.
import ../Mendler/ConvM.
import ../Mendler/FixM.
import ../Mendler/FixIndM.
import ConvC.

module IsoC.

-- defining the composition of conversions
-- Church (FixIndC) -> Mendler (FixIndM) -> Church (FixIndC)
ch2ch ◂ ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
 Π flaw2 : Flaw2 · F fmap. Π flaw1 : Flaw1 · F fmap. 
 FixIndC · F fmap ➔ FixIndC · F fmap 
 = Λ F. λ fmap. λ flaw2. λ flaw1. λ fix.  
 men2ch · F fmap flaw2 flaw1 (ch2men · F fmap flaw1 fix).


-- Second part of the proof that Mendler (FixIndM) is isomorphic to
-- Church (FixIndC).  Namely, that conversion Mendler -> Church ->
-- Mendler is identity.
isoC ◂ ∀ F : ★ ➔ ★. Π fmap : Fmap · F. 
 Π flaw2 : Flaw2 · F fmap. 
 Π flaw1 : Flaw1 · F fmap. 
 Π fmapEq : Feq · F fmap.
 Π fix : (FixIndC · F fmap).  
 {(ch2ch fmap flaw2 flaw1 fix) ≃ fix} 
 = Λ F. λ fmap. λ flaw2. λ flaw1. λ eq. λ fix. 
 ρ (universalC · F fmap flaw1 flaw2 eq fix ·  (FixIndC · F fmap) 
     (ch2ch · F fmap flaw2 flaw1) (inFixIndC · F fmap flaw2 flaw1) (λ e.      
 ρ+ (flaw2 · (Unary · (FixIndC · F fmap)) 
   -β{(λ z. unary (foldC' (λ fun. (inFixIndM fmap flaw2 (λ x. x) 
       (fmap uproj fun))) (uproj z)))} 
   -β{(λ x.  unary (uproj x))} ((fmap · (FixIndC · F fmap) · 
        (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{uproj} 
  -β{(λ z. ((λ z. (unary (foldC' (λ fun. (inFixIndM fmap flaw2 (λ x. x) 
      (fmap uproj fun))) (uproj z)))) ((λ x. (unary (uproj x))) z)))} 
  (fmap · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) e)) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{λ x. x} 
  -β{(λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
      (inFixIndM fmap flaw2 (λ x. x) (fmap uproj fun))) (uproj z)))) 
      ((λ x. (unary (uproj x))) z))) z)))} ((fmap · (FixIndC · F fmap) · 
       (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{λ x. x} 
  -β{(λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
       (inFixIndM fmap flaw2 (λ x. x) (fmap uproj fun)))  
       (uproj z)))) ((λ x. (unary (uproj x))) z))) z)))} 
       ((fmap · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) 
       (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{λ x. x} 
  -β{(λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
      (inFixIndM fmap flaw2 (λ x. x) 
      (fmap uproj fun))) (uproj z)))) 
      ((λ x. (unary (uproj x))) z))) z)))} 
      ((fmap · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) 
      (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{(foldM (λ f. λ fr'. 
     (inFixIndC fmap flaw2 flaw2 (fmap f fr'))))} -β{(λ z. ((λ x. x) 
     ((λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
     (inFixIndM fmap flaw2 (λ x. x) (fmap uproj fun))) (uproj z)))) 
     ((λ x. (unary (uproj x))) z))) z))) z)))} ((fmap · (FixIndC · F fmap) ·
      (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) -β{unary} 
  -β{(λ z. (foldM (λ f. λ fr'. (inFixIndC fmap flaw2 flaw2 (fmap f fr'))) 
      ((λ z. ((λ x. x) ((λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
      (inFixIndM fmap flaw2 (λ x. x) (fmap uproj fun))) (uproj z)))) 
       ((λ x. (unary (uproj x))) z))) z))) z))) z)))} 
   ((fmap · (FixIndC · F fmap) · (Unary · (FixIndC · F fmap)) 
     (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (Unary · (FixIndC · F fmap)) 
  -β{(λ ux. (unary ((λ x. x) (uproj ux))))} -β{(λ z. (unary ((λ z. (foldM (λ f. 
       λ fr'. (inFixIndC fmap flaw2 flaw2 (fmap f fr'))) ((λ z. ((λ x. x) ((λ z. 
       (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. (inFixIndM fmap flaw2 
        (λ x. x) (fmap uproj fun))) (uproj z)))) ((λ x. (unary (uproj x))) z))) z)))
         z))) z))) z)))} ((fmap · (FixIndC · F fmap) · 
        (Unary · (FixIndC · F fmap)) (unary · (FixIndC · F fmap)) e))) -
 ρ (flaw2 · (FixIndC · F fmap) 
  -β{(λ z. ((λ ux. (unary ((λ x. x) (uproj ux)))) ((λ z. (unary ((λ z. 
    (foldM (λ f. λ fr'. (inFixIndC fmap flaw2 flaw2 (fmap f fr'))) 
     ((λ z. ((λ x. x) ((λ z. (uproj ((λ z. ((λ z. (unary (foldC' (λ fun. 
     (inFixIndM fmap flaw2 (λ x. x) (fmap uproj fun))) (uproj z)))) ((λ x. 
      (unary (uproj x))) z))) z))) z))) z))) z))) z)))} -β{unary} e) -
 ρ+ (flaw2 · (FixIndC · F fmap) -β{unary} -β{(ch2ch fmap flaw2 flaw1)} e) -
 ρ (flaw2 · (FixIndC · F fmap) -β{(λ x.  unary (uproj x))} 
   -β{(λ z. (unary (ch2ch fmap flaw2 flaw2 z)))} e) - β)) -
 (reflectionC · F fmap flaw1 flaw2 eq fix).
