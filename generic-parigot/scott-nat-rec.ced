module scott-nat.

import recType.
import cast.

NatF ◂ ★ ➔ ★ = λ R : ★. ∀ X : ★. X ➔ (R ➔ X) ➔ X.

zeroF ◂ ∀ R : ★. NatF · R =
  Λ R . Λ X . λ z . λ s . z.

sucF ◂ ∀ R : ★. R ➔ NatF ·R =
  Λ R. λ r. Λ X. λ z. λ s. s r.

MonoNatF ◂ Mono · NatF = Λ X. Λ Y. λ c.
  caste -(λ nf. Λ X. λ z. λ s. nf z (λ r. s (cast -c r))) -(λ n. β).

NatFI ◂ ★ ➔ ★ = λ R : ★.
  ι x : NatF · R. ∀ P : NatF · R ➔ ★.
    P (zeroF · R) ➔ (Π r : ι x: R. NatF · R. P r.2 ➾ P (sucF r.1)) ➔
    P x.

MonoNatFI ◂ Mono · NatFI = Λ R1. Λ R2. λ c.
  caste
    -(λ n. [ cast -(MonoNatF c) n.1 , Λ P. λ z. λ s.
         n.2 · (λ x : NatF · R1. P (cast -(MonoNatF c) x)) z
           (λ r. Λ pf. s [ cast -c r.1 , cast -(MonoNatF c) r.2] -pf)])
    -(λ _. β).

Nat ◂ ★ = Rec · NatFI.

foldNat   = cast -(recFold -MonoNatFI).
unfoldNat = cast -(recUnfold -MonoNatFI).

LiftNat ◂ (Nat ➔ ★) ➔ NatF · Nat ➔ ★ =
  λ P : Nat ➔ ★. λ x : NatF · Nat.
  ∀ m : Nat. ∀ eq : {m ≃ x}. P (φ eq - m {x}).

zero ◂ Nat = foldNat [ zeroF · Nat , Λ P. λ z. λ s. z].

suc ◂ Nat ➔ Nat = λ n. foldNat
  [ sucF n , Λ P. λ z. λ s. s [ n , (unfoldNat n).1 ] -((unfoldNat n).2 z s) ].

pred ◂ Nat ➔ Nat
= λ n. (unfoldNat n).1 n (λ p. p).

inductionNat ◂ Π n : Nat. ∀ P : Nat ➔ ★. P zero ➔ (Π m : Nat. P m ➾ P (suc m)) ➔ P n
= λ n. Λ P. λ z. λ s.
  (unfoldNat n).2 · (LiftNat · P) (Λ _. Λ _. z)
    (λ r. Λ ih. Λ m. Λ eq. s r.1 -(ih -r.1 -β))
    -n -β.

caseNat ◂ Nat ➔ ∀ X : ★. X ➔ (Nat ➔ X) ➔ X
= λ n. Λ X. λ z. λ s. (unfoldNat n).1 z s.

-- Scott Nat recursor
-- ==================================================

NatRZ ◂ ★ ➔ ★ = λ X : ★. ∀ S : ★. S ➔ Nat ➔ X.

NatRS ◂ ★ ➔ ★ = λ X : ★. ∀ S : ★. (NatRZ · X ➔ S ➔ S ➔ Nat ➔ X) ➔ S ➔ Nat ➔ X.

NatR ◂ ★ = ∀ P : ★. NatRZ · P ➔ NatRS · P ➔ NatRS · P ➔ Nat ➔ P.

zeroR ◂ NatR = Λ P. λ z. λ s. λ t. λ m. z t m.
sucR ◂ NatR ➔ NatR = λ n. Λ P. λ z. λ s. λ t. λ m. s (n · P) t m.

toNatR ◂ Π n : Nat. ι x : NatR. {x ≃ n} = λ n.
  inductionNat n · (λ y : Nat. ι x : NatR. {x ≃ y})
    [zeroR , β{zero}]
    (λ m. Λ r. [ sucR (φ r.2 - r.1 {m} ) , β{suc m} ]).

toNatR! ◂ Cast · Nat · NatR =
  caste -(λ n. (toNatR n).1) -(λ n. (toNatR n).2).

recNatBase ◂ ∀ P : ★. P ➔ NatRZ · P =
  Λ P. λ p. Λ Y. λ y. λ m. p.

recNatStep ◂ ∀ P : ★. P ➔ (Nat ➔ P ➔ P) ➔ NatRS · P =
  Λ P. λ p. λ f. Λ Y. λ g. λ y. λ m.
    f (pred m) (g (recNatBase p) y y (pred m)).

recNat ◂ ∀ P : ★. Nat ➔ P ➔ (Nat ➔ P ➔ P) ➔ P
= Λ P. λ n. λ p. λ f.
  (cast -toNatR! n) (recNatBase p) (recNatStep p f) (recNatStep p f) n.

recNatCompZ ◂ ∀ X: ★. ∀ x: X. ∀ f: Nat ➔ X ➔ X. {recNat zero x f ≃ x} =
  Λ X. Λ x. Λ f. β.

recNatCompS ◂ ∀ X: ★. ∀ n: Nat. ∀ x: X. ∀ f: Nat ➔ X ➔ X.
              {recNat (suc n) x f ≃ f n (recNat n x f)} =
  Λ X. Λ n. Λ x. Λ f. β.

-- example:

add ◂ Nat ➔ Nat ➔ Nat = λ m. λ n. recNat m n (λ p. λ s. suc s).
sumFrom ◂ Nat ➔ Nat = λ m. recNat m zero (λ p. λ s. suc (add p s)).

_ ◂ ∀ m: Nat. {add zero m ≃ m} = Λ m. β.
_ ◂ ∀ m: Nat. ∀ n: Nat. {add (suc m) n ≃ suc (add m n)} = Λ m. Λ n. β.

_ ◂ {sumFrom zero ≃ zero} = β.
_ ◂ ∀ m: Nat. {sumFrom (suc m) ≃ add (suc m) (sumFrom m)} = Λ m. β.

num1 = suc zero.
num2 = suc num1.

_ ◂ {add num2 num2 ≃ suc (suc num2)} = β.
_ ◂ {sumFrom num2 ≃ suc num2} = β.


minus ◂ Nat ➔ Nat ➔ Nat
= λ m. λ n. recNat n m (λ _. λ m. pred m).

_ ◂ {minus (suc (add num2 num2)) (suc num2) ≃ num2} = β.

NatA2 ◂ ★ ➔ ★ = λ P: ★. ∀ Y: ★. NatF ·(Y ➔ Y ➔ Nat ➔ P) ➔ Y ➔ Nat ➔ P.

NatR2 ◂ ★ = ∀ P: ★. NatA2 ·P ➔ NatA2 ·P ➔ Nat ➔ P.

zeroR2 : NatR2
= Λ P. λ a1. λ a2. λ m.
  a1 ·(NatA2 ·P) (zeroF ·(NatA2 ·P ➔ NatA2 ·P ➔ Nat ➔ P)) a2 m.

sucR2 : NatR2 ➔ NatR2
= λ n. Λ P. λ a1. λ a2. λ m. a1 ·(NatA2 ·P) (sucF (n ·P)) a2 m.

test1 : ∀ P: ★. P ➔ (Nat ➔ P ➔ P) ➔ NatA2 ·P = Λ P. λ x. λ f.
  Λ Y. λ nf. λ y. λ m. nf x (λ a. f m (a y y (pred m))).

test2 : ∀ P: ★. P ➔ (Nat ➔ P ➔ P) ➔ NatR2 ➔ Nat ➔ P = Λ P. λ p. λ f. λ n. λ m.
  n (test1 p f) (test1 p f) m.

add1 ◂ NatR2 ➔ Nat ➔ Nat = λ m. λ n. test2 n (λ _. λ s. suc s) m zero.

numR2 ◂ NatR2 = sucR2 (sucR2 zeroR2).
