import functor.
import cast.
import recType.
import utils.

module scott-rec/induction
  (F : ★ ➔ ★) (fmap : Fmap · F)
  {fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

import functorThms · F fmap -fmapId -fmapCompose.

import scott/encoding ·F fmap -fmapId -fmapCompose.

IndS ◂ (S ➔ ★) ➔ ★ ➔ ★ = λ P: S ➔ ★. λ Y: ★. ι x: S. Y ➔ Y ➔ P x.

unwrapFIndS ◂ ∀ P: S ➔ ★. ∀ Y: ★. F ·(Wrap ·(IndS ·P ·Y)) ➔ F ·S
= Λ P. Λ Y. fmap ·(Wrap ·(IndS ·P ·Y)) (λ w. (unwrap w).1).

PrfAlg' ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  ∀ Y: ★. Π xs: F ·(Wrap ·(IndS ·P ·Y)). Y ➔ P (in (unwrapFIndS xs)).

InductiveS ◂ S ➔ ★ = λ s: S. ∀ P: S ➔ ★. PrfAlg' ·P ➔ PrfAlg' ·P ➔ P s.

I ◂ ★ = ι x: S. InductiveS x.

fromI ◂ Cast ·I ·S = intrCast -(λ x. x.1) -(λ x. β).

wrapIndS ◂ ∀ P: S ➔ ★. I ➔ Wrap ·(IndS ·P ·(PrfAlg' ·P))
= Λ P. λ s. wrap [ s.1 , s.2 ·P ].

inI ◂ F ·I ➔ I = λ xs.
  [ in (fcast -fromI xs)
  , Λ P. λ a1. λ a2.
    ρ ς (fmapIdFromCompose (unwrap ·I) (wrap ·I) -(λ x. β) xs) -
    a1 (fmap (wrapIndS ·P) xs) a2 ].

_ ◂ {inI ≃ in} = β.

toI' ◂ Π d: S. ι x: I. {x ≃ d} = λ d.
  wkInduction ·(λ y: S. ι x: I. {x ≃ y})
    (λ ds. Λ s. Λ eq.
    [mkI ◂ PrfS ·S ·(LiftS ·(λ y: S. ι x: I. {x ≃ y})) ➔ I
      = λ p. elimWkSigma p (λ x. Λ ih.
        [eqx  ◂ {ih ≃ x} = (ih -x.1 -β).2] -
        [ind  ◂ InductiveS x.1 = ρ ς eqx - (ih -x.1 -β).1.2 ] -
        [ x.1 , φ eqx - ind {x} ])] -
    [ inI (fmap mkI ds) , β{in (fmap unwrap ds)} ])
    d .

toI ◂ Cast ·S ·I = intrCast -(λ s. (toI' s).1) -(λ s. (toI' s).2).

repackIndS ◂ ∀ P: S ➔ ★. ∀ Y: ★. Y ➔ Wrap ·(IndS ·P ·Y) ➔ Sigma ·S ·P
= Λ P. Λ Y. λ y. λ w. mksigma (unwrap w).1 ((unwrap w).2 y y).

PrfAlg ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★. Π d: F ·(Sigma ·S ·P). P (in (fmap (proj1 ·S ·P) d)).

fromPrfAlg ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ PrfAlg' ·P
= Λ P. λ a. Λ Y. λ xs. λ y.
  ρ+ ς (fmapCompose (proj1 ·S ·P) (repackIndS ·P y) xs)
  - a (fmap (repackIndS ·P y) xs).

induction ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ Π s: S. P s
= Λ P. λ a. λ s. (elimCast -toI s).2 (fromPrfAlg a) (fromPrfAlg a).

rec ◂ ∀ X: ★. (F ·(Pair ·S ·X) ➔ X) ➔ S ➔ X = Λ X. induction ·(λ x: S. X).
