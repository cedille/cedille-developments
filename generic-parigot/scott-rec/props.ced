import functor.
import cast.
import utils.

module scott-rec/props
  (F: ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap}.

import functorThms ·F fmap -fmapId -fmapCompose.

import scott/encoding  ·F fmap -fmapId -fmapCompose.
import scott-rec/induction ·F fmap -fmapId -fmapCompose.


-- computation law for standard discriminator
case' : ∀ X: ★. (F ·S ➔ X) ➔ S ➔ X
= Λ X. λ a. case (λ xs. a (fmap (unwrap ·S) xs)).

caseComp' : ∀ X: ★. Π a: F ·S ➔ X. Π xs: F ·S. {case' a (in xs) ≃ a xs}
= Λ X. λ a. λ xs.
   ρ+ (fmapCompose (unwrap ·S) (wrap ·S) xs)
 - ρ+ (fmapId (λ x: S. unwrap (wrap x)) (λ _. β) xs)
 - β.

-- cancellation (computation) law
cancellation ◂ ∀ P: S ➔ ★. Π xs: F ·S. Π a: PrfAlg ·P.
  {induction a (in xs) ≃ a (fmap (λ x. mksigma x (induction a x)) xs)}
= Λ P. λ xs. λ alg.
  ρ+ (fmapCompose (repackIndS ·P (fromPrfAlg alg))
        (wrapIndS ·P) (fcast -toI xs)) -
  β.

-- reflection law
reflect ◂ S ➔ S = λ x: S. rec (λ xs. in (fmap (snd ·S ·S) xs)) x.
Reflection ◂ Π X: ★. X ➔ ★ = λ X: ★. λ x: X. {reflect x ≃ x}.
Ref ◂ ★ = ι x: S. Reflection ·S x.

castRef ◂ Cast ·(Sigma ·S ·(Reflection ·S)) ·(Sigma ·Ref ·(Reflection ·Ref)) =
  intrCast
    -(λ p. recSigma p (λ x. λ p. mksigma [ x , ρ+ p - β{x} ] p))
    -(λ p. etaSigma p).

refFun1 ◂ F ·(Sigma ·S ·(Reflection ·S)) ➔ F ·Ref = λ xs.
  fmap (proj1 ·Ref ·(Reflection ·Ref)) (elimCast -(MonoFunctor castRef) xs).

refFun2 ◂ Wrap ·Ref ➔ S = λ w. reflect (unwrap w).1.

refLemma1 ◂ Π xs: F ·(Wrap ·Ref).
  { fmap snd (fmap (λ x. mkpair (unwrap x) (reflect (unwrap x))) xs)
  ≃ fmap (λ x. reflect (unwrap x)) xs } = λ xs.
  ρ (fmapCompose (snd ·S ·S)
                 (λ w: Wrap ·Ref. mkpair (unwrap w).1 (reflect (unwrap w).1)) xs) -
  β.

refLemma2 ◂ Π xs: F ·Ref. {fmap refFun2 (fmap wrap xs) ≃ fmap reflect xs}
= λ xs. ρ+ (fmapCompose refFun2 (wrap ·Ref) xs) - β.

reflection ◂ Π x: S. Reflection ·S x = λ x.
  induction ·(Reflection ·S) (
    λ xs. ρ+ (refLemma1 (fmap (wrap ·Ref) (refFun1 xs))) -
          ρ+ (refLemma2 (refFun1 xs)) -
          ρ+ (fmapId (λ x: Ref. reflect x.1) (λ x. x.2) (refFun1 xs)) -
          β) x.

-- Lambek's lemmas
Lambek1 ◂ F ·S ➔ ★ = λ x: F ·S. { out (in x) ≃ x}.
lambek1 ◂ Π x: F ·S. Lambek1 x = λ x.
  fmapIdFromCompose (unwrap ·S) (wrap ·S) -(λ x. β) x.

Lambek2 ◂ S ➔ ★ = λ x: S. { in (out x) ≃ x }.
lambek2 ◂ Π x: S. Lambek2 x = λ x.
  induction ·Lambek2 (λ xs. ρ+ (lambek1 (fmap (proj1 ·S ·Lambek2) xs)) - β) x.

-- Initiality
unique ◂ FmapExt ·F fmap ➔ ∀ X: ★. Π a: F ·(Pair ·S ·X) ➔ X.
  Π h: S ➔ X. Π hom: Π xs: F ·S. {h (in xs) ≃ a (fmap (λ x. mkpair x (h x)) xs)}.
  Π x: S. {h x ≃ rec a x}
= λ fext. Λ X. λ a. λ h. λ hom. λ x.
  induction ·(λ x: S. {h x ≃ rec a x}) (
    λ xs. ρ (hom (fmap (proj1 ·S ·(λ x: S. { h x ≃ rec a x })) xs)) -
          ρ (fmapCompose ·(Sigma ·S ·(λ x: S. { h x ≃ rec a x }))
              (λ x: S. mkpair x (h x)) (λ p. proj1 p) xs) -
          ρ (cancellation ·(λ x: S. X)
              (fmap (proj1 ·S ·(λ x: S. { h x ≃ rec a x })) xs) a) -
          ρ+ (fmapCompose ·(Sigma ·S ·(λ x: S. { h x ≃ rec a x }))
               (λ x: S. mkpair x (rec a x)) (λ x. proj1 x) xs) -
          ρ+ (fext ·(Sigma ·S ·(λ x: S. { h x ≃ rec a x })) ·(Pair ·S ·X)
               (λ p. mkpair (proj1 p) (h (proj1 p)))
               (λ p. mkpair (proj1 p) (rec a (proj1 p)))
               (λ p. ρ+ (proj2 p) - β) xs) -
          β) x.

fold ◂ ∀ X: ★. (F ·X ➔ X) ➔ S ➔ X
= Λ X. λ a. λ x. rec (λ xs. a (fmap (snd ·S ·X) xs)) x .

initial ◂ FmapExt ·F fmap ➔ ∀ X: ★. Π a: F ·X ➔ X.
  Π h: S ➔ X. Π hom: Π xs: F ·S. {h (in xs) ≃ a (fmap h xs)}.
  Π x: S. {h x ≃ fold a x}
= λ fext. Λ X. λ a. λ h. λ hom. λ x .
  unique fext ·X
    (λ xs. a (fmap (snd ·S ·X) xs)) h
    (λ xs. ρ+ (fmapCompose (snd ·S ·X) (λ x: S. mkpair x (h x)) xs) - hom xs)
    x .
