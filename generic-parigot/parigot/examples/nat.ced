import cast.
import recType.
import utils/top.

module parigot/examples/nat.

zeroU       ◂ Top = β{λ z. λ s. z}.
sucU        ◂ Top = β{λ n. λ z. λ s. s n (n z s)}.
recNatU     ◂ Top = β{λ x. λ f. λ n. n x f}.
reflectNatU ◂ Top = β{recNatU zeroU (λ _. λ m. sucU m)}.

NatF ◂ ★ ➔ ★ = λ N: ★.
  ι n: ∀ X: ★. X ➔ (N ➔ X ➔ X) ➔ X. {reflectNatU n ≃ n}.

monoNatF ◂ Mono ·NatF = Λ N1. Λ N2. λ c.
  intrCast
    -(λ n. [ Λ X. λ z. λ s. n.1 z (λ m. λ x. s (elimCast -c m) x) , n.2 ])
    -(λ _. β) .

Nat ◂ ★ = Rec ·NatF.
rollNat   ◂ NatF ·Nat ➔ Nat = elimCast -(recRoll -monoNatF).
unrollNat ◂ Nat ➔ NatF ·Nat = elimCast -(recUnroll -monoNatF).

zero ◂ Nat = rollNat [ Λ X. λ z. λ s. z , β{zeroU} ].
suc  ◂ Nat ➔ Nat = λ n.
  rollNat [ Λ X. λ z. λ s. s n ((unrollNat n).1 z s)
          , ρ+ (unrollNat n).2 - β{sucU n} ].

recNat ◂ ∀ X: ★. X ➔ (Nat ➔ X ➔ X) ➔ Nat ➔ X
= Λ X. λ x. λ f. λ n. (unrollNat n).1 x f.
_ ◂ {recNat ≃ recNatU} = β.

pred ◂ Nat ➔ Nat = recNat zero (λ m. λ _. m).

InductiveNat ◂ Nat ➔ ★ = λ x: Nat.
  ∀ P: Nat ➔ ★. P zero ➔ (Π n: Nat. P n ➔ P (suc n)) ➔ P x.

NatI ◂ ★ = ι x: Nat. InductiveNat x.

zeroI ◂ NatI = [ zero , Λ P. λ z. λ s. z ].
sucI  ◂ NatI ➔ NatI = λ n. [ suc n.1 , Λ P. λ z. λ s. s n.1 (n.2 z s) ].

reflectNat ◂ Nat ➔ NatI = recNat zeroI (λ _. sucI).
_ : {reflectNat ≃ reflectNatU} = β.

toNatI ◂ Cast ·Nat ·NatI = intrCast -reflectNat -(λ n. (unrollNat n).2).

inductionNat ◂ ∀ P: Nat ➔ ★. P zero ➔ (Π n: Nat. P n ➔ P (suc n)) ➔ Π n: Nat. P n
= Λ P. λ z. λ s. λ n.
  (elimCast -toNatI n).2 z s.

_ ◂ {inductionNat ≃ recNat} = β.

-- iteration
add ◂ Nat ➔ Nat ➔ Nat = λ m. λ n. recNat n (λ _. λ s. suc s) m .

-- recursion
sumFrom ◂ Nat ➔ Nat = recNat zero (λ m. λ s. add (suc m) s).

-- proof
addZRight ◂ Π n: Nat. {add n zero ≃ n}
= inductionNat ·(λ x: Nat. {add x zero ≃ x}) β (λ m. λ ih. ρ+ ih - β).
