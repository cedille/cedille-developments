import functor.
import utils.

module parigot/props
  (F: ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap}.

import parigot/encoding ·F fmap -fmapId -fmapCompose.
import functorThms ·F fmap -fmapId -fmapCompose.

cancellation ◂ ∀ X: ★. Π xs: F ·P. Π a: AlgP ·P ·X.
  { rec a (in xs) ≃ a (fmap (λ r. mkpair r (rec a r)) xs) } =
  Λ X. λ xs. λ a. β.

reflection ◂ Π x: P. {reflectP x ≃ x} = λ x. (unrollP x).2.

lambek1 ◂ Π xs: F ·P. {out (in xs) ≃ xs} =
  λ xs. ρ (fmapFstPair (λ x: P. rec (fmap (fst ·P ·(F ·P))) x) xs) - β.

lambek2 ◂ Π r: P. {in (out r) ≃ r} =
  λ r. induction ·(λ x: P. {in (out x) ≃ x})
    (λ rs. ρ (lambek1 (fmap (proj1 ·P ·(λ x: P. {in (out x) ≃ x})) rs)) - β) r.

unique ◂ FmapExt ·F fmap ➔ ∀ X: ★. Π a: AlgP ·P ·X. Π h: P ➔ X.
          Π hom: Π xs: F ·P. {h (in xs) ≃ a (fmap (λ r. mkpair r (h r)) xs)}.
          Π x: P. {h x ≃ rec a x} =
  λ fext. Λ X. λ a. λ h. λ hom. λ x.
    induction ·(λ x: P. {h x ≃ rec a x}) (
      λ xs. ρ+ (hom (fmap (proj1 ·P ·(λ x: P. {h x ≃ rec a x})) xs)) -
            ρ+ (fmapCompose
                  (λ r: P. mkpair r (h r))
                  (λ p: Sigma ·P ·(λ x: P. {h x ≃ rec a x}). proj1 p) xs) -
            ρ+ (fmapCompose
                  (λ r: P. mkpair r (rec a r))
                  (λ p: Sigma ·P ·(λ x: P. {h x ≃ rec a x}). proj1 p) xs) -
            ρ+ (fext ·(Sigma ·P ·(λ x: P. {h x ≃ rec a x})) ·(Pair ·P ·X)
                  (λ p. mkpair (proj1 p) (h (proj1 p)))
                  (λ p. mkpair (proj1 p) (rec a (proj1 p)))
                  (λ p. ρ+ (proj2 p) - β) xs) -
            β) x.

fold ◂ ∀ X: ★. (F ·X ➔ X) ➔ P ➔ X
= Λ X. λ a. rec (λ xs. a (fmap (snd ·P ·X) xs)) .

initial ◂ FmapExt ·F fmap ➔ ∀ X: ★. Π a: F ·X ➔ X. Π h: P ➔ X.
 Π hom: Π xs: F ·P. {h (in xs) ≃ a (fmap h xs)}.
 Π x: P. {h x ≃ fold a x}
= λ fext. Λ X. λ a. λ h. λ hom.
  unique fext ·X
    (λ xs. a (fmap (snd ·P ·X) xs)) h
    (λ xs. ρ+ (fmapCompose (snd ·P ·X) (λ x: P. mkpair x (h x)) xs) - hom xs) .
