{- Parigot-encoded inductive datatypes.

   This development is generic in a functor.

   The interface you should use is:

   R         - the inductive type
   in/out    - constructing/destructing data of type R
   induction - dependent elimination on R
   recursion - non-dependent elimination on R (special case of induction, provided for convenience)
   -}

import functor.
import utils.

module parigot/encoding
  (F: ★ ➔ ★) (fmap: Fmap ·F)
  {fmapId: FmapId ·F fmap} {fmapCompose: FmapCompose ·F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId -fmapCompose.

recU     ◂ Top = β{λ alg. λ x. x alg}.
inU      ◂ Top = β{λ xs. λ alg. alg (fmap (λ x. mkpair x (recU alg x)) xs)}.
reflectU ◂ Top = β{recU (λ xs. inU (fmap snd xs))}.

AlgP ◂ ★ ➔ ★ ➔ ★ = λ P: ★. λ X: ★. F ·(Pair ·P ·X) ➔ X.
PF  ◂ ★ ➔ ★ = λ P: ★. ι x: ∀ X: ★. AlgP ·P ·X ➔ X. {reflectU x ≃ x}.

castFPair1 ◂ ∀ P1: ★. ∀ P2: ★. Cast ·P1 ·P2 ➔
  ∀ X: ★. Cast ·(F ·(Pair ·P1 ·X)) ·(F ·(Pair ·P2 ·X))
= Λ P1. Λ P2. λ c. Λ X. MonoFunctor (MonoPair1 c).

monoPF ◂ Mono ·PF = Λ P1. Λ P2. λ c.
  intrCast -(λ x. [ Λ X. λ alg. x.1 (λ xs. alg (elimCast -(castFPair1 c ·X) xs))
                  , x.2 ])
           -(λ x. β).

P ◂ ★ = Rec ·PF.
rollP   ◂ PF ·P ➔ P = elimCast -(recRoll -monoPF).
unrollP ◂ P ➔ PF ·P = elimCast -(recUnroll -monoPF).

recursion ◂ ∀ X: ★. AlgP ·P ·X ➔ P ➔ X =
  Λ X. λ alg. λ x. (unrollP x).1 alg.
_ : {recursion ≃ recU} = β.

inP1 ◂ F ·P ➔ ∀ X: ★. AlgP ·P ·X ➔ X =
  λ xs. Λ X. λ alg. alg (fmap (λ x: P. mkpair x (recursion alg x)) xs).

reflectionInP1 ◂ Π xs: F ·P. {reflectU (inP1 xs) ≃ inP1 xs} =
  λ xs. ρ+ (fmapCompose ·P (snd ·P ·Top) (λ x. mkpair x (β{reflectU x})) xs) -
        ρ+ (fmapId ·P ·Top (λ x. β{reflectU x}) (λ x. (unrollP x).2) xs) -
        β.

in ◂ F ·P ➔ P = λ xs. rollP [inP1 xs , ρ (reflectionInP1 xs) - β{inP1 xs}].
_ : {in ≃ inU} = β.

out ◂ P ➔ F ·P = recursion (fmap (fst ·P ·(F ·P))).

PrfAlgP ◂ (P ➔ ★) ➔ ★ = λ Q: P ➔ ★.
  Π xs: F ·(Sigma ·P ·Q). Q (in (fmap (proj1 ·P ·Q) xs)).

Inductive ◂ P ➔ ★ = λ x: P. ∀ Q: P ➔ ★. PrfAlgP ·Q ➔ Q x.
IP ◂ ★ = ι x: P. Inductive x.

inIP1 ◂ F ·IP ➔ P = λ xs. in (fcast -(intrCast ·IP ·P -(λ x. x.1) -(λ x. β)) xs).

inIP2 ◂ Π xs: F ·IP. Inductive (inIP1 xs) = λ xs. Λ Q. λ alg.
  ρ  ς (fmapId (λ x: IP. x.1) (λ x. β) xs) -
  ρ+ ς (fmapProj1Sigma ·IP ·P ·Q (λ x. x.1) (λ x. x.2 alg) xs) -
  alg (fmap (λ x: IP. mksigma x.1 (x.2 ·Q alg)) xs).

inIP ◂ F ·IP ➔ IP = λ xs. [ inIP1 xs , inIP2 xs].
_ : {in ≃ inIP} = β.

reflectP ◂ P ➔ IP = λ x. recursion (λ xs. inIP (fmap (snd ·P ·IP) xs)) x.

castP ◂ Cast ·P ·IP = intrCast -reflectP -(λ r. (unrollP r).2).

induction ◂ ∀ Q: P ➔ ★. PrfAlgP ·Q ➔ Π x: P. Q x =
  Λ Q. λ alg. λ x. (elimCast -castP x).2 alg.

_ : {reflectP ≃ reflectU} = β.
_ : {induction ≃ recursion} = β.

