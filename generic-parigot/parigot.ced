{- Parigot-encoded inductive datatypes.

   This development is generic in a functor.

   The interface you should use is:

   C         - the inductive type
   in/out    - constructing/destructing data of type C
   Induction - dependent elimination on C
   Recursion - non-dependent elimination on C (special case of Induction, provided for convenience)
   -}

import functor.

module Parigot(F : ★ ➔ ★)(fmap : Fmap · F){fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId.
import public sigma.
import top.

inU ◂ Top = β{λ d . λ a . a (fmap (λ x . mkpair x (x a)) d)} .
inAlgU ◂ Top = β{λ d . inU (fmap snd d) }.
toDU ◂ Top = β{λ c . c inAlgU}.

Alg ◂ ★ ➔ ★ ➔ ★ = λ C : ★ . λ X : ★ . F · (Pair · C · X) ➔ X .
  
CF ◂ ★ ➔ ★ = λ C : ★ . ι c : ∀ X : ★ . Alg · C · X ➔ X. { toDU c ≃ c } .

MonoCF ◂ RecFunctor · CF =
  Λ X . Λ Y . λ c .
    [ λ d . [ Λ Z . λ a . d.1 · Z (λ fxz . a (cast -(FunctorMono · (Pair · X · Z) · (Pair · Y · Z)
                                                   (caste (λ p . mkpair (cast -c (fst p)) (snd p)) -
                                                   (λ p . θ<p> (ind-pair p) (λ a . λ b . β)))) fxz)) , d.2],
                                                  β].

C ◂ ★ = Rec · CF .

foldC ◂ CF · C ➔ C = cast -(recFold -MonoCF).
unfoldC ◂ C ➔ CF · C = cast -(recUnfold -MonoCF).

in ◂ F · C ➔ C =
  λ d . foldC [Λ X . λ a . a (fmap (λ x : C . mkpair x ((unfoldC x).1 a)) d),
               ρ+ (fmapCompose -(snd · C · C) -(λ x : C . mkpair x (φ ς (unfoldC x).2 - x {x inAlgU})) d) -
               ρ (fmapId · C · Top  -(λ x . β{snd (mkpair x (x inAlgU))}) -(Λ x . ρ+ (unfoldC x).2 - β) d) -
               β{λ a . a (fmap (λ x . mkpair x (x a)) d)}] .

out ◂ C ➔ F · C =
  λ d . (unfoldC d).1 · (F · C) (fmap (fst · C · (F · C))).

PfAlg ◂ (C ➔ ★) ➔ ★ = λ P : C ➔ ★ .
  Π d : F · (Sigma · C · P) . P (in (fmap (proj1 · C · P) d)) .

Inductive ◂ C ➔ ★ = λ c : C .
  ∀ P : C ➔ ★ .
  PfAlg · P ➔
  P c.

D ◂ ★ = ι x : C . Inductive x.

in' ◂ F · D ➔ D =
  λ d .
    [ in (φ (fmapId · D · C -(λ x : D . x.1) -(Λ x . β) d) -(fmap (λ x : D . x.1) d) { d }) ,
      Λ P . λ a . ρ ς (χ { fmap proj1 (fmap (λ d . mksigma d (d a)) d) ≃ d } -
                       ρ (fmapCompose -(proj1 · C · P) -(λ d : D . mksigma · C · P d.1 (d.2 · P a)) d) -
                       fmapId · D · D -(λ x . x) -(Λ x . β) d) -
                  a (fmap (λ d : D . mksigma · C · P d.1 (d.2 · P a)) d) ].

inAlg ◂ Alg · C · D =
  λ d . in' (fmap (snd · C · D) d) .

toD ◂ C ➔ D =
  λ c . (unfoldC c).1 · D inAlg.

reflection ◂ Π c : C . { toD c ≃ c } =
  λ c .  (unfoldC c).2 .

castToD ◂ Cast · C · D = caste toD -reflection.

Induction ◂ Π x : C . Inductive x = λ x . (cast -castToD x).2.

Recursion ◂ Π x : C . ∀ X : ★ . Alg · C · X ➔ X = λ x . (unfoldC x).1.

InductionId ◂ { Induction ≃ λ x . x } = β.

lambek1 ◂ ∀ d : F · C . { out (in d) ≃ d } =
  Λ d . χ { fmap (fst · C · (F · C)) (fmap (λ x : C . mkpair x ((unfoldC x).1 (fmap (fst · C · (F · C))))) d) ≃ d } -
        ρ (fmapCompose -(fst · C · (F · C)) -(λ x : C . mkpair x ((unfoldC x).1 (fmap (fst · C · (F · C))))) d) -
        ρ (fmapId · C · C -(λ x . x) -(Λ x . β) d) - β.

lambek2 ◂ ∀ c : C . { in (out c) ≃ c } =
  Λ c . ρ (Induction c · (λ c : C . { in (out c) ≃ c })
            (λ d . ρ (lambek1 -(fmap (proj1 · C · (λ c : C . {in (out c) ≃ c})) d)) - β)) -
        β.
