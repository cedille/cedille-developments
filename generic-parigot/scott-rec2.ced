import functor.

module scott-rec
  (F : ★ ➔ ★) (fmap : Fmap · F)
  {fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId -fmapCompose.
import wksigma.
import top.

import scott2 ·F fmap -fmapId -fmapCompose.
import parigot as P ·F fmap -fmapId -fmapCompose.
import sigma.

unwrapIotaAlg ◂ ∀ Y: ★. ∀ P: S ➔ ★. Wrap ·(ι x: S. Y ➔ Y ➔ P x) ➔ S =
  Λ P. Λ Y. λ w. (unwrap w).1.

PrfAlgSR ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  ∀ Y: ★. Π d: F ·(Wrap ·(ι x: S. Y ➔ Y ➔ P x)). Y ➔
  P (in (fmap (unwrapIotaAlg ·Y ·P) d)).

InductiveSR ◂ S ➔ ★ = λ s: S.
  ∀ P: S ➔ ★. PrfAlgSR ·P ➔ PrfAlgSR ·P ➔ P s.

SInd ◂ ★ = ι x: S. InductiveSR x.

castSInd2S ◂ Cast ·SInd ·S =
  caste -(λ x. x.1) -(λ x. β).

wrapSInd ◂ ∀ P: S ➔ ★. SInd ➔ Wrap ·(ι x: S. PrfAlgSR ·P ➔ PrfAlgSR ·P ➔ P x) =
  Λ P. λ s. wrap [ s.1 , s.2 ·P ].

inSInd ◂ F ·SInd ➔ SInd = λ xs.
  [ in (fmap-cast castSInd2S xs)
  , Λ P. λ alg1. λ alg2.
    ρ ς (fmapUnwrapWrapId xs) - alg1 (fmap (wrapSInd ·P) xs) alg2 ].

_ : {inSInd ≃ in} = β.

toSInd ◂ Π d: S. ι x: SInd. {x ≃ d} = λ d.
  Induction d ·(λ y: S. ι x: SInd. {x ≃ y})
    (λ ds. Λ s. Λ eq.
    [unwrapSInd ◂ PreSPlus ·S ·(LiftS ·(λ y: S. ι x: SInd. {x ≃ y})) ➔ SInd
      = λ p. rec-wksigma p (λ t. Λ ih.
        [eqt  : {ih ≃ t} = (ih -t.1 -β).2] -
        [indt : InductiveSR t.1 = ρ ς eqt - (ih -t.1 -β).1.2 ] -
        [ t.1 , φ eqt - indt {t} ])] -
    [ inSInd (fmap unwrapSInd ds) , β{in (fmap unwrap ds)} ]).

castS2SInd ◂ Cast ·S ·SInd =
  caste -(λ s. (toSInd s).1) -(λ s. (toSInd s).2).

PrfAlgP ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  Π d: F ·(Sigma ·S ·P). P (in (fmap (proj1 ·S ·P) d)).

wrapSInd2Pair ◂ ∀ P: S ➔ ★. ∀ Y: ★. Y ➔ Wrap ·(ι x: S. Y ➔ Y ➔ P x) ➔ Sigma ·S ·P =
  Λ P. Λ Y. λ y. λ w. mksigma (unwrap w).1 ((unwrap w).2 y y).

fromPrfAlgP ◂ ∀ P: S ➔ ★. PrfAlgP ·P ➔ PrfAlgSR ·P =
  Λ P. λ a. Λ Y. λ sf. λ y.
  ρ+ ς (fmapCompose -(proj1 ·S ·P) -(wrapSInd2Pair ·P y) sf)
  - a (fmap (wrapSInd2Pair ·P y) sf).

InductionSR ◂ ∀ P: S ➔ ★. PrfAlgP ·P ➔ Π s: S. P s =
  Λ P. λ alg. λ s. (cast -castS2SInd s).2 (fromPrfAlgP alg) (fromPrfAlgP alg).

RecursionSR ◂ ∀ X: ★. PrfAlgP ·(λ x: S. X) ➔ Π s: S. X =
  Λ X. InductionSR ·(λ x: S. X).

InductionSRComp ◂ ∀ P: S ➔ ★. Π alg: PrfAlgP ·P. Π sf: F ·S.
  {InductionSR alg (in sf) ≃ alg (fmap (λ x. mksigma x (InductionSR alg x)) sf)} =
  Λ P. λ alg. λ sf.
  ρ+ (fmapCompose -(wrapSInd2Pair ·P (fromPrfAlgP alg))
                  -(wrapSInd ·P) (fmap-cast castS2SInd sf)) -
  β.
