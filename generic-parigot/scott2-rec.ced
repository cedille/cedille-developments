import functor.

module scott-rec
  (F : ★ ➔ ★) (fmap : Fmap · F)
  {fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId -fmapCompose.
import wksigma.
import top.

import scott2 ·F fmap -fmapId -fmapCompose.
-- import parigot2 as P ·F fmap -fmapId -fmapCompose.
import sigma.

PreSR ◂ ★ ➔ (S ➔ ★) ➔ ★ = λ A: ★. λ P: S ➔ ★. ι x: S. A ➔ A ➔ P x.

PrfAlgSR ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  ∀ A: ★. Π d: F ·(Wrap ·(PreSR ·A ·P)). A ➔
  P (in (fmap (λ x: Wrap ·(PreSR ·A ·P). (unwrap x).1) d)).

InductiveSR ◂ S ➔ ★ = λ x: S.
  ∀ P: S ➔ ★. PrfAlgSR ·P ➔ PrfAlgSR ·P ➔ P x.

SR ◂ ★ = ι x: S. InductiveSR x.

fromSR ◂ Cast ·SR ·S = intrCast -(λ x. x.1) -(λ _. β).

wrapSR ◂ ∀ P: S ➔ ★. SR ➔ Wrap ·(PreSR ·(PrfAlgSR ·P) ·P) =
  Λ P. λ s. wrap [ s.1 , s.2 ·P ].

inSR ◂ F ·SR ➔ SR = λ xs.
  [ in (fmap-cast -fromSR xs)
  , Λ P. λ alg1. λ alg2.
    ρ ς (fmapId (λ x: SR. unwrap (wrap x)) (λ x . β) xs) -
    ρ ς (fmapCompose (unwrap ·SR) (wrap ·SR) xs) -
    alg1 (fmap (wrapSR ·P) xs) alg2 ].

_ : {inSR ≃ in} = β.

toSR' ◂ Π s: S. ι x: SR. {x ≃ s} = λ s.
  wkInduction s ·(λ y: S. ι x: SR. {x ≃ y})
    (λ ds. Λ s. Λ eq.
    [uw ◂ PrfS ·S ·(Lift ·(λ y: S. ι x: SR. {x ≃ y})) ➔ SR
      = λ p. rec-wksigma p (λ t. Λ ih.
        [eqt  ◂ {ih ≃ t} = (ih -t.1 -β).2] -
        [indt ◂ InductiveSR t.1 = ρ ς eqt - (ih -t.1 -β).1.2 ] -
        [ t.1 , φ eqt - indt {t} ])] -
    [ inSR (fmap uw ds) , β{preIn (fmap uw ds)} ]).

toSR ◂ Cast ·S ·SR =
  intrCast -(λ s. (toSR' s).1) -(λ s. (toSR' s).2).

PrfAlg ◂ (S ➔ ★) ➔ ★ = λ P: S ➔ ★.
  Π xs: F ·(Sigma ·S ·P). P (in (fmap (proj1 ·S ·P) xs)).

pairSR ◂ ∀ P: S ➔ ★. ∀ A: ★. A ➔ Wrap ·(PreSR ·A ·P) ➔ Sigma ·S ·P =
  Λ P. Λ Y. λ y. λ w. mksigma (unwrap w).1 ((unwrap w).2 y y).

fromPrfAlg ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ PrfAlgSR ·P =
  Λ P. λ alg. Λ A. λ sf. λ a.
  ρ+ ς (fmapCompose (proj1 ·S ·P) (pairSR ·P a) sf) -
  alg (fmap (pairSR ·P a) sf).

induction ◂ ∀ P: S ➔ ★. PrfAlg ·P ➔ Π s: S. P s =
  Λ P. λ alg. λ s. (elimCast -toSR s).2 (fromPrfAlg alg) (fromPrfAlg alg).

recursion ◂ ∀ X: ★. PrfAlg ·(λ x: S. X) ➔ S ➔ X =
  Λ X. induction ·(λ x: S. X).
