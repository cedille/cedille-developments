module scott/examples/nat1.

import recType.
import cast.

NatF ◂ ★ ➔ ★ = λ N: ★. ∀ X: ★. X ➔ (N ➔ X) ➔ X.

zeroF ◂ ∀ N: ★. NatF ·N = Λ R. Λ X. λ z. λ s. z.
sucF ◂ ∀ N: ★. N ➔ NatF ·N = Λ R. λ r. Λ X. λ z. λ s. s r.

monoNatF ◂ Mono ·NatF = Λ X. Λ Y. λ c.
  intrCast -(λ nf. Λ X. λ z. λ s. nf z (λ r. s (elimCast -c r))) -(λ n. β).

WkInductiveNatF : Π N: ★. NatF ·N ➔ ★ = λ N: ★. λ n: NatF ·N.
  ∀ P: NatF ·N ➔ ★. P (zeroF ·N) ➔
  (Π m: (ι x: N. NatF ·N). P m.2 ➾ P (sucF m.1)) ➔ P n.

NatFI ◂ ★ ➔ ★ = λ N: ★. ι x: NatF ·N. WkInductiveNatF ·N x.

monoNatFI ◂ Mono ·NatFI = Λ R1. Λ R2. λ c.
  intrCast
    -(λ n. [ elimCast -(monoNatF c) n.1
           , Λ P. λ z. λ s.
             n.2 ·(λ x: NatF ·R1. P (elimCast -(monoNatF c) x)) z
               (λ r. Λ pf. s [ elimCast -c r.1 , elimCast -(monoNatF c) r.2] -pf) ])
    -(λ _. β).

Nat ◂ ★ = Rec ·NatFI.
rollNat   = elimCast -(recRoll -monoNatFI).
unrollNat = elimCast -(recUnroll -monoNatFI).

zeroFI ◂ WkInductiveNatF ·Nat (zeroF ·Nat) = Λ P. λ z. λ s. z.
zero ◂ Nat = rollNat [ zeroF ·Nat , zeroFI ] .

sucFI ◂ Π n: Nat. WkInductiveNatF ·Nat (sucF n)
= λ n. Λ P. λ z. λ s. s [ n , (unrollNat n).1 ] -((unrollNat n).2 z s).
suc ◂ Nat ➔ Nat = λ n. rollNat [ sucF n , sucFI n ] .

caseNat ◂ ∀ X: ★. X ➔ (Nat ➔ X) ➔ Nat ➔ X
= Λ X. λ z. λ s. λ n. (unrollNat n).1 z s .

pred ◂ Nat ➔ Nat = caseNat zero (λ p. p) .
_ ◂ Π x: Nat. { pred (suc x) ≃ x } = λ x. β.

LiftNat ◂ (Nat ➔ ★) ➔ NatF ·Nat ➔ ★
= λ P: Nat ➔ ★. λ x: NatF ·Nat. ∀ m: Nat. ∀ eq: {m ≃ x}. P (φ eq - m {x}).

wkInductionNat ◂ ∀ P: Nat ➔ ★.
  P zero ➔ (Π m: Nat. P m ➾ P (suc m)) ➔ Π n: Nat. P n
= Λ P. λ z. λ s. λ n.
  (unrollNat n).2 ·(LiftNat ·P) (Λ _. Λ _. z)
    (λ r. Λ ih. Λ m. Λ eq. s r.1 -(ih -r.1 -β)) -n -β.
_ ◂ {wkInductionNat ≃ caseNat} = β .

_ ◂ Π n: Nat. {n ≃ n zero suc} = λ n.
  wkInductionNat ·(λ x: Nat. {x ≃ x zero suc}) β (λ m. Λ pf. β) n .
