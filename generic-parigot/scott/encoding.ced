{- Scott-encoded inductive datatypes.


   This development is generic in a functor.

   The interface you should use is:

   S         - the inductive type
   in/out    - constructing/destructing data of type C
   Induction - dependent elimination on C
   -}

import functor.
import utils.

module scott/encoding
  (F : ★ ➔ ★) (fmap : Fmap · F)
  {fmapId : FmapId · F fmap} {fmapCompose : FmapCompose · F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId -fmapCompose.

AlgS ◂ ★ ➔ ★ ➔ ★ = λ S: ★. λ X: ★. F ·(Wrap ·S) ➔ X.
SF ◂ ★ ➔ ★ = λ S: ★. ∀ X: ★. AlgS ·S ·X ➔ X.

monoSF ◂ Mono ·SF = Λ X. Λ Y. λ c.
  intrCast -(λ d. Λ Z. λ a. d (λ df. a (fcast -(castWrap c) df))) -(λ _. β) .

PreS ◂ ★ ➔ ★ = λ S: ★. ι x: S. SF ·S.
PrfS ◂ Π S: ★. (SF ·S ➔ ★) ➔ ★
= λ S: ★. λ P: SF ·S ➔ ★. WkSigma ·(PreS ·S) ·(λ x: PreS ·S. P x.2).

preIn ◂ ∀ S: ★. F ·(PreS ·S) ➔ SF ·S
= Λ S. λ xs. Λ X. λ alg. alg (fmap (λ x: PreS ·S. wrap x.1) xs).

monoPreS ◂ Mono ·PreS = Λ X. Λ Y. λ c.
  intrCast -(λ x. [ elimCast -c x.1 , elimCast -(monoSF c) x.2 ]) -(λ _. β) .

monoPrfS ◂ ∀ X: ★. ∀ Y: ★. Π c: Cast ·X ·Y. ∀ P: SF ·Y ➔ ★.
  Cast ·(PrfS ·X ·(λ x: SF ·X. P (elimCast -(monoSF c) x))) ·(PrfS ·Y ·P)
= Λ X. Λ Y. λ c. Λ P.
  intrCast
    -(λ x. elimWkSigma x (λ a. Λ p. intrWkSigma (elimCast -(monoPreS c) a) -p))
    -(λ x. etaWkSigma x).

WkPrfAlgS ◂ Π S: ★. (SF ·S ➔ ★) ➔ ★
= λ S: ★. λ P: SF ·S ➔ ★. Π xs: F ·(PrfS ·S ·P).
    P (preIn (fmap (λ x: PrfS ·S ·P. wkproj1 x) xs)).

WkInductiveS ◂ Π S: ★. SF ·S ➔ ★ = λ S: ★. λ x: SF ·S.
  ∀ P: SF ·S ➔ ★. WkPrfAlgS ·S ·P ➔ P x.

WkIF ◂ ★ ➔ ★ = λ S: ★. ι x: SF ·S. WkInductiveS ·S x.

monoWkIF ◂ Mono ·WkIF = Λ X. Λ Y. λ c.
  intrCast
    -(λ t. [ elimCast -(monoSF c) t.1
           , Λ P. λ a. t.2 ·(λ s: SF ·X. P (elimCast -(monoSF c) s))
                         (λ tf. a (fcast -(monoPrfS c ·P) tf)) ])
    -(λ _. β).

S ◂ ★ = Rec ·WkIF.
rollS   ◂ WkIF ·S ➔ S = elimCast -(recRoll -monoWkIF).
unrollS ◂ S ➔ WkIF ·S = elimCast -(recUnroll -monoWkIF).

toPreS ◂ Cast ·S ·(PreS ·S) = intrCast -(λ x. [ x , (unrollS x).1 ]) -(λ _. β).

case ◂ ∀ X: ★. AlgS ·S ·X ➔ S ➔ X
= Λ X. λ a. λ x. (unrollS x).1 a.

in ◂ F ·S ➔ S = λ xs.
  rollS [ preIn ·S (fcast -toPreS xs)
       , Λ P. λ a.
         ρ+ ς (fmapId (λ x: S. unwrap (wrap x)) (λ _ . β) xs) -
         ρ+ ς (fmapCompose (unwrap ·S) (wrap ·S) xs) -
          a (fmap ·S ·(PrfS ·S ·P)
               (λ x. intrWkSigma (toPreS.1 x) -((unrollS x).2 a)) xs) ].

caseComp : ∀ X: ★. Π a: AlgS ·S ·X. Π xs: F ·S. {case a (in xs) ≃ a (fmap wrap xs) }
= Λ X. λ a. λ xs. β.

out ◂ S ➔ F ·S = case (λ xs. fmap (unwrap ·S) xs).

LiftS ◂ (S ➔ ★) ➔ SF ·S ➔ ★ = λ P: S ➔ ★. λ x: SF ·S.
  ∀ m: S. ∀ eq: {m ≃ x}. P (φ eq - m {x}).

wkInduction ◂ ∀ P: S ➔ ★. WkPrfAlgS ·S ·(LiftS ·P) ➔ Π s: S. P s
= Λ P. λ a. λ x. (unrollS x).2 ·(LiftS ·P) a -x -β.

_ ◂ {wkInduction ≃ case} = β.
