{- Scott-encoded inductive datatypes.


   This development is generic in a functor.

   The interface you should use is:

   S         - the inductive type
   in/out    - constructing/destructing data of type C
   Induction - dependent elimination on C
   -}

import functor.

module Scott(F : ★ ➔ ★)(fmap : Fmap · F){fmapId : FmapId · F fmap}{fmapCompose : FmapCompose · F fmap}.

import recType.
import cast.
import functorThms · F fmap -fmapId -fmapCompose.
import wksigma.
import top.

Alg ◂ ★ ➔ ★ ➔ ★ = λ C: ★. λ X: ★. F ·(Wrap ·C) ➔ X.
SF ◂ ★ ➔ ★ = λ C: ★. ∀ X: ★. Alg ·C ·X ➔ X.

monoSF ◂ Mono ·SF =
  Λ X. Λ Y. λ c. [λ d. Λ Z. λ a. d (λ df. a (fmap-cast -(castWrap c) df)) , β ].

PreS ◂ ★ ➔ ★ = λ C: ★. ι x: C. SF ·C.
PreSPlus ◂ Π C: ★. (SF ·C ➔ ★) ➔ ★ =
  λ C: ★. λ P: SF ·C ➔ ★. WkSigma ·(PreS ·C) ·(λ x: PreS ·C. P x.2).

monoPreS : Mono · PreS = Λ X. Λ Y. λ c. [ λ x. [ elimCast -c x.1 , elimCast -(monoSF c) x.2] , β ].

monoPreSPlus : ∀ X: ★. ∀ Y: ★. Π c: Cast · X · Y. ∀ P: SF · Y ➔ ★.
  Cast ·(PreSPlus · X · (λ x: SF · X. P (elimCast -(monoSF c) x))) · (PreSPlus · Y · P) =
  Λ X. Λ Y. λ c. Λ P. intrCast
    -(λ x. rec-wksigma x (λ a. Λ p. mkwksigma (elimCast -(monoPreS c) a) -p))
    -(λ x. θ<x> (ind-wksigma x) (λ a. Λ p. β)).

preIn ◂ ∀ C: ★. F ·(PreS ·C) ➔ SF ·C =
  Λ C. λ xs. Λ X. λ alg. alg (fmap (λ x: PreS ·C. wrap x.1) xs).

PrfAlgGen ◂ Π C: ★. (SF ·C ➔ ★) ➔ ★ =
  λ C: ★. λ P: SF ·C ➔ ★. Π xs: F ·(PreSPlus ·C ·P).
    P (preIn (fmap ·(PreSPlus ·C ·P) ·(PreS ·C) (λ x. wkproj1 x) xs)).

Inductive ◂ Π C: ★. SF ·C ➔ ★ = λ C: ★. λ x: SF ·C. ∀ P: SF ·C ➔ ★. PrfAlgGen ·C ·P ➔ P x.

IF ◂ ★ ➔ ★ = λ C: ★. ι x: SF ·C. Inductive ·C x.

monoIF ◂ Mono ·IF = Λ X. Λ Y. λ c.
  intrCast
    -(λ t. [ elimCast -(monoSF c) t.1
           , Λ P. λ a. t.2 ·(λ s: SF ·X. P (elimCast -(monoSF c) s))
                         (λ tf. a (fmap-cast -(monoPreSPlus c ·P) tf)) ])
    -(λ _. β).

S ◂ ★ = Rec · IF.
roll   ◂ IF ·S ➔ S = elimCast -(recRoll -monoIF).
unroll ◂ S ➔ IF ·S = elimCast -(recUnroll -monoIF).


{-
monoSF ◂ Mono · SF =
  Λ X. Λ Y. λ c. [λ d. Λ Z. λ a. d (λ df. a (fmap-cast -(castWrap c) df)) , β ].

preIn ◂ ∀ C: ★. F · C ➔ SF · C = Λ C. λ fc. Λ X. λ a. a (fmap (wrap · C) fc).

PreS ◂ ★ ➔ ★ = λ C: ★. ι x: C. SF · C.
PreSPlus ◂ Π C: ★. (SF · C ➔ ★) ➔ ★ =
  λ C: ★. λ P: SF · C ➔ ★. WkSigma · (PreS · C) · (λ x: PreS · C. P x.2).

toC ◂ ∀ C: ★. ∀ P: SF · C ➔ ★. PreSPlus · C · P ➔ C =
  Λ C. Λ P. λ p. (wkproj1 p).1.

PrfAlgS ◂ Π C: ★. (SF · C ➔ ★) ➔ ★ = λ C: ★. λ P: SF · C ➔ ★.
  Π d: F · (PreSPlus · C · P). P (preIn (fmap (toC · C · P) d)).

TF ◂ ★ ➔ ★ = λ C: ★. ι x: SF · C. ∀ P: SF · C ➔ ★. PrfAlgS · C · P ➔ P x.

MonoPreS : Mono · PreS = Λ X. Λ Y. λ c. [ λ x. [ elimCast -c x.1 , elimCast -(monoSF c) x.2] , β ].

MonoPreSPlus : ∀ X: ★. ∀ Y: ★. Π c: Cast · X · Y. ∀ P: SF · Y ➔ ★.
  Cast ·(PreSPlus · X · (λ x: SF · X. P (elimCast -(monoSF c) x))) · (PreSPlus · Y · P) =
  Λ X. Λ Y. λ c. Λ P. intrCast
    -(λ x. rec-wksigma x (λ a. Λ p. mkwksigma (elimCast -(MonoPreS c) a) -p))
    -(λ x. θ<x> (ind-wksigma x) (λ a. Λ p. β)).

MonoTF ◂ Mono · TF = Λ X. Λ Y. λ c. caste
  -(λ t. [ cast -(MonoSF c) t.1
         , Λ P. λ a. t.2 ·(λ s: SF · X. P (cast -(MonoSF c) s))
                       (λ tf. a (cast -(Mono-from-Functor (MonoPreSPlus c ·P)) tf)) ])
  -(λ _. β).

S ◂ ★ = Rec · TF.
foldS   ◂ TF · S ➔ S = cast -(recFold -MonoTF).
unfoldS ◂ S ➔ TF · S = cast -(recUnfold -MonoTF).

in ◂ F · S ➔ S = λ d. foldS [ preIn · S d , Λ P. λ a.
  ρ+ ς (fmapIdFromCompose (unwrap ·S) (wrap ·S) -(λ x. β) d) -
  a (fmap · S · (PreSPlus · S · P)
      (λ s. mkwksigma [ s, (unfoldS s).1 ] -((unfoldS s).2 a)) d) ].

out ◂ S ➔ F · S = λ d. (unfoldS d).1 ·(F · S) (λ df. fmap (unwrap ·S) df).

LiftS ◂ (S ➔ ★) ➔ SF · S ➔ ★ = λ P: S ➔ ★. λ x: SF · S.
  ∀ m: S. ∀ eq: {m ≃ x}. P (φ eq - m {x}).

Induction ◂ Π s: S. ∀ P: S ➔ ★. PrfAlgS · S · (LiftS · P) ➔ P s
= λ s. Λ P. λ a. (unfoldS s).2 ·(LiftS · P) a -s -β.
