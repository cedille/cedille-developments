module utils/listFunctor.

import functor.
import sum.
import sigma.
import unit.

ListF ◂ ★ ➔ ★ ➔ ★ = λ A: ★. λ L: ★. Sum ·Unit ·(Pair ·A ·L).

ListFmap ◂ ∀ A: ★. Fmap ·(ListF ·A)
= Λ A. Λ X. Λ Y. λ f. λ l.
  rec-Sum l
    (λ u. in1 u)
    (λ p. in2 (rec-pair p (λ a. λ tl. mkpair a (f tl)))).

ListFmapId ◂ ∀ A: ★. FmapId ·(ListF ·A) (ListFmap ·A)
= Λ A. Λ X. Λ Y. λ c. λ ci. λ x.
  θ<x> (ind-Sum x)
    (λ _. β)
    (λ p. θ<p> (ind-pair p) (λ a. λ tl. ρ+ (ci tl) - β)).

ListFMapCompose ◂ ∀ A: ★. FmapCompose ·(ListF ·A) (ListFmap ·A)
= Λ A. Λ X. Λ Y. Λ Z. λ f. λ g. λ x.
  θ<x> (ind-Sum x)
    (λ _. β)
    (λ p. θ<p> (ind-pair p) (λ a. λ tl. β)).

ListFmapExt ◂ ∀ A: ★. FmapExt ·(ListF ·A) (ListFmap ·A)
= Λ A. Λ X. Λ Y. λ f. λ g. λ ext. λ x.
  θ<x> (ind-Sum x)
    (λ _. β)
    (λ p. θ<p> (ind-pair p) (λ a. λ b. ρ+ (ext b) - β)).
