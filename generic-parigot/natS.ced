import natFunctor.
import wksigma.

module scott-new-test.

import scott2 as S ·NatF NatFmap -NatFmapId -NatFmapCompose.

NatS ◂ ★ = S.S.

zeroS ◂ NatS = S.in (in1 unit).

sucS  ◂ NatS ➔ NatS = λ n. S.in (in2 n).

predS ◂ NatS ➔ NatS = λ n.
  (S.unfoldS n).1 (λ nf. rec-Sum nf (λ _. n) (λ w. unwrap w)).

inductionNatS ◂ Π n: NatS. ∀ P: NatS ➔ ★. P zeroS ➔ (Π m: NatS. P m ➾ P (sucS m)) ➔ P n
= λ n. Λ P. λ z. λ s.
  S.inductionS n ·P
    (λ nf: NatF · (S.PreSPlus ·NatS ·(S.LiftS ·P)). Λ m: NatS. Λ eq.
     ind-Sum nf ·(λ x: NatF · (S.PreSPlus ·NatS ·(S.LiftS · P)). ∀ m: NatS. ∀ eq: {m ≃ S.preIn (NatFmap unwrap x)}. P (φ eq - m {S.preIn (NatFmap unwrap x)}))
       (λ u. Λ m'. Λ eq'. ρ (eta-Unit u) - z)
       (λ p. θ<p> (ind-wksigma p) (λ p1. Λ ih. Λ m'. Λ eq'. s (p1.1) -(ih -p1.1 -β)))
       -m -eq).

caseNatS ◂ Π n: NatS. ∀ X: ★. X ➔ (NatS ➔ X) ➔ X = λ n. Λ X. λ z. λ s.
  inductionNatS n ·(λ x: NatS. X) z (λ n. Λ x. s n).

NatRA ◂ ★ ➔ ★ = λ P: ★. ∀ Y: ★. NatF ·(Wrap ·(ι _: NatS. Y ➔ Y ➔ NatS ➔ P)) ➔ Y ➔ NatS ➔ P.
NatR  ◂ ★ = ι _: NatS. ∀ P: ★. NatRA ·P ➔ NatRA ·P ➔ NatS ➔ P.

zeroR ◂ NatR = [zeroS , Λ P. λ a1. λ a2. λ m.
  a1 ·(NatRA ·P) (in1 unit) a2 m].

sucR  ◂ NatR ➔ NatR = λ n. [sucS n.1 , Λ P. λ a1. λ a2. λ m.
  a1 ·(NatRA ·P) (in2 (wrap [ n.1 , n.2 ·P ])) a2 m].
_ : {sucS ≃ sucR} = β.

import cast.
toNatR ◂ Π n: NatS. ι x: NatR. {x ≃ n} = λ n.
  inductionNatS n ·(λ y: NatS. ι x: NatR. {x ≃ y})
    [zeroR , β{zeroS}]
    (λ n. Λ ih. [ sucR (φ ih.2 - ih.1 {n}) , β{sucS n} ]).

castNatR ◂ Cast · NatS · NatR = caste -(λ n. (toNatR n).1) -(λ n. (toNatR n).2).

mkNatRA ◂ ∀ P: ★. P ➔ (NatS ➔ P ➔ P) ➔ NatRA ·P = Λ P. λ x. λ f.
  Λ Y. λ nf. λ y. λ m. nf.1 (λ u. x) (λ a. f (unwrap a).1 ((unwrap a).2 y y m)).

natRec ◂ ∀ P: ★. P ➔ (NatS ➔ P ➔ P) ➔ NatS ➔ P =
  Λ P. λ x. λ f. λ n. (cast -castNatR n).2 (mkNatRA x f) (mkNatRA x f) n.

addS ◂ NatS ➔ NatS ➔ NatS = λ m. λ n. natRec n (λ _. sucS) m.

num1 = sucS zeroS.
num2 = sucS num1.
num3 = sucS num2.

_ : {addS num1 num2 ≃ addS num2 num1} = β.
_ : {addS num1 num2 ≃ num3} = β.

import parigot as P ·NatF NatFmap -NatFmapId -NatFmapCompose.
import sigma.

fromPAlg ◂ ∀ P: ★. P.Alg ·NatS ·P ➔ NatRA ·P =
  Λ P. λ a: P.Alg ·NatS ·P. Λ Y. λ nf. λ y. λ m.
  [nf' = NatFmap ·(Wrap ·(ι _: NatS. Y ➔ Y ➔ NatS ➔ P)) ·(Pair ·NatS ·P)
    (λ a'. mkpair (unwrap a').1 ((unwrap a').2 y y (predS m))) nf]
  - a nf' .

natRecP ◂ ∀ P: ★. NatS ➔ P.Alg ·NatS ·P ➔ P = Λ P. λ n. λ a.
  (cast -castNatR n).2 (fromPAlg a) (fromPAlg a) n.

addP ◂ NatS ➔ NatS ➔ NatS = λ m. λ n.
  natRecP m (λ nf. nf.1 (λ u. n) (λ p. sucS (snd p))).

-- natRecP ◂ ∀ P: ★. NatS ➔ P ➔ (NatS ➔ P ➔ P) ➔ P = Λ P. λ n. λ x. λ f.
--   (cast -castNatR n)
--     (fromPAlg ·P (λ nf. nf.1 (λ u. x) (λ p. p.1 f)))
--     (fromPAlg ·P (λ nf. nf.1 (λ u. x) (λ p. p.1 f))) n.

{-

natrz ◂ ★ ➔ ★ = λ X: ★. ∀ S: ★. Unit ➔ S ➔ NatS ➔ X.
NatRS ◂ ★ ➔ ★ = λ X: ★. ∀ S: ★. Wrap · (((NatRZ · X ➔ S ➔ S ➔ NatS ➔ X) ➔ X) ➔ X) ➔ S ➔ NatS ➔ X.

NatR ◂ ★ = ∀ X: ★. ((NatRZ · X ➔ NatRS · X ➔ NatRS · X ➔ NatS ➔ X) ➔ X) ➔ X.

zeroR ◂ NatR = Λ X. λ a. a (λ z. λ s. λ t. λ m. z unit t m).
_ : {zeroS ≃ zeroR} = β.

sucR ◂ NatR ➔ NatR = λ n. Λ X. λ a. a (λ z. λ s. λ t. λ m. s (wrap (n · X)) t m).
_ : {sucS ≃ sucR} = β.

toNatR ◂ Π n: NatS. ι x: NatR. {x ≃ n} = λ n.
  inductionNatS n · (λ y: NatS. ι x: NatR. {x ≃ y})
    [ zeroR , β{zeroS} ] (λ m. Λ r. [ sucR (φ r.2 - r.1 {m}) , β{sucS m} ]).

import cast.

castNatR ◂ Cast · NatS · NatR = caste
  -(λ n. (toNatR n).1) -(λ n. (toNatR n).2).

recNatBase ◂ ∀ X: ★. X ➔ NatRZ · X = Λ X. λ x. Λ S. λ u. λ s. λ m. x.
recNatStep ◂ ∀ X: ★. X ➔ (NatS ➔ X ➔ X) ➔ NatRS · X = Λ X. λ x. λ f. Λ S. λ n. λ s. λ m.
  f (predS m) ((unwrap n) (λ a. a (recNatBase x) s s (predS m))).

recNatS ◂ NatS ➔ ∀ X: ★. X ➔ (NatS ➔ X ➔ X) ➔ X =
  λ n. Λ X. λ x. λ f. (cast -castNatR n) (λ a. a (recNatBase x) (recNatStep x f) (recNatStep x f) n).

num1 = sucS zeroS.
num2 = sucS num1.
num3 = sucS num2.

-- example:

add ◂ NatS ➔ NatS ➔ NatS
= λ m. λ n. recNatS m n (λ m. λ s. sucS s).

_ ◂ {add num2 num2 ≃ sucS (sucS num2)} = β.

minus ◂ NatS ➔ NatS ➔ NatS
= λ m. λ n. recNatS n m (λ _. λ m. predS m).

_ ◂ {minus (sucS (add num2 num2)) (sucS num2) ≃ num2} = β.
