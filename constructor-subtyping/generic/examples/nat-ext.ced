import ../../lib/lib .

import nat-sig .

import ../reuse .

module generic/examples/nat-ext (F: ★ ➔ ★) {mono: Monotonic ·F} {sub: SigSub ·NatSig ·F} .

import ../encoding as D ·F -mono .
import ../encoding as Nat ·NatSig -monoNatSig .

natsig2f : ∀ X: ★. NatSig ·X ➔ F ·X
= Λ X. cast -(sub -(castRefl ·X)) .

zeroE : D.Ind
= D.in (natsig2f (zeroS ·D.Ind)) .

succE : D.Ind ➔ D.Ind
= λ n. D.in (natsig2f (succS n)) .

addE : Nat.Alg ·(D.Ind ➔ D.Ind)
= Λ R. λ add. λ m. λ n.
  caseNatSig m ·D.Ind n
    λ m'. [sum = add m' n] - succE sum
.
