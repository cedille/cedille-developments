import ../../lib/lib.

import snat .
import nat .
import int .
import sint .

module nat2int .

nat2intPack : Π l: Label. ∀ R: ★. Cast ·(SNatPack l ·R) ·(SIntPack l ·R)
= λ l. Λ R.
  intrCastI λ x. [[x.1, [x.2.1,
    [Λ e. x.2.2
      -([Λ n. [k:{lpred ≃ lzero} = ρ ς e - ρ ς n - β] - δ - k,
         Λ n. [k:{lpred ≃ lsucc} = ρ ς e - ρ ς n - β] - δ - k]) ·R,
     Λ e. x.2.2 -[e.1, e.2.1]
     ]]],
     β{|x|}].


{-
    θ<x> (indWkSigma x)
      (λ t.
       σ l {
       | l0 ➔ Λ b.
         [b' : SIntPack l0 t ·R
           = σ b { tuple3 z s a ➔ tuple4 z s (λ eq. δ - eq) (λ eq. δ - eq) } ]
       - [ intrWkSigma t -b' , β{|intrWkSigma t|} ]
       | lnext l' ➔
         σ l' {
         | l0 ➔ Λ b.
           [b' : SIntPack lsucc t ·R
             = σ b { tuple3 z s a ➔ tuple4 z s (λ eq. δ - eq) (λ eq. δ - eq) }]
         - [ intrWkSigma t -b' , β{|intrWkSigma t|} ]
         | lnext l'' ➔ Λ b.
           [lem : False = σ b { tuple3 z s a ➔ a β }]
         - δ - lem ·{l0 ≃ lsucc}
         }
       }) .

  -}

import ../sigsub .
import ../gensigsub ·Label ·SNatPack -monoSNatPack ·Label ·SIntPack -monoSIntPack.
import ../indsub ·SNat -monoSNat ·SInt -monoSInt .

snat2sint : SigSub ·SNat ·SInt
= gensigsub (castRefl ·Label) nat2intPack .

nat2int : Cast ·Nat ·Int = indsub -snat2sint .

-- examples of reuse

import gnat ·SInt -monoSInt -snat2sint .

caseIntNat : ∀ I: ★. ∀ X: ★. (SNat ·I ➔ X) ➔ (I ➔ X) ➔ SInt ·I ➔ X
= Λ I. Λ X. λ snat. λ p.
  indSigma ·Label ·(λ l: Label. SIntPack l ·I) ·(λ _: SInt ·I. X)
    λ l. σ (eq l lpred) @(λ x: Bool. { eq l lpred ≃ x } ➾ SIntPack l ·I ➔ X){
    | tt ➔ Λ e. λ x. p (x.2.2.1 -(exact l lpred e))
    | ff ➔ Λ e. λ x.
      [lem1 = nexact l lpred e]
    - [y: SNatPack l ·I = [ x.1 , [ x.2.1 , Λ e'. x.2.2.2 -[ e'.1 , [ e'.2 , Λ e''. explode' -(lem1 -e'') β{|e'|} ]] ]]]
    - snat (mksigma l y)
    } -β
.

-- TODO fixme
import ../ind ·SInt -monoSInt .

addI : Int ➔ Int ➔ Int
= λ i. λ j.
  foldIntG
    (λ z.
       [i' : SNatPack lzero ·Int = [ z.1 , [ z.2.1 , Λ e. explode' -(e.1 -β) β{|z|} ] ]]
     - addGZ i' j)
    (λ s.
       [i' : SNatPack lsucc ·Int = [ s.1 , [ s.2.1 , Λ e. explode' -(e.2 -β) β{|s|} ] ]]
     - addGS i' j)
    (λ p. ipred (p.2.2.1 -β))
    i .
