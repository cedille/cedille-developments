import ../../lib/lib.

import ../gensig .
import ../sigsub .

import snat .
import nat .


-- module gnat (B: Label ➔ ★ ➔ ★) {monoB: Π l: Label. Monotonic ·(B l)} {sub: SigSub ·SNat ·(Sig ·Label ·B monoB)} .

module gnat (G: ★ ➔ ★) {monoG: Monotonic ·G} {sub: SigSub ·SNat ·G}.

import ../ind as IG ·G -monoG .

addGZ : SNatPack lzero ·IG.IndM ➔ IG.IndM ➔ IG.IndM
= λ i. λ j. j .

addGS: SNatPack lsucc ·IG.IndM ➔ IG.IndM ➔ IG.IndM
= λ i. λ j. IG.inIndM (cast -(sub -(castRefl ·IG.IndM)) (succS (i.2.1 -β)))  .

addG : SNat ·IG.IndM ➔ IG.IndM ➔ IG.IndM
= λ m. λ n.
  caseNatG ·IG.IndM n
    (λ sum. IG.inIndM (cast -(sub -(castRefl ·IG.IndM)) (succS sum)))
    m
.
