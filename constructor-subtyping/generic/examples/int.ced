import ../../lib/lib.

import int-sig .

import ../encoding ·SInt -monoSInt .

module generic/examples/int .

import int-reuse-nat .
import nat-ext ·SInt -monoSInt -snat2sint .

Int : ★ = Ind .

izero = zeroE .
isucc = succE .
ipred : Int ➔ Int = λ i. in (ipredS i) .

-- some functions

import ../encoding as PredInt ·(SIntPack lpred) -(monoSIntPack lpred) .
addPred : PredInt.Alg ·(Int ➔ Int)
= Λ R. λ add. λ m. λ n.
  ipred (add (m.2.2.1 -β) n) .

addInt : Int ➔ Int ➔ Int
= fold (nat2intalg addE addPred) .

_ : { addInt (isucc izero) (ipred izero) ≃ isucc (ipred izero)} = β .

{-
foldIntG : ∀ X: ★. (SIntPack lzero ·X ➔ X) ➔ (SIntPack lsucc ·X ➔ X) ➔ (SIntPack lpred ·X ➔ X) ➔ Int ➔ X
= Λ X. λ z. λ s. λ p.
  induction ·(λ i: Int. X)
    Λ R. Λ c. λ ih.
    indSigma ·Label ·(λ l: Label. SIntPack l ·R) ·(λ x: SInt ·R. X)
      λ l. λ ctors. caseSIntPack z s p l (fmapSIntPack ih l ctors)
.

caseIntG : ∀ I: ★. ∀ X: ★. X ➔ (I ➔ X) ➔ (I ➔ X) ➔ SInt ·I ➔ X
= Λ I. Λ X. λ z. λ s. λ p.
  indSigma ·Label ·(λ l: Label. SIntPack l ·I) ·(λ _: SInt ·I. X)
    λ l. σ (eq l lzero) @(λ x: Bool. { eq l lzero ≃ x } ➾ SIntPack l ·I ➔ X) {
    | tt ➔ Λ e. λ _. z
    | ff ➔ Λ e. σ (eq l lsucc) @(λ x: Bool. { eq l lsucc ≃ x } ➾ SIntPack l ·I ➔ X) {
      | tt ➔ Λ e'. λ x. s (x.2.1 -(exact l lsucc e'))
      | ff ➔ Λ e'. σ (eq l lpred) @(λ x: Bool. { eq l lpred ≃ x } ➾ SIntPack l ·I ➔ X) {
        | tt ➔ Λ e''. λ x. p (x.2.2.1 -(exact l lpred e''))
        | ff ➔ Λ e''. λ x.
          x.2.2.2 -[ nexact l lzero e , [ nexact l lsucc e' , nexact l lpred e'' ]] ·X
        } -β
      } -β
    } -β
.
