import ../../lib/lib.

import sint .

import ../ind ·SInt -monoSInt .

module int .

Int : ★ = IndM .

izero : Int
= inIndM (mksigma lzero
  [Λ _. unit,
  [Λ e. explode' -(δ - e) β{|unit|},
  [Λ e. explode' -(δ - e) β{|unit|},
   Λ e. explode' -(e.1 -β) β{|unit|}]]]).

isucc : Int ➔ Int
= λ n. inIndM (mksigma lsucc
  [Λ e. explode' -(δ - e) β{|n|},
  [Λ _. n,
  [Λ e. explode' -(δ - e) β{|n|},
   Λ e. explode' -(e.2.1 -β) β{|n|}]]]).

ipred : Int ➔ Int
= λ n. inIndM (mksigma lpred
  [Λ e. explode' -(δ - e) β{|n|},
  [Λ e. explode' -(δ - e) β{|n|},
  [Λ _. n,
   Λ e. explode' -(e.2.2 -β) β{|n|}]]]).
