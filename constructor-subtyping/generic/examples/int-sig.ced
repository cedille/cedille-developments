import ../../lib/lib.

module int-sig .

IntPack : Label ➔ ★ ➔ ★
= λ l: Label. λ R: ★. ι _:
    {l ≃ lzero} ➾ Unit. ι _:
    {l ≃ lsucc} ➾ R. ι _:
    {l ≃ lpred} ➾ R.
    (ι _: Not·{l ≃ lzero}. ι _: Not·{l ≃ lsucc}. Not·{l ≃ lpred}) ➾ False .

caseIntPack
: ∀ X: ★. ∀ R: ★. Π l: Label. IntPack l ·R ➔
  (IntPack lzero ·R ➔ X) ➔ (IntPack lsucc ·R ➔ X) ➔ (IntPack lpred ·R ➔ X) ➔
   X
= Λ X. Λ R. λ l. λ i. λ z. λ s. λ p.
  μ' (eq l lzero) @(λ x: Bool. { eq l lzero ≃ x } ➾ IntPack l ·R ➔ X) {
  | tt ➔ Λ e. λ ctors. z (ρ ς (exact l lzero e) @ x. IntPack x ·R - ctors)
  | ff ➔ Λ nez. μ' (eq l lsucc) @(λ x: Bool. { eq l lsucc ≃ x } ➾ IntPack l ·R ➔ X) {
    | tt ➔ Λ e. λ ctors. s (ρ ς (exact l lsucc e) @ x. IntPack x ·R - ctors)
    | ff ➔ Λ nes. μ' (eq l lpred) @(λ x: Bool. { eq l lpred ≃ x } ➾ IntPack l ·R ➔ X) {
      | tt ➔ Λ e. λ ctors. p (ρ ς (exact l lpred e) @ x. IntPack x ·R - ctors)
      | ff ➔ Λ nep. λ ctors.
        ctors.2.2.2
          -[ nexact l lzero nez
           , [ nexact l lsucc nes
             , nexact l lpred nep ] ]
          ·X
      } -β
    } -β
  } -β i .

monoIntPack : Π l: Label. Monotonic ·(IntPack l)
= λ l. Λ R1. Λ R2. λ c.
  intrCastI
    (λ x. [[x.1, [Λ e. cast -c (x.2.1 -e), [Λ e. cast -c (x.2.2.1 -e), Λ e. x.2.2.2 -e]]], β{x}]).

fmapSIntPack : ∀ A: ★. ∀ B: ★. (A ➔ B) ➔ Π l: Label. IntPack l ·A ➔ IntPack l ·B
= Λ A. Λ B. λ f. λ l.
  μ' (eq l lzero) @(λ x: Bool. { eq l lzero ≃ x } ➾ IntPack l ·A ➔ IntPack l ·B) {
  | tt ➔ Λ ez. ρ (exact l lzero ez) - λ ctors.
    [ ctors.1
    , [ Λ es. explode' -(δ - es) β{ctors}
    , [ Λ es. explode' -(δ - es) β{ctors}
    , Λ nzsp. explode' -(nzsp.1 -β) β{ctors} ] ] ]
  | ff ➔ Λ nez. μ' (eq l lsucc) @(λ x: Bool. { eq l lsucc ≃ x } ➾ IntPack l ·A ➔ IntPack l ·B) {
    | tt ➔ Λ es. ρ (exact l lsucc es) - λ ctors.
      [ Λ ez. explode' -(δ - ez) β{f ctors}
      , [ Λ _. f (ctors.2.1 -β)
      , [ Λ ep. explode' -(δ - ep) β{f ctors}
      , Λ nzsp. explode' -(nzsp.2.1 -β) β{f ctors} ] ] ]
    | ff ➔ Λ nes. μ' (eq l lpred) @(λ x: Bool. { eq l lpred ≃ x } ➾ IntPack l ·A ➔ IntPack l ·B) {
      | tt ➔ Λ ep. ρ (exact l lpred ep) - λ ctors.
        [ Λ ez. explode' -(δ - ez) β{f ctors}
        , [ Λ es. explode' -(δ - es) β{f ctors}
        , [ Λ _. f (ctors.2.2.1 -β)
        , Λ nzsp. explode' -(nzsp.2.2 -β) β{f ctors} ] ] ]
      | ff ➔ Λ nep. λ ctors.
        [ Λ ez. explode' -(nexact l lzero nez -ez) β{ctors}
        , [ Λ es. explode' -(nexact l lsucc nes -es) β{ctors}
        , [ Λ ep. explode' -(nexact l lpred nep -ep) β{ctors}
        ,  ctors.2.2.2 ]]]
      } -β
    } -β
  } -β .

import ../extensible-signature ·Label ·IntPack -monoIntPack .

IntSig : ★ ➔ ★ = Sig .
monoIntSig = monoSig .

ipredP : ∀ I: ★. I ➔ IntPack lpred ·I
= Λ I. λ n.
    [ Λ e. explode' -(δ - e) β{n} ,
    [ Λ e. explode' -(δ - e) β{n} ,
    [ Λ _. n ,
      Λ e. explode' -(e.2.2 -β) β{n} ]]] .

ipredS : ∀ I: ★. I ➔ IntSig ·I = Λ I. λ i. mksigma lpred (ipredP i) .

caseIntSig : ∀ I: ★. IntSig ·I ➔ ∀ X: ★. X ➔ (I ➔ X) ➔ (I ➔ X) ➔ X
= Λ I. λ i. Λ X. λ z. λ s. λ p.
  caseIntPack ·X ·I (proj1 i) (proj2 i)
    (λ _. z) (λ i. s (i.2.1 -β)) (λ i. p (i.2.2.1 -β)) .
