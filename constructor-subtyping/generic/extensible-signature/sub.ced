import ../../lib/lib.
import ../reuse/signature-subtyping .


module generic/extensigble-signature/sub
  (A1: ★) (B1: A1 ➔ ★ ➔ ★) {monoB1: Π a: A1. Monotonic ·(B1 a)}
  (A2: ★) (B2: A2 ➔ ★ ➔ ★) {monoB2: Π a: A2. Monotonic ·(B2 a)} .

import sig as F ·A1 ·B1 -monoB1 .
import sig as G ·A2 ·B2 -monoB2 .

-- if
-- 1. the labels for F are a subtype of the labels for G
-- 2. and, for every label element a and type R, the collection of constructors arguments
--    at that label is a subtype of the collection at the same label (under inclusion) of G
--
-- then, F is a sub-signature of G

sigsub
: Π c: Cast ·A1 ·A2. (Π a1: A1. ∀ R: ★. Cast ·(B1 a1 ·R) ·(B2 (elimCast -c a1) ·R)) ➔
  SigSub ·F.Sig ·G.Sig
= λ cA. λ cC. Λ R1. Λ R2. Λ cR.
  intrCastI
    (indSigma ·A1 ·(λ a: A1. B1 a ·R1) ·(λ x: F.Sig ·R1. ι y: G.Sig ·R2. { y ≃ x })
      λ a1. λ ctor.
        [lem : Cast ·(B1 a1 ·R1) ·(B1 a1 ·R2) = monoB1 a1 cR]

  {- λ x. θ<x> (indWkSigma x)
                     (λ t. Λ b. [ intrWkSigma t -(elimCast -(monoB1 a1 t cR) b)
                                , β{|intrWkSigma t|} ])] -}
      - [ mksigma (elimCast -cA a1) (elimCast -(cC a1 ·R2) (elimCast -lem ctor)) , β{|mksigma a1 ctor|} ]) .

