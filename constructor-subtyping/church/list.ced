import ../lib/lib.

module list.

ListPack' : ★ ➔ ★ ➔ Label ➔ ★ = λ A:★. λ X:★. λ l:Label. ι _:
  {l ≃ lnil} ➾ X.
  {l ≃ lcons} ➾ A ➔ X ➔ X.

List' : ★ ➔ ★ = λ A:★. ∀ X:★. (Π l:Label. ListPack'·A·X l) ➔ X.

nil' : ∀ A:★. List'·A
= Λ A. Λ X. λ f. (f lnil).1 -β.

cons' : ∀ A:★. A ➔ List'·A ➔ List'·A
= Λ A. λ a. λ l. Λ X. λ f. [c = (f lcons).2 -β]
  - c a (l f).

ListIndPack : Π A:★. (List'·A ➔ ★) ➔ Label ➔ ★ = λ A:★. λ P:List'·A ➔ ★. λ l:Label. ι _:
  {l ≃ lnil} ➾ P (nil'·A).
  {l ≃ lcons} ➾ ∀ m:List'·A. Π a:A. P m ➔ P (cons' a m).

ListInd : Π A:★. List'·A ➔ ★ = λ A:★. λ n:List'·A. ∀ P:List'·A ➔ ★.
  (Π l:Label. ListIndPack·A·P l) ➔ P n.

List : ★ ➔ ★ = λ A:★. ι n:List'·A. ListInd·A n.

nil : ∀ A:★. List·A
= Λ A. [nil'·A, Λ P. λ f. (f lnil).1 -β].

cons : ∀ A:★. A ➔ List·A ➔ List·A
= Λ A. λ a. λ l. [cons' a l.1, Λ P. λ f. [c = (f lcons).2 -β]
  - c -l.1 a (l.2·P f)].

pack : ∀ A:★. ∀ P:List'·A ➔ ★. P (nil'·A)
  ➔ (∀ m:List'·A. Π a:A. P m ➔ P (cons' a m))
  ➔ Π l:Label. ListIndPack·A·P l
= Λ A. Λ P. λ z. λ s. λ l.
  [T : ★ = ListIndPack·A·P l]
  - σ (eq l lnil) @ λ b:Bool. {eq l lnil ≃ b} ➾ T {
  | tt ➔ Λ e. [e = exact l lnil e] - [Λ _. z,
      (Λ k. [r:{lnil ≃ lcons} = ρ ς e - ρ ς k - β] - [d:False = δ - r] - explode' -d β{|z|})]
  | ff ➔ Λ e1. [e1 = nexact l lnil e1] - σ (eq l lcons) @ λ b:Bool. {eq l lcons ≃ b} ➾ T {
    | tt ➔ Λ e. [e = exact l lcons e] - [(Λ k. [r:{lnil ≃ lcons} = ρ ς e - ρ ς k - β] - [d:False = δ - r] - explode' -d β{|s|}),
        (Λ _. s)]
    | ff ➔ Λ e2. [e2 = nexact l lcons e2] - [Λ k. explode' -(e1 -k) β, Λ k. explode' -(e2 -k) β]
    } -β
  } -β.

to : ∀ A:★. List'·A ➔ List·A
= Λ A. λ i. i·(List·A) (λ l. [p = pack·A·(λ x:List'·A. List·A)
  (nil·A)
  (Λ m:List'·A. (cons·A))
  l] - [p.1, Λ k. λ h. λ t. p.2 -k -i h t]).

reflection : ∀ A:★. Π n:List·A. {to n.1 ≃ n}
= Λ A. [P : List'·A ➔ ★ = λ x:List'·A. {(to x).1 ≃ x}] - λ n. n.2·P (pack·A·P
  β
  (Λ m. λ a. λ k. χ({cons a (to m) ≃ cons a m}) - ρ k - β{|a k|})).

induct : ∀ A:★. Π n:List·A. ∀ P:List·A ➔ ★. P (nil·A) ➔ (∀ m:List·A. Π a:A. P m ➔ P (cons a m)) ➔ P n
= Λ A. λ n. Λ P. λ z. λ s. ρ (ς (reflection n)) - (n.2·(λ x:List'·A. P (to x)) (pack·A·(λ x:List'·A. P (to x))
  z
  (Λ m. λ a. λ k. s -(to m) a k))).

