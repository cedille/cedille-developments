import ../lib/lib.
import etyp as ETyp.
import nat as Nat.
import list as List.

module stlce.

Nat : ★ = Nat.Nat.
Index : ★ = Nat.Nat.
Typ : ★ = ETyp.ETyp.
nat = ETyp.nat.
base = ETyp.base.
arr = ETyp.arr.
typ_eq = ETyp.typ_eq.
Ctx : ★ = List.List·Typ.
nil = List.nil·Typ.
cons = List.cons·Typ.

in : Typ ➔ Ctx ➔ Bool
= λ t. λ g. List.induct g·(λ l:Ctx. Bool)
  ff
  (Λ _. λ x. λ g'. or (typ_eq t x) g').

StlcePack : (Ctx ➔ Typ ➔ ★) ➔ Label ➔ ★ = λ X:Ctx ➔ Typ ➔ ★. λ l:Label. ι _:
  {l ≃ lvar} ➾ ∀ g:Ctx. ∀ a:Typ. {in a g ≃ tt} ➾ Index ➔ X g a. ι _:
  {l ≃ labs} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. X (cons a g) b ➔ X g (arr a b). ι _:
  {l ≃ lapp} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. X g (arr a b) ➔ X g a ➔ X g b. ι _:
  {l ≃ lnum} ➾ ∀ g:Ctx. Nat ➔ X g nat.
  {l ≃ ladd} ➾ ∀ g:Ctx. X g nat ➔ X g nat ➔ X g nat.

Stlce : Ctx ➔ Typ ➔ ★ = λ g:Ctx. λ ty:Typ.
  ∀ X:Ctx ➔ Typ ➔ ★. (Π l:Label. StlcePack·X l) ➔ X g ty.

var : ∀ g:Ctx. ∀ a:Typ. {in a g ≃ tt} ➾ Index ➔ Stlce g a
= Λ g. Λ a. Λ e. λ i. Λ X. λ f. [v = (f lvar).1 -β]
  - v -g -a -e i.

abs : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlce (cons a g) b ➔ Stlce g (arr a b)
= Λ g. Λ a. Λ b. λ body. Λ X. λ f. [abs = (f labs).2.1 -β]
  - abs -g -a -b (body·X f).

app : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlce g (arr a b) ➔ Stlce g a ➔ Stlce g b
= Λ g. Λ a. Λ b. λ fn. λ arg. Λ X. λ f. [app = (f lapp).2.2.1 -β]
  - app -g -a -b (fn·X f) (arg·X f).

num : ∀ g:Ctx. Nat ➔ Stlce g nat
= Λ g. λ n. Λ X. λ f. [num = (f lnum).2.2.2.1 -β] - num -g n.

add : ∀ g:Ctx. Stlce g nat ➔ Stlce g nat ➔ Stlce g nat
= Λ g. λ x. λ y. Λ X. λ f. [add = (f ladd).2.2.2.2 -β] - add -g (x·X f) (y·X f).
