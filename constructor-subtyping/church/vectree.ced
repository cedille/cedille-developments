import ../lib/lib.
import nat as N.

module vectree.

Nat : ★ = N.Nat.
zero = N.zero.
succ = N.succ.
add = N.add.

VecTreePack' : ★ ➔ (Nat ➔ ★) ➔ Label ➔ ★ = λ A:★. λ X:Nat ➔ ★. λ l:Label. ι _:
  {l ≃ lnil} ➾ X zero. ι _:
  {l ≃ lcons} ➾ ∀ n:Nat. A ➔ X n ➔ X (succ n).
  {l ≃ lbranch} ➾ ∀ a:Nat. ∀ b:Nat. X a ➔ X b ➔ X (add a b).

VecTree' : ★ ➔ Nat ➔ ★ = λ A:★. λ n:Nat. ∀ X:(Nat ➔ ★). (Π l:Label. VecTreePack'·A·X l) ➔ X n.

nil' : ∀ A:★. VecTree'·A zero
= Λ A. Λ X. λ f. (f lnil).1 -β.

cons' : ∀ A:★. ∀ n:Nat. A ➔ VecTree'·A n ➔ VecTree'·A (succ n)
= Λ A. Λ n. λ a. λ l. Λ X. λ f. [c = (f lcons).2.1 -β]
  - c -n a (l f).

branch' : ∀ A:★. ∀ a:Nat. ∀ b:Nat. VecTree'·A a ➔ VecTree'·A b ➔ VecTree'·A (add a b)
= Λ A. Λ a. Λ b. λ v1. λ v2. Λ X. λ f. [br = (f lbranch).2.2 -β]
  - br -a -b (v1 f) (v2 f).

VecTreeIndPack : Π A:★. (Π n:Nat. VecTree'·A n ➔ ★) ➔ Label ➔ ★ = λ A:★. λ P:Π n:Nat. VecTree'·A n ➔ ★. λ l:Label. ι _:
  {l ≃ lnil} ➾ P zero (nil'·A). ι _:
  {l ≃ lcons} ➾ ∀ m:Nat. ∀ v:VecTree'·A m. Π a:A. P m v ➔ P (succ m) (cons' -m a v). 
  {l ≃ lbranch} ➾ ∀ a:Nat. ∀ b:Nat. ∀ v1:VecTree'·A a. ∀ v2:VecTree'·A b. P a v1 ➔ P b v2 ➔ P (add a b) (branch' -a -b v1 v2).

VecTreeInd : Π A:★. Π n:Nat. VecTree'·A n ➔ ★ = λ A:★. λ n:Nat. λ v:VecTree'·A n. ∀ P: Π n:Nat. VecTree'·A n ➔ ★.
  (Π l:Label. VecTreeIndPack·A·P l) ➔ P n v.

VecTree : ★ ➔ Nat ➔ ★ = λ A:★. λ n:Nat. ι v:VecTree'·A n. VecTreeInd·A n v.

nil : ∀ A:★. VecTree·A zero
= Λ A. [nil'·A, Λ P. λ f. (f lnil).1 -β].

cons : ∀ A:★. ∀ n:Nat. A ➔ VecTree·A n ➔ VecTree·A (succ n)
= Λ A. Λ n. λ a. λ l. [cons' -n a l.1, Λ P. λ f. [c = (f lcons).2.1 -β]
  - c -n -l.1 a (l.2·P f)].

branch : ∀ A:★. ∀ a:Nat. ∀ b:Nat. VecTree·A a ➔ VecTree·A b ➔ VecTree·A (add a b)
= Λ A. Λ a. Λ b. λ v1. λ v2. [branch'·A -a -b v1.1 v2.1, Λ P. λ f. [br = (f lbranch).2.2 -β]
  - br -a -b -v1.1 -v2.1 (v1.2·P f) (v2.2·P f)].
