import ../lib/lib.

module int.

IntPack' : ★ ➔ Label ➔ ★ = λ X:★. λ l:Label. ι _:
  {l ≃ lzero} ➾ X. ι _:
  {l ≃ lsucc} ➾ X ➔ X.
  {l ≃ lpred} ➾ X ➔ X.

Int' : ★ = ∀ X:★. (Π l:Label. IntPack'·X l) ➔ X.

zero' : Int'
= Λ X. λ f. [ctors = f lzero]
  - ctors.1 -β.

succ' : Int' ➔ Int'
= λ n. Λ X. λ f. [ctors = f lsucc]
  - [s = ctors.2.1 -β]
  - s (n f).

pred' : Int' ➔ Int'
= λ n. Λ X. λ f. [ctors = f lpred]
  - [p = ctors.2.2 -β]
  - p (n f).

IntIndPack : (Int' ➔ ★) ➔ Label ➔ ★ = λ P:Int' ➔ ★. λ l:Label. ι _:
  {l ≃ lzero} ➾ P zero'. ι _:
  {l ≃ lsucc} ➾ ∀ m:Int'. P m ➔ P (succ' m).
  {l ≃ lpred} ➾ ∀ m:Int'. P m ➔ P (pred' m).

IntInd : Int' ➔ ★ = λ n:Int'. ∀ P:Int' ➔ ★. (Π l:Label. IntIndPack·P l) ➔ P n.

Int : ★ = ι n:Int'. IntInd n.

zero : Int
= [zero', Λ P. λ f. [ctors = f lzero]
  - ctors.1 -β].

succ : Int ➔ Int
= λ n. [succ' n.1, Λ P. λ f. [ctors = f lsucc]
  - [s = ctors.2.1 -β]
  - s -n.1 (n.2·P f)].

pred : Int ➔ Int
= λ n. [pred' n.1, Λ P. λ f. [ctors = f lpred]
  - [p = ctors.2.2 -β]
  - p -n.1 (n.2·P f)].

pack : ∀ P:Int' ➔ ★. P zero'
  ➔ (∀ m:Int'. P m ➔ P (succ' m))
  ➔ (∀ m:Int'. P m ➔ P (pred' m))
  ➔ Π l:Label. IntIndPack·P l
= Λ P. λ z. λ s. λ p. λ l.
  [T : ★ = IntIndPack·P l]
  - μ' (eq l lzero) @ λ b:Bool. {eq l lzero ≃ b} ➾ T {
  | tt ➔ Λ e. [e = exact l lzero e] - [Λ _. z,
    [Λ e'. [k:{lzero ≃ lsucc} = ρ ς e - ρ ς e' - β] - [d:False = δ - k] - explode' -d β{z},
    Λ e'. [k:{lzero ≃ lpred} = ρ ς e - ρ ς e' - β] - [d:False = δ - k] - explode' -d β{z}]]
  | ff ➔ Λ e1. [e1 = nexact l lzero e1] - μ' (eq l lsucc) @ λ b:Bool. {eq l lsucc ≃ b} ➾ T {
    | tt ➔ Λ e. [e = exact l lsucc e] - [Λ e'. [k:{lzero ≃ lsucc} = ρ ς e' - ρ ς e - β] - [d:False = δ - k] - explode' -d β{s},
      [Λ _. Λ m. λ s'. s -m s',
      Λ e'. [k:{lsucc ≃ lpred} = ρ ς e' - ρ ς e - β] - [d:False = δ - k] - explode' -d β{s}]]
    | ff ➔ Λ e2. [e2 = nexact l lsucc e2] - μ' (eq l lpred) @ λ b:Bool. {eq l lpred ≃ b} ➾ T {
      | tt ➔ Λ e. [e = exact l lpred e] - [Λ e'. [k:{lzero ≃ lpred} = ρ ς e' - ρ ς e - β] - [d:False = δ - k] - explode' -d β{p},
        [Λ e'. [k:{lsucc ≃ lpred} = ρ ς e' - ρ ς e - β] - [d:False = δ - k] - explode' -d β{p},
	Λ _. Λ m. λ p'. p -m p']]
      | ff ➔ Λ e3. [e3 = nexact l lpred e3] - [Λ e'. explode' -(e1 -e') β,
        [Λ e'. explode' -(e2 -e') β,
	Λ e'. explode' -(e3 -e') β]]
      } -β
    } -β
  } -β.

to : Int' ➔ Int
= λ i. i·Int (λ l. [p = pack·(λ x:Int'. Int) zero (Λ m:Int'. succ) (Λ m:Int'. pred) l]
  - [Λ e. p.1 -e, [Λ e. p.2.1 -e -i, Λ e. p.2.2 -e -i]]).

reflection : Π n:Int. {to n.1 ≃ n}
= [P : Int' ➔ ★ = λ x:Int'. {(to x).1 ≃ x}] - λ n. n.2·P (pack·P β
  (Λ m. λ k. χ({succ (to m) ≃ succ m}) - ρ k - β{k})
  (Λ m. λ k. χ({pred (to m) ≃ pred m}) - ρ k - β{k})).

induct : Π n:Int. ∀ P:Int ➔ ★. P zero ➔ (∀ m:Int. P m ➔ P (succ m)) ➔ (∀ m:Int. P m ➔ P (pred m)) ➔ P n
= λ n. Λ P. λ z. λ s. λ p. ρ (ς (reflection n)) - (n.2·(λ x:Int'. P (to x)) (pack·(λ x:Int'. P (to x))
  z
  (Λ m. λ k. s -(to m) k)
  (Λ m. λ k. p -(to m) k))).

add : Int ➔ Int ➔ Int
= λ a. λ b. induct a·(λ x:Int. Int) b (Λ m. λ x. succ x) (Λ m. λ x. pred x).

_ : {add zero zero ≃ zero} = β.
_ : {add (succ zero) zero ≃ succ zero} = β.
_ : {add zero (succ zero) ≃ succ zero} = β.
_ : {add (succ zero) (succ zero) ≃ succ (succ zero)} = β.
_ : {add (pred zero) (succ zero) ≃ pred (succ zero)} = β.
_ : {add (succ (succ zero)) (succ zero) ≃ succ (succ (succ zero))} = β.
