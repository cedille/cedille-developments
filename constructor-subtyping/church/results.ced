
import ../lib/lib.
import list as L.
import vectree as V.
import nat as N.
import int as I.
import typ as Ty.
import etyp as ETy.
import stlc as S.
import stlce as Se.

module results.

Nat : ★ = N.Nat.
zero = N.zero.
succ = N.succ.
Int : ★ = I.Int.

_ : Cast·Nat·Int
= intrCast
  (λ n. N.induct n·(λ x:Nat. Int) I.zero (Λ x. λ s. I.succ s))
  (λ n. N.induct n·(λ x:Nat. {N.induct x zero succ ≃ x}) β
    (Λ x. λ s. χ({succ (N.induct x zero succ) ≃ succ x}) - ρ s - β)).

_ : Cast ·N.Nat' ·I.Int'
= intrCast
    (λ n. Λ X. λ f. n (λ l. [ (f l).1 , (f l).2.1 ]))
    (λ n. β) .

List : ★ ➔ ★ = L.List.
nil = L.nil.
cons = L.cons.
length = L.length.

_ : ∀ A:★. CastDep·(List·A)·(λ l:List·A. V.VecTree·A (length l))
= Λ A. intrCastDep
  -(λ l. L.induct l·(λ x:List·A. V.VecTree·A (length x)) (V.nil·A)
    (Λ m. λ a. λ c. V.cons -(length m) a c))
  -(λ l. L.induct l·(λ x:List·A. {L.induct x nil cons ≃ x}) β
    (Λ m. λ a. λ c. χ({cons a (L.induct m nil cons) ≃ cons a m}) - ρ c - β)).

Typ : ★ = Ty.Typ.
ETyp : ★ = ETy.ETyp.
base = Ty.base.
arr = Ty.arr.

typc1 : Cast·Typ·ETyp
= intrCast
  (λ t. Ty.induct t·(λ t':Typ. ETyp) ETy.base (Λ a. Λ b. λ x. λ y. ETy.arr x y))
  (λ t. Ty.induct t·(λ t':Typ. {Ty.induct t' base arr ≃ t'}) β
    (Λ a. Λ b. λ x. λ y. ρ+ x - ρ+ y - β)).

typc2 : Cast·(List·Typ)·(List·ETyp)
= intrCast
  (λ l. L.induct l·(λ g:List·Typ. List·ETyp) (nil·ETyp) (Λ m. λ a. λ t. cons (cast -typc1 a) t))
  (λ l. L.induct l·(λ g:List·Typ. {L.induct g nil cons ≃ g}) β (Λ m. λ a. λ t. ρ+ t - β) ).

type_eq_lemma : Π a:Typ. Π b:Typ. {Ty.typ_eq a b ≃ ETy.typ_eq (cast -typc1 a) (cast -typc1 b)}
= λ a. Ty.induct a ·(λ t:Typ. Π b:Typ. {Ty.typ_eq t b ≃ ETy.typ_eq (cast -typc1 t) (cast -typc1 b)})
  (λ b. Ty.induct b ·(λ t:Typ. {Ty.typ_eq typ.base t ≃ ETy.typ_eq (cast -typc1 typ.base) (cast -typc1 t)})
    β
    (Λ a'.  Λ b'. λ u. λ v. β))
  (Λ a'. Λ b'. λ u. λ v. λ b. Ty.induct b ·(λ t:Typ. {Ty.typ_eq (typ.arr a' b') t ≃ etyp.typ_eq (cast (typ.arr a' b')) (cast t)})
    β
    (Λ a2. Λ b2. λ x. λ y. χ({ and (typ.typ_eq a' a2) (typ.typ_eq b' b2) ≃ and (etyp.typ_eq a' a2) (etyp.typ_eq b' b2)})
      - ρ ς (u a2) - ρ ς (v b2) - β)).

at_lemma : Π g:S.Ctx. Π a:S.Typ. Π i:Nat. {S.at i a g ≃ tt} ➔ {Se.at i a g ≃ tt}
= λ g. λ a. λ i. λ e. [lemma = L.mat_lemma -typc1 Ty.typ_eq ETy.typ_eq (L.mlength (L.list_to_mlist g)) i a (L.list_to_mlist g) type_eq_lemma]
  - ρ+ ς lemma - ρ+ e - β.

Stlc : S.Ctx ➔ S.Typ ➔ ★ = S.Stlc.
Stlce : Se.Ctx ➔ Se.Typ ➔ ★ = Se.Stlce.
var = S.var.
abs = S.abs.
app = S.app.

_ : ∀ g:S.Ctx. ∀ t:S.Typ. Cast·(Stlc g t)·(Stlce (cast -typc2 g) (cast -typc1 t))
= Λ g. Λ t. intrCast
  (λ s. S.induct -g -t s·(λ g':S.Ctx. λ t':S.Typ. λ s':Stlc g' t'. Stlce (cast -typc2 g') (cast -typc1 t'))
    (Λ g'. Λ a. λ i. Λ e. Se.var -(cast -typc2 g') -(cast -typc1 a) i -(at_lemma g' a i e))
    (Λ g'. Λ a. Λ b. Λ x. λ px. Se.abs -(cast -typc2 g') -(cast -typc1 a) -(cast -typc1 b) px)
    (Λ g'. Λ a. Λ b. Λ x. Λ y. λ px. λ py. Se.app -(cast -typc2 g') -(cast -typc1 a) -(cast -typc1 b) px py))
  (λ s. S.induct -g -t s·(λ g':S.Ctx. λ t':S.Typ. λ s':Stlc g' t'. {S.induct s' var abs app ≃ s'})
    (Λ g'. Λ a. λ i. Λ e.  β)
    (Λ g'. Λ a. Λ b. Λ x. λ px. ρ+ px - β)
    (Λ g'. Λ a. Λ b. Λ x. Λ y. λ px. λ py. ρ+ px - ρ+ py - β)).
