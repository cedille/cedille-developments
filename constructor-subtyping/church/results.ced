
import ../lib/lib.
import list.
import vectree as V.
import nat as N.
import int as I.

module results.

Nat : ★ = N.Nat.
zero = N.zero.
succ = N.succ.
Int : ★ = I.Int.


_ : Cast·Nat·Int
= intrCast
  (λ n. N.induct n·(λ x:Nat. Int) I.zero (Λ x. λ s. I.succ s))
  (λ n. N.induct n·(λ x:Nat. {N.induct x zero succ ≃ x}) β
    (Λ x. λ s. χ({succ (N.induct x zero succ) ≃ succ x}) - ρ s - β)).


length : ∀ A:★. List·A ➔ Nat
= Λ A. λ l. induct l·(λ x:List·A. Nat) zero (Λ m. λ a. λ c. succ c).

_ : {length nil ≃ zero} = β.
_ : {length (cons zero nil) ≃ succ zero} = β.
_ : {length (cons zero (cons zero nil)) ≃ succ (succ zero)} = β.

_ : ∀ A:★. CastDep·(List·A)·(λ l:List·A. V.VecTree·A (length l))
= Λ A. intrCastDep
  -(λ l. induct l·(λ x:List·A. V.VecTree·A (length x)) (V.nil·A)
    (Λ m. λ a. λ c. V.cons -(length m) a c))
  -(λ l. induct l·(λ x:List·A. {induct x nil cons ≃ x}) β
    (Λ m. λ a. λ c. χ({cons a (induct m nil cons) ≃ cons a m}) - ρ c - β)).
