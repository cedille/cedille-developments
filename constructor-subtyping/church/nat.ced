import ../lib/lib.

module nat.

NatPack' : ★ ➔ Label ➔ ★ = λ X:★. λ l:Label. ι _:
  {l ≃ lzero} ➾ X.
  {l ≃ lsucc} ➾ X ➔ X.

Nat' : ★ = ∀ X:★. (Π l:Label. NatPack'·X l) ➔ X.

zero' : Nat'
= Λ X. λ f. [ctors = f lzero]
  - ctors.1 -β.

succ' : Nat' ➔ Nat'
= λ n. Λ X. λ f. [ctors = f lsucc]
  - [s = ctors.2 -β]
  - s (n f).

NatIndPack : (Nat' ➔ ★) ➔ Label ➔ ★ = λ P:Nat' ➔ ★. λ l:Label. ι _:
  {l ≃ lzero} ➾ P zero'.
  {l ≃ lsucc} ➾ ∀ m:Nat'. P m ➔ P (succ' m).

NatInd : Nat' ➔ ★ = λ n:Nat'. ∀ P:Nat' ➔ ★. (Π l:Label. NatIndPack·P l) ➔ P n.

Nat : ★ = ι n:Nat'. NatInd n.

zero : Nat
= [zero', Λ P. λ f. [ctors = f lzero]
  - ctors.1 -β].

succ : Nat ➔ Nat
= λ n. [succ' n.1, Λ P. λ f. [ctors = f lsucc]
  - [s = ctors.2 -β]
  - s -n.1 (n.2·P f)].

pack : ∀ P:Nat' ➔ ★. P zero'
  ➔ (∀ m:Nat'. P m ➔ P (succ' m))
  ➔ Π l:Label. NatIndPack·P l
= Λ P. λ z. λ s. λ l.
  [T : ★ = NatIndPack·P l]
  - σ (eq l lzero) @ λ b:Bool. {eq l lzero ≃ b} ➾ T {
  | tt ➔ Λ e. [e = exact l lzero e] - [Λ _. z,
    Λ e'. [k:{lzero ≃ lsucc} = ρ ς e - ρ ς e' - β] - [d:False = δ - k] - explode' -d β{|z|}]
  | ff ➔ Λ e1. [e1 = nexact l lzero e1] - σ (eq l lsucc) @ λ b:Bool. {eq l lsucc ≃ b} ➾ T {
    | tt ➔ Λ e. [e = exact l lsucc e] - [Λ e'. [k:{lzero ≃ lsucc} = ρ ς e' - ρ ς e - β] - [d:False = δ - k] - explode' -d β{|s|},
      Λ _. Λ m. λ s'. s -m s']
    | ff ➔ Λ e2. [e2 = nexact l lsucc e2] - [Λ e. explode' -(e1 -e) β,
      Λ e. explode' -(e2 -e) β]
    } -β
  } -β.

to : Nat' ➔ Nat
= λ i. i·Nat (λ l. [p = pack·(λ x:Nat'. Nat) zero (Λ m:Nat'. succ) l]
  - [Λ e. p.1 -e, Λ e. p.2 -e -i]).

reflection : Π n:Nat. {to n.1 ≃ n}
= [P : Nat' ➔ ★ = λ x:Nat'. {(to x).1 ≃ x}] - λ n. n.2·P (pack·P β
  (Λ m. λ k. χ({succ (to m) ≃ succ m}) - ρ k - β{|k|})).

induct : Π n:Nat. ∀ P:Nat ➔ ★. P zero ➔ (∀ m:Nat. P m ➔ P (succ m))  ➔ P n
= λ n. Λ P. λ z. λ s. ρ (ς (reflection n)) - (n.2·(λ x:Nat'. P (to x)) (pack·(λ x:Nat'. P (to x))
  z
  (Λ m. λ k. s -(to m) k))).

add : Nat ➔ Nat ➔ Nat
= λ a. λ b. induct a·(λ x:Nat. Nat) b (Λ m. λ x. succ x).

-- Church encodings make pattern matching a pain, so here we cheat by translating to a mendler encoding
-- The schematic encoding uses mendler encodings, church encodings are used mostly for exposition
data MNat : ★ =
  | mzero : MNat
  | msucc : MNat ➔ MNat.

nat_to_mnat : Nat ➔ MNat
= λ n. induct n·(λ _:Nat. MNat) mzero (Λ _. λ x. msucc x).

mnat_to_nat : MNat ➔ Nat
= λ m. μ rec. m {
  | mzero ➔ zero
  | msucc x ➔ succ (rec x)
  }.

mnat_eq : MNat ➔ MNat ➔ Bool
= λ a. μ rec. a {
  | mzero ➔ λ b. σ b {
    | mzero ➔ tt
    | msucc _ ➔ ff
    }
  | msucc x ➔ λ b. σ b {
    | mzero ➔ ff
    | msucc y ➔ rec x y
    }
  }.

nat_eq : Nat ➔ Nat ➔ Bool
= λ a. λ b. mnat_eq (nat_to_mnat a) (nat_to_mnat b).


