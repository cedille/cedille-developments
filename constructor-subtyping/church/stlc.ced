import ../lib/lib.
import typ as Typ.
import nat as Nat.
import list as List.

module stlc.

Index : ★ = Nat.Nat.
Typ : ★ = Typ.Typ.
base = Typ.base.
arr = Typ.arr.
typ_eq = Typ.typ_eq.
Ctx : ★ = List.List·Typ.
nil = List.nil·Typ.
cons = List.cons·Typ.

in : Typ ➔ Ctx ➔ Bool
= λ t. λ g. List.induct g·(λ l:Ctx. Bool)
  ff
  (Λ _. λ x. λ g'. or (typ_eq t x) g').

StlcPack' : (Ctx ➔ Typ ➔ ★) ➔ Label ➔ ★ = λ X:Ctx ➔ Typ ➔ ★. λ l:Label. ι _:
  {l ≃ lvar} ➾ ∀ g:Ctx. ∀ a:Typ. {in a g ≃ tt} ➾ Index ➔ X g a. ι _:
  {l ≃ labs} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. X (cons a g) b ➔ X g (arr a b).
  {l ≃ lapp} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. X g (arr a b) ➔ X g a ➔ X g b.

Stlc' : Ctx ➔ Typ ➔ ★ = λ g:Ctx. λ ty:Typ.
  ∀ X:Ctx ➔ Typ ➔ ★. (Π l:Label. StlcPack'·X l) ➔ X g ty.

var' : ∀ g:Ctx. ∀ a:Typ. {in a g ≃ tt} ➾ Index ➔ Stlc' g a
= Λ g. Λ a. Λ e. λ i. Λ X. λ f. [v = (f lvar).1 -β]
  - v -g -a -e i.

-- the variable assumed to have a function type here has the base type
_ : Stlc' (cons Typ.base (cons (Typ.arr Typ.base Typ.base) nil)) Typ.base
= var' -(cons Typ.base (cons (Typ.arr Typ.base Typ.base) nil)) -Typ.base -β (Nat.succ Nat.zero) .

abs' : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlc' (cons a g) b ➔ Stlc' g (arr a b)
= Λ g. Λ a. Λ b. λ body. Λ X. λ f. [abs = (f labs).2.1 -β]
  - abs -g -a -b (body·X f).

app' : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlc' g (arr a b) ➔ Stlc' g a ➔ Stlc' g b
= Λ g. Λ a. Λ b. λ fn. λ arg. Λ X. λ f. [app = (f lapp).2.2 -β]
  - app -g -a -b (fn·X f) (arg·X f).

StlcIndPack : (Π g:Ctx. Π t:Typ. Stlc' g t ➔ ★) ➔ Label ➔ ★ = λ P:(Π g:Ctx. Π t:Typ. Stlc' g t ➔ ★). λ l:Label. ι _:
  {l ≃ lvar} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ e:{in a g ≃ tt}. Π i:Index. P g a (var' -g -a -e i) . ι _:
  {l ≃ labs} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc' (cons a g) b. P (cons a g) b x ➔ P g (arr a b) (abs' -g -a -b x).
  {l ≃ lapp} ➾ ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc' g (arr a b). ∀ y:Stlc' g a.  P g (arr a b) x ➔ P g a y ➔ P g b (app' -g -a -b x y).

StlcInd : Π g:Ctx. Π t:Typ. Stlc' g t ➔ ★ = λ g:Ctx. λ t:Typ. λ s:Stlc' g t.
  ∀ P:(Π g:Ctx. Π t:Typ. Stlc' g t ➔ ★). (Π l:Label. StlcIndPack·P l) ➔ P g t s.

Stlc : Π g:Ctx. Π t:Typ. ★ = λ g:Ctx. λ t:Typ. ι s:Stlc' g t. StlcInd g t s.

var : ∀ g:Ctx. ∀ a:Typ. {in a g ≃ tt} ➾ Index ➔ Stlc g a
= Λ g. Λ a. Λ e. λ i. [var' -g -a -e i, Λ P. λ f. [v = (f lvar).1 -β] - v -g -a -e i].

abs : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlc (cons a g) b ➔ Stlc g (arr a b)
= Λ g. Λ a. Λ b. λ body. [abs' -g -a -b body.1,
  Λ P. λ f. [c = (f labs).2.1 -β] - c -g -a -b -body.1 (body.2·P f)].

app : ∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. Stlc g (arr a b) ➔ Stlc g a ➔ Stlc g b
= Λ g. Λ a. Λ b. λ fn. λ arg. [app' -g -a -b fn.1 arg.1,
  Λ P. λ f. [c = (f lapp).2.2 -β] - c -g -a -b -fn.1 -arg.1 (fn.2·P f) (arg.2·P f)].

pack : ∀ P:(Π g:Ctx. Π t:Typ. Stlc' g t ➔ ★).
  (∀ g:Ctx. ∀ a:Typ. ∀ e:{in a g ≃ tt}. Π i:Index. P g a (var' -g -a -e i)) ➔
  (∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc' (cons a g) b. P (cons a g) b x ➔ P g (arr a b) (abs' -g -a -b x)) ➔
  (∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc' g (arr a b). ∀ y:Stlc' g a.  P g (arr a b) x ➔ P g a y ➔ P g b (app' -g -a -b x y)) ➔
  Π l:Label. StlcIndPack·P l
= Λ P. λ v. λ a. λ y. λ l.
  [T : ★ = StlcIndPack·P l]
  - σ (eq l lvar) @ λ b:Bool. {eq l lvar ≃ b} ➾ T {
  | tt ➔ Λ e. [e = exact l lvar e] - [Λ _. v,
    [Λ e'. [k:{lvar ≃ labs} = ρ ς e - ρ ς e' - β] - explode' -(δ - k) β{|v|},
    Λ e'. [k:{lvar ≃ lapp} = ρ ς e - ρ ς e' - β] - explode' -(δ - k) β{|v|}]]
  | ff ➔ Λ e1. [e1 = nexact l lvar e1] - σ (eq l labs) @ λ b:Bool. {eq l labs ≃ b} ➾ T {
    | tt ➔ Λ e. [e = exact l labs e] - [Λ e'. [k:{labs ≃ lvar} = ρ ς e - ρ ς e' - β] - explode' -(δ - k) β{|a|},
      [Λ _. a, Λ e'. [k:{labs ≃ lapp} = ρ ς e - ρ ς e' - β] - explode' -(δ - k) β{|a|}]]
    | ff ➔ Λ e2. [e2 = nexact l labs e2] - σ (eq l lapp) @ λ b:Bool. {eq l lapp ≃ b} ➾ T {
      | tt ➔ Λ e. [e = exact l lapp e] - [Λ e'. [k:{lvar ≃ lapp} = ρ ς e - ρ ς e' - β] -  explode' -(δ - k) β{|y|},
        [Λ e'. [k:{labs ≃ lapp} = ρ ς e' - ρ ς e - β] - explode' -(δ - k) β{|y|},
        Λ _. y]]
      | ff ➔ Λ e3. [e3 = nexact l lapp e3]
      - [Λ e. explode' -(e1 -e) β, [Λ e. explode' -(e2 -e) β, Λ e. explode' -(e3 -e) β]]
      } -β
    } -β
  } -β.

to : ∀ g:Ctx. ∀ t:Typ. Stlc' g t ➔ Stlc g t
= Λ g. Λ t. λ s. s·(λ g':Ctx. λ t':Typ. Stlc g' t') (λ l. [p = pack·(λ g':Ctx. λ t':Typ. λ s:Stlc' g' t'.  Stlc g' t')
  (var)
  (Λ g'. Λ a. Λ b. Λ x. abs -g' -a -b)
  (Λ g'. Λ a. Λ b. Λ x. Λ y. app -g' -a -b)
  l]
  - [Λ e. p.1 -e,
    [Λ e. Λ g'. Λ a. Λ b. λ x. p.2.1 -e -g' -a -b -x.1 x,
     Λ e. Λ g'. Λ a. Λ b. λ x. λ y. p.2.2 -e -g' -a -b -x.1 -y.1 x y]]).

reflection : ∀ g:Ctx. ∀ t:Typ. Π s:Stlc g t. {to s.1 ≃ s}
= Λ g. Λ t. [P : Π g':Ctx. Π t':Typ. Stlc' g' t' ➔ ★ = λ g':Ctx. λ t':Typ. λ x:Stlc' g' t'. {(to x).1 ≃ x}]
  - λ s. s.2·P (pack·P
  (Λ g'. Λ a. Λ e. λ i. β)
  (Λ g'. Λ a. Λ b. Λ x. λ e. ρ+ e - β)
  (Λ g'. Λ a. Λ b. Λ x. Λ y. λ px. λ py. ρ+ px - ρ+ py - β)).

induct : ∀ g:Ctx. ∀ t:Typ. Π s:Stlc g t. ∀ P:(Π g':Ctx. Π t':Typ. Stlc g' t' ➔ ★).
  (∀ g:Ctx. ∀ a:Typ. ∀ e:{in a g ≃ tt}. Π i:Index. P g a (var -g -a -e i)) ➔
  (∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc (cons a g) b. P (cons a g) b x ➔ P g (arr a b) (abs -g -a -b x)) ➔
  (∀ g:Ctx. ∀ a:Typ. ∀ b:Typ. ∀ x:Stlc g (arr a b). ∀ y:Stlc g a.  P g (arr a b) x ➔ P g a y ➔ P g b (app -g -a -b x y)) ➔
  P g t s
= Λ g. Λ t. λ s. Λ P. λ v. λ a. λ y. ρ ς (reflection -g -t s) - (s.2·(λ g':Ctx. λ t':Typ. λ s':Stlc' g' t'. P g' t' (to -g' -t' s'))
  (pack·(λ g':Ctx. λ t':Typ. λ s':Stlc' g' t'. P g' t' (to -g' -t' s')) v
    (Λ g'. Λ a'. Λ b'. Λ x. λ px. a -g' -a' -b' -(to -(cons a' g') -b' x) px)
    (Λ g'. Λ a'. Λ b'. Λ u. Λ v. λ pu. λ pv. y -g' -a' -b' -(to -g' -(arr a' b') u) -(to -g' -a' v) pu pv))).


