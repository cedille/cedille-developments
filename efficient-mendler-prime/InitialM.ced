import Id.
module InitialM (F : ★ ➔ ★) {imap : IdMapping · F}.
import FixM · F.
import FixIndM · F -imap.

AlgMExt ◂ Π A : ★. AlgM · A ➔ ★ = λ A : ★. λ alg : AlgM · A.
  ∀ R : ★. Π f : R ➔ A. Π g : R ➔ A.
  (Π r : R. { f r ≃ g r }) ➾ Π xs : F · R. { alg f xs ≃ alg g xs }.

initialM ◂ ∀ A : ★. Π alg : AlgM · A. Π algExt : AlgMExt · A alg.
  Π h : FixIndM ➔ A. Π hom : Π xs : F · FixIndM. { h (inIndM xs) ≃ alg h xs }.
  Π x : FixIndM. { h x ≃ foldM alg x.1 }
  = Λ A. λ alg. λ algExt. λ h. λ hom. λ x.
  θ<x> inductionM
  (Λ R. Λ c. λ ih. λ rs.
  χ { h (inM rs) ≃ foldM alg (inM rs) } -
  ρ (hom (elimId -(imap -c) rs)) -
  χ { alg h rs ≃ foldM alg (inM rs) } -
  χ { alg h rs ≃ alg (foldM alg) rs } -
  algExt · R
    (λ r. h (elimId -c r))
    (λ r. foldM alg (elimId -c r).1)
    -ih rs
  ) x.
