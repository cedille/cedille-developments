module Nat.

import Id.
import AlgM.
import FixIndM.
import NatF.
import IFixM.
import Unit.
import Bool.

Nat ◂ ★ = FixIndM · NatF imapN.
inNat ◂ NatF · Nat ➔ Nat = inIndM · NatF -imapN.
zero ◂ Nat = inIndM · NatF -imapN (zeroF · Nat).
suc ◂ Nat ➔ Nat = λ n. inIndM · NatF -imapN (sucF · Nat n).

elimNat ◂ ∀ P : Nat ➔ ★. P zero ➔ (Π n : Nat. P n ➔ P (suc n)) ➔ Π n : Nat. P n
  = Λ P. λ pZ. λ pS. inductionM · NatF -imapN · P
  (Λ R. Λ c. λ ih. elimNatF · R
    · (λ s : NatF · R. P (inIndM · NatF -imapN (elimId · (NatF · R) · (NatF · Nat)
      (imapN · R · Nat c) s)))
    pZ
    (λ r. pS (elimId~ · R · Nat -c r) (ih r))
  ).
foldNat ◂ ∀ C : ★. C ➔ (Nat ➔ C ➔ C) ➔ Nat ➔ C
  = Λ C. elimNat · (λ n : Nat. C).

addAlgM ◂ AlgM · NatF · (Nat ➔ Nat)
  = Λ R. λ rec. λ s. λ m . foldNatF · R · Nat m (λ r. suc (rec r m)) s.
add ◂ Nat ➔ Nat ➔ Nat = foldIndM · NatF -imapN · (Nat ➔ Nat) addAlgM.

isZero ◂ Nat ➔ Bool
  = foldNat · Bool true (λ n. λ ih. false).
isSuc ◂ Nat ➔ Bool
  = λ n. not (isZero n).
pred ◂ Nat ➔ Nat
  = foldNat · Nat zero (λ n. λ ih. n).
