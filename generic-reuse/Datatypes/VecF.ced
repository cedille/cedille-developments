module VecF.

import Nat.
import Sigma.
import Id.
import IFixIndM.

data VecF (A : ★) (X : Nat ➔ ★) : Nat ➔ ★ =
  | nilVF : VecF zero
  | consVF : ∀ n : Nat. A ➔ X n ➔ VecF (suc n).

elimVecF ◂ ∀ A : ★. ∀ X : Nat ➔ ★. ∀ P : Π n : Nat. VecF · A · X n ➔ ★.
  P zero (nilVF · A · X) ➔
  (∀ n : Nat. Π a : A. Π x : X n. P (suc n) (consVF -n a x)) ➔ 
  ∀ n : Nat. Π s : VecF · A · X n. P n s
  = Λ A. Λ X. Λ P. λ pN. λ pC. Λ n. λ s.
  μ' s @ P { nilVF ➔ pN | consVF -n a x ➔ pC -n a x }.
foldVecF ◂ ∀ A : ★. ∀ X : Nat ➔ ★. ∀ C : Nat ➔ ★.
  C zero ➔ (∀ n : Nat. A ➔ X n ➔ C (suc n)) ➔ 
  ∀ n : Nat. VecF · A · X n ➔ C n
  = Λ A. Λ X. Λ C. elimVecF · A · X · (λ n : Nat. λ s : VecF · A · X n. C n).

imapV ◂ ∀ A : ★. IIdMapping · Nat · (VecF · A)
  = Λ A. Λ X. Λ Y. λ c. elimVecF · A · X
  · (λ n : Nat. λ s : VecF · A · X n. IdCod · (VecF · A · X n) · (VecF · A · Y n) s)
  (pairId -(nilVF · A · X) (nilVF · A · Y) β)
  (Λ m. λ a. λ x. pairId -(consVF -m a x) (consVF -m a (elimId (c -m) x)) β).
