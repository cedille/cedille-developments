module MemF.

import List.
import Sigma.
import Product.
import Id.
import IFixIndM.

data MemF (A : ★) {x : A} (X : List · A ➔ ★) : List · A ➔ ★ =
  | hereF : ∀ xs : List · A. MemF (consL x xs)
  | thereF : ∀ y : A. ∀ xs : List · A. X xs ➔ MemF (consL y xs).

elimMemF ◂ ∀ A : ★. ∀ x : A. ∀ X : List · A ➔ ★.
  ∀ P : Π xs : List · A. MemF · A x · X xs ➔ ★.
  Π pH : ∀ xs : List · A. P (consL · A x xs) (hereF -x · X -xs).
  Π pT : ∀ y : A. ∀ xs : List · A. Π i : X xs. P (consL y xs) (thereF -x · X -y -xs i).
  ∀ xs : List · A. Π i : MemF · A x · X xs. P xs i
  = Λ A. Λ x. Λ X. Λ P. λ pH. λ pT. Λ xs. λ s.
  μ' s @ P { hereF -xs ➔ pH -xs | thereF -y -xs i ➔ pT -y -xs i }.

imapMem ◂ ∀ A : ★. ∀ x : A. IIdMapping · (List · A) · (MemF · A x)
  = Λ A. Λ x. Λ X. Λ Y. λ c. elimMemF -x · X
  · (λ xs : List · A. λ s : MemF · A x · X xs. IdCod · (MemF · A x · X xs) · (MemF · A x · Y xs) s)
  (Λ xs. pairId -(hereF -x · X -xs) (hereF -x · Y -xs) β)
  (Λ y. Λ xs. λ i. pairId
    -(thereF  -x · X -y -xs i)
    (thereF -x · Y -y -xs (elimId (c -xs) i))
    β
  )
.
