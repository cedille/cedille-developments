module ListF.

import Id.
import Sigma.

data ListF (A : ★) (X : ★) : ★ =
  | nilLF : ListF
  | consLF : A ➔ X ➔ ListF.

elimListF ◂ ∀ A : ★. ∀ X : ★. ∀ P : ListF · A · X ➔ ★.
  P (nilLF · A · X) ➔ (Π a : A. Π x : X. P (consLF a x)) ➔
  Π s : ListF · A · X. P s
  = Λ A. Λ X. Λ P. λ pN. λ pC. λ s.
  μ' s @ P { nilLF ➔ pN | consLF a x ➔ pC a x }.
foldListF ◂ ∀ A : ★. ∀ X : ★. ∀ C : ★.
  C ➔ (A ➔ X ➔ C) ➔ ListF · A · X ➔ C
  = Λ A. Λ X. Λ C. elimListF · A · X · (λ s : ListF · A · X. C).

imapL ◂ ∀ A : ★. IdMapping · (ListF · A) 
  = Λ A. Λ X. Λ Y. λ c. elimListF · A · X
  · (λ s : ListF · A · X. IdCod · (ListF · A · X) · (ListF · A · Y) s)
  (pairId -(nilLF · A · X) (nilLF · A · Y) β)
  (λ a. λ x. pairId -(consLF a x) (consLF a (elimId c x)) β).

