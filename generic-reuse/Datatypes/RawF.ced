module RawF.
import Id.
import Sigma.
import IIdMapping.
import Nat.
import Tp.

data RawF (X : ★) : ★ =
  | varF : Nat ➔ RawF
  | lamF : Tp ➔ X ➔ RawF
  | appF : X ➔ X ➔ RawF.

elimRawF ◂ ∀ X : ★. ∀ P : RawF · X ➔ ★.
  (Π n : Nat. P (varF · X n)) ➔
  (Π A : Tp. Π x : X. P (lamF · X A x)) ➔
  (Π x1 : X. Π x2 : X. P (appF · X x1 x2)) ➔
  Π s : RawF · X. P s
  = Λ X. Λ P. λ pV. λ pL. λ pA. λ s.
  μ' s @ P {
  | varF n ➔ pV n
  | lamF A x ➔ pL A x
  | appF x1 x2 ➔ pA x1 x2
  }.
foldRawF ◂ ∀ X : ★. ∀ C : ★.
 (Nat ➔ C) ➔ (Tp ➔ X ➔ C) ➔ (X ➔ X ➔ C) ➔ RawF · X ➔ C
 = Λ X. Λ C. elimRawF · X · (λ s : RawF · X. C).

imapRaw ◂ IdMapping · RawF
 = Λ X. Λ Y. λ c. elimRawF · X
 · (λ s : RawF · X. IdCod · (RawF · X) · (RawF · Y) s)
 (λ n. pairId -(varF · X n) (varF · Y n) β)
 (λ A. λ x. pairId -(lamF A x) (lamF A (elimId c x)) β)
 (λ x1. λ x2. pairId -(appF x1 x2) (appF (elimId c x1) (elimId c x2)) β).


