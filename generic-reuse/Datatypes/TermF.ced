module TermF.
import Id.
import Sigma.
import IIdMapping.
import Nat.
import Ctx.
import Tp.
import Mem.
import Product.

data TermF (X : CtxTp ➔ ★) : CtxTp ➔ ★ =
  | ivarF : ∀ G : Ctx. ∀ A : Tp. Mem · Tp A G ➔ TermF (pairCtxTp G A)
  | ilamF : ∀ G : Ctx. Π A : Tp. ∀ B : Tp. X (pairCtxTp (ext G A) B) ➔ TermF (pairCtxTp G (Arr A B))
  | iappF : ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp. X (pairCtxTp G (Arr A B)) ➔ X (pairCtxTp G A) ➔ TermF (pairCtxTp G B)
  .

elimTermF ◂ ∀ X : CtxTp ➔ ★. ∀ P : Π GA : CtxTp. TermF · X GA ➔ ★.
  Π pV : ∀ G : Ctx. ∀ A : Tp. Π i : Mem · Tp A G. P (pairCtxTp G A) (ivarF · X -G -A i).
  Π pL : ∀ G : Ctx. Π A : Tp. ∀ B : Tp. Π x : X (pairCtxTp (ext G A) B). P (pairCtxTp G (Arr A B)) (ilamF · X -G A -B x).
  Π pA : ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp. Π x1 : X (pairCtxTp G (Arr A B)). Π x2 : X (pairCtxTp G A). P (pairCtxTp G B) (iappF · X -G -A -B x1 x2).
  ∀ GA : CtxTp. Π s : TermF · X GA. P GA s
  = Λ X. Λ P. λ pV. λ pL. λ pA. Λ GA. λ s.
  μ' s @ P {
  | ivarF -G -A i ➔ pV -G -A i
  | ilamF -G A -B x ➔ pL -G A -B x
  | iappF -G -A -B x1 x2 ➔ pA -G -A -B x1 x2
  }.

imapTerm ◂ IIdMapping · CtxTp · TermF
  = Λ X. Λ Y. λ c. elimTermF · X
  · (λ GA : CtxTp. λ s : TermF · X GA. IdCod · (TermF · X GA) · (TermF · Y GA) s)
  (Λ G. Λ A. λ i. pairId
    -(ivarF · X -G -A i) (ivarF · Y -G -A i) β)
  (Λ G. λ A. Λ B. λ x. pairId
    -(ilamF · X -G A -B x) (ilamF · Y -G A -B
      (elimId (c -(pairCtxTp (ext G A) B)) x))
      β)
  (Λ G. Λ A. Λ B. λ x1. λ x2. pairId
    -(iappF · X -G -A -B x1 x2) (iappF · Y -G -A -B
      (elimId (c -(pairCtxTp G (Arr A B))) x1)
      (elimId (c -(pairCtxTp G A)) x2))
      β)
  .



