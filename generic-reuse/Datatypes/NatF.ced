module NatF.

import Id.
import Sigma.

data NatF (X : ★) : ★ =
  | zeroF : NatF
  | sucF : X ➔ NatF.

elimNatF ◂ ∀ X : ★. ∀ P : NatF · X ➔ ★.
  P (zeroF · X) ➔ (Π x : X. P (sucF x)) ➔
  Π s : NatF · X. P s
  = Λ X. Λ P. λ pZ. λ pS. λ s.
  μ' s @ P { zeroF ➔ pZ | sucF x ➔ pS x }.
foldNatF ◂ ∀ X : ★. ∀ C : ★.
 C ➔ (X ➔ C) ➔ NatF · X ➔ C
 = Λ X. Λ C. elimNatF · X · (λ s : NatF · X. C).

imapN ◂ IdMapping · (NatF) 
 = Λ X. Λ Y. λ c. elimNatF · X
 · (λ s : NatF · X. IdCod · (NatF · X) · (NatF · Y) s)
 (pairId -(zeroF · X) (zeroF · Y) β)
 (λ x. pairId -(sucF · X x) (sucF · Y (elimId · X · Y c x)) β).

