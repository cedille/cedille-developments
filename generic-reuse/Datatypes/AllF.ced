module AllF.

import List.
import Sigma.
import Product.
import IIdMapping.
import Id.
import IFixIndM.

data AllF (A : ★) (Q : A ➔ ★) (X : List · A ➔ ★) : List · A ➔ ★ =
  | doneF : AllF (nilL · A)
  | nextF : ∀ x : A. ∀ xs : List · A. Q x ➔ X xs ➔ AllF (consL x xs).

elimAllF ◂ ∀ A : ★. ∀ Q : A ➔ ★. ∀ X : List · A ➔ ★.
  ∀ P : Π xs : List · A. AllF · A · Q · X xs ➔ ★.
  Π pD : P (nilL · A) (doneF · A · Q · X).
  Π pN : ∀ x : A. ∀ xs : List · A. Π q : Q x. Π qs : X xs. P (consL · A x xs) (nextF · A · Q · X -x -xs q qs).
  ∀ xs : List · A. Π qs : AllF · A · Q · X xs. P xs qs
  = Λ A. Λ Q. Λ X. Λ P. λ pD. λ pN. Λ xs. λ s.
  μ' s @ P { doneF ➔ pD | nextF -x -xs q qs ➔ pN -x -xs q qs }.

imapA ◂ ∀ A : ★. ∀ Q : A ➔ ★. IIdMapping · (List · A) · (AllF · A · Q)
  = Λ A. Λ Q. Λ X. Λ Y. λ c. elimAllF · A · Q · X
  · (λ xs : List · A. λ s : AllF · A · Q · X xs. IdCod · (AllF · A · Q · X xs) · (AllF · A · Q · Y xs) s)
  (pairId -(doneF · A · Q · X) (doneF · A · Q · Y) β)
  (Λ y. Λ xs. λ q. λ qs.
    pairId -(nextF -y -xs q qs) (nextF -y -xs q (elimId (c -xs) qs)) β).
