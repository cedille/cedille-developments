import Id.
module FixIndM (F : ★ ➔ ★) {imap : IdMapping · F}.
import Unit.
import UnitLift.
import Sigma.
import AlgM · F.
import IFixM · Unit · (UnitF · F).
import IFixIndM · Unit · (UnitF · F) -(uimap imap).

PrfAlgM ◂ Π X : ★. (X ➔ ★) ➔ (F · X ➔ X) ➔ ★
  = λ X : ★. λ P : X ➔ ★. λ alg : F · X ➔ X. 
  ∀ R : ★. ∀ c : Id · R · X. 
  Π ih : Π r : R. P (elimId c r).
  Π rs : F · R. P (alg (elimId (imap c) rs)).

FixIndM ◂ ★ = IFixIndM unit.

inIndM ◂ F · FixIndM ➔ FixIndM = iinIndM -unit.

ualg ◂ ∀ A : ★. AlgM · A ➔ IAlgM · (λ u : Unit. A) 
 = Λ A. λ alg. Λ R. λ r. Λ i. λ un. alg (r -unit) un.

foldIndM ◂ ∀ C : ★. AlgM · C ➔ FixIndM ➔ C
 = Λ C. λ alg. λ x. ifoldIndM · (λ u : Unit. C) (ualg alg) -unit x.

inductionM ◂ ∀ P : FixIndM ➔ ★. PrfAlgM · FixIndM · P inIndM ➔ Π x : FixIndM. P x
  = Λ P. λ alg. λ x. iinductionM
  · (λ u : Unit. λ ix : IFixIndM u. P (ρ ς (etaUnit u) - ix))
  (Λ R. Λ ic. λ ih. Λ i. λ gr. alg · (R unit) -(ic -unit) (λ r. ih -unit r) gr) 
  -unit x.

