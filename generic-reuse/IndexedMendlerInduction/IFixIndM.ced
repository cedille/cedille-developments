import Id.
module IFixIndM (I : ★) (F : (I ➔ ★) ➔ I ➔ ★) {imap : IIdMapping · I · F}.
import Sigma.
import IIdPlus · I.
import IFixM · I · F.

IPrfAlgM ◂ Π X : I ➔ ★. Π P : Π i : I. X i ➔ ★. Π alg : ∀ i : I. F · X i ➔ X i. ★
  = λ X : I ➔ ★. λ P : Π i : I. X i ➔ ★. λ alg : ∀ i : I. F · X i ➔ X i.
  ∀ R : I ➔ ★. ∀ c : ∀ i : I. Id · (R i) · (X i). 
  Π ih : ∀ i : I. Π r : R i. P i (elimId (c -i) r).
  ∀ i : I. Π rs : F · R i. P i (alg -i (elimId (imap c -i) rs)).

IInductiveM ◂ Π i : I. IFixM i ➔ ★ = λ i : I. λ x : IFixM i.
  ∀ P : Π i : I. IFixM i ➔ ★.
  IPrfAlgM · IFixM · P iinM ➔ P i x.

IFixIndM ◂ I ➔ ★ = λ i : I. ι x : IFixM i. IInductiveM i x.

iidDown ◂ ∀ i : I. Id · (IFixIndM i) · (IFixM i)
  = Λ i. λ x. pair x.1 β.
iimapDown ◂ ∀ i : I. Id · (F · IFixIndM i) · (F · IFixM i)
  = Λ i. imap iidDown -i.

iinIndM1 ◂ ∀ i : I. F · IFixIndM i  ➔ IFixM i
  = Λ i. λ xs. iinM -i (elimId (iimapDown -i) xs).
iinIndM2 ◂ ∀ i : I. Π xs : F · IFixIndM i. IInductiveM i (iinIndM1 -i xs)
  = Λ i. λ xs. Λ P. λ c. c -iidDown (Λ i. λ x. x.2 c) -i xs.

iinIndM ◂ ∀ i : I. F · IFixIndM i ➔ IFixIndM i
  = Λ i. λ xs. [ iinIndM1 -i xs, iinIndM2 -i xs ].

ilowerPrfAlg ◂ ∀ P : Π i : I. IFixIndM i ➔ ★.
  IPrfAlgM · IFixIndM · P iinIndM ➔
  IPrfAlgM · IFixM · (IIdPlusCod · IFixM · IFixIndM · P) iinM
  = Λ P. λ alg. Λ R. Λ c. λ ih. Λ i. λ rs.
  pair (iinIndM -i (elimId (imap (elimIIdPlusId -c ih) -i) rs))
    (pair β (alg -(elimIIdPlusId -c ih) (elimIIdPlusIH -c ih) -i rs)).

iinductionM ◂ ∀ P : Π i : I. IFixIndM i ➔ ★.
  IPrfAlgM · IFixIndM · P iinIndM ➔
  ∀ i : I. Π x : IFixIndM i. P i x
  = Λ P. λ alg. Λ i. λ x.
  proj2 (proj2 (x.2 (ilowerPrfAlg alg))).

ifoldIndM ◂ ∀ C : I ➔ ★. IAlgM · C ➔ ∀ i : I. IFixIndM i ➔ C i
  = Λ C. λ alg. Λ i. λ x.
  ifoldM alg -i x.1.
