module Sigma.

data Sigma (A : ★) (B : A ➔ ★) : ★ = pair : Π a : A. B a ➔ Sigma.

elimSigma ◂ ∀ A : ★. ∀ B : A ➔ ★. ∀ P : Sigma · A · B ➔ ★.
  (Π a : A. Π b : B a. P (pair a b)) ➔ Π s : Sigma · A · B. P s
  = Λ A. Λ B. Λ P. λ p. λ s.
  μ' s @ P { pair a b ➔ p a b }.
foldSigma ◂ ∀ A : ★. ∀ B : A ➔ ★. ∀ C : ★.
  (Π a : A. B a ➔ C) ➔ Sigma · A · B ➔ C
  = Λ A. Λ B. Λ C. elimSigma · A · B · (λ s : Sigma · A · B. C).

proj1 ◂ ∀ A : ★. ∀ B : A ➔ ★. Sigma · A · B  ➔  A 
 = Λ A. Λ B. λ s. μ' s { pair a b ➔ a }.
proj2 ◂ ∀ A : ★. ∀ B : A ➔ ★. Π s : Sigma · A · B. B (proj1 · A · B s) 
 = Λ A. Λ B. λ s. μ' s
 @ (λ s' : Sigma · A · B. B (proj1 s'))
 { pair a b ➔ b }.

etaSigma ◂ ∀ A : ★. ∀ B : A ➔ ★. Π xs : Sigma · A · B.
  { xs ≃ pair (proj1 xs) (proj2 xs) } =
  Λ A. Λ B. elimSigma · A · B
  · (λ xs : Sigma · A · B. { xs ≃ pair (proj1 xs) (proj2 xs) })
  (λ a. λ b. β).

invPair1 ◂ ∀ A : ★. ∀ B : ★. ∀ a : A. ∀ a' : A. ∀ b : B. ∀ b' : B.
  {pair a b ≃ pair a' b'} ➔ {a ≃ a'}
  = Λ A. Λ B. Λ a. Λ a'. Λ b. Λ b'. λ q.
  χ {proj1 (pair a b) ≃ proj1 (pair a' b')} -
  ρ q - β.

invPair2 ◂ ∀ A : ★. ∀ B : ★. ∀ a : A. ∀ a' : A. ∀ b : B. ∀ b' : B.
  {pair a b ≃ pair a' b'} ➔ {b ≃ b'}
  = Λ A. Λ B. Λ a. Λ a'. Λ b. Λ b'. λ q.
  χ {proj2 (pair a b) ≃ proj2 (pair a' b')} -
  ρ q - β.
