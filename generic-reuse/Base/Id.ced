module Id.
import Eq.
import Sigma.

IdDepCod ◂ Π A : ★. Π B : A ➔ ★. A ➔ ★ = λ A : ★. λ B : A ➔ ★.
 λ a : A. Sigma · (B a) · (λ b : B a. { b ≃ a }).

IdDep ◂ Π A : ★. Π B : A ➔ ★. ★ = λ A : ★. λ B : A ➔ ★. 
 Π a : A. IdDepCod · A · B a.

elimIdDep~ ◂ ∀ A : ★ . ∀ B : A ➔ ★ . IdDep · A · B ➾ Π a : A . B a =
  Λ A . Λ B . Λ c . λ a .
  subst · (B a) · A -(proj1 · (B a) · (λ b : (B a). {b ≃ a}) (c a)) a -(proj2 · (B a) · (λ b : (B a). {b ≃ a}) (c a)) .

elimIdDep ◂ ∀ A : ★ . ∀ B : A ➔ ★ . IdDep · A · B ➔ Π a : A . B a =
  Λ A . Λ B . λ c . elimIdDep~ · A · B -c.

elimIdDepId ◂ ∀ A : ★ . ∀ B : A ➔ ★ . ∀ q : IdDep · A · B .
  {elimIdDep · A · B q ≃ (λ x . x)}
  = Λ A. Λ B. Λ q. β .

intrIdDep ◂ ∀ X : ★. ∀ Y : X ➔ ★. Π f : (Π x : X. Y x). (Π z : X. {f z ≃ z}) ➔ IdDep · X · Y 
 = Λ X. Λ Y. λ if. λ p. λ a. pair · (Y a) · (λ y : (Y a). {y ≃ a}) (if a) (p a).

pairIdDep ◂ ∀ A : ★. ∀ B : A ➔ ★. ∀ a : A.
  Π b : B a. { b ≃ a } ➔ IdDepCod · A · B a
  = Λ A. Λ B. Λ a. λ b. λ q.
  pair · (B a) · (λ x : B a. { x ≃ a }) b q .

IdCod ◂ Π A : ★. Π B : ★. A ➔ ★ = λ A : ★. λ B : ★.
 IdDepCod · A · (λ _ : A. B).

Id ◂ Π A : ★. Π B : ★. ★ = λ A : ★. λ B : ★. Π a : A. IdCod · A · B a.

elimId~ ◂ ∀ A : ★ . ∀ B : ★ . Id · A · B ➾ Π a : A . B =
  Λ A . Λ B . elimIdDep~ · A · (λ a : A. B) .

elimId ◂ ∀ A : ★ . ∀ B : ★ . Id · A · B ➔ Π a : A . B =
  Λ A . Λ B . λ c . elimId~ · A · B -c.

intrId ◂ ∀ X : ★. ∀ Y : ★. Π f : X ➔ Y. (Π z : X. {f z ≃ z}) ➔ Id · X · Y 
 = Λ X. Λ Y. λ if. λ p. λ a. pair · Y · (λ y : Y. {y ≃ a}) (if a) (p a).

pairId ◂ ∀ A : ★. ∀ B : ★. ∀ a : A.
  Π b : B. { b ≃ a } ➔ IdCod · A · B a
  = Λ A. Λ B. pairIdDep · A · (λ a : A. B) .

IdMapping ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★.
  ∀ X : ★. ∀ Y : ★. Id · X · Y ➔ Id · (F · X) · (F · Y).

IIdMapping ◂ Π I : ★. Π F : (I ➔ ★) ➔ I ➔ ★. ★ =
  λ I : ★. λ F : (I ➔ ★) ➔ I ➔ ★.
  ∀ X : I ➔ ★. ∀ Y : I ➔ ★.
  (∀ i : I. Id · (X i) · (Y i)) ➔
  ∀ i : I. Id · (F · X i) · (F · Y i).
